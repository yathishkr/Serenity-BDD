broswerstack/browserstack.java

package com.adidas.tpAdidasSerenity.fe.browserstack;

//import okhttp3.MediaType;
import org.apache.commons.codec.binary.Base64;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

public class BrowserstackAPI {

    //public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
    private static final String SESSION_URL = "https://%s@api.browserstack.com/automate/sessions/%s.json";
    private static final String BROWSERSTACK_HEADER_AUTHORIZATION = "Authorization";
    private static final String BROWSERSTACK_HEADER_ACCEPT = "Accept";
    private JsonObject sessionData = null;
    private String authorizationValue = "";
    private String fixedSessionUrl = "";


    public BrowserstackAPI(String url, String session) throws IOException {
        URL userInfo = new URL(url);
        String userPassword = userInfo.getUserInfo();
        byte[] authorizationEncodedBytes = Base64.encodeBase64(userPassword.getBytes());
        String authorizationEncoded = new String(authorizationEncodedBytes);
        authorizationValue = "Basic " + authorizationEncoded;
        fixedSessionUrl = String.format(SESSION_URL, userPassword, session);
        sessionData = getSessionData();
    }


    public JsonObject getSessionData() throws IOException {
        URL url = new URL(fixedSessionUrl);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("GET");
        con.setRequestProperty(BROWSERSTACK_HEADER_AUTHORIZATION, authorizationValue);
        con.setRequestProperty(BROWSERSTACK_HEADER_ACCEPT, "*/*");
        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer content = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
        }
        in.close();
        con.disconnect();
        JsonReader reader = Json.createReader(new StringReader(content.toString()));
        JsonObject object = reader.readObject();
        reader.close();
        return object;
    }

    public String getPublicVideoUrl() {
        return sessionData.get("automation_session").asJsonObject().getString("public_url");
    }

    public String getNetworkLogsUrl() {
        return sessionData.get("automation_session").asJsonObject().getString("har_logs_url");
    }

    public void setStatus(String status) throws IOException {
        URL url = new URL(fixedSessionUrl);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setDoOutput(true);
        con.setRequestMethod("PUT");
        con.setRequestProperty(BROWSERSTACK_HEADER_AUTHORIZATION, authorizationValue);
        con.setRequestProperty(BROWSERSTACK_HEADER_ACCEPT, "*/*");
        con.setRequestProperty("Content-Type", "application/json");
        OutputStreamWriter out = new OutputStreamWriter(
                con.getOutputStream());
        out.write("{\"status\":\"" + status + "\", \"reason\":\"Auto Update\"}");
        out.close();
        con.getInputStream();
        con.disconnect();
    }
}

browserstack/BrowserStackSerenityDriver.java

package com.adidas.tpAdidasSerenity.fe.browserstack;


import net.thucydides.core.util.EnvironmentVariables;
//import net.thucydides.core.util.SystemEnvironmentVariables;
import net.thucydides.core.environment.SystemEnvironmentVariables;

import net.thucydides.core.webdriver.DriverSource;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

import java.io.File;
import java.net.URL;

/**
 * Manage the creation of the WebDriver for BrowserStack executions
 */
public class BrowserStackSerenityDriver<Private> implements DriverSource {



    public WebDriver newDriver() {

        EnvironmentVariables environmentVariables = SystemEnvironmentVariables
                .createEnvironmentVariables();
        //BrowserStack Credentials
        String user = environmentVariables.getProperty("browserstack.user");
        String key = environmentVariables.getProperty("browserstack.key");
        //BrowserStack Server
        String server = environmentVariables.getProperty("browserstack.server");
        //BrowserStack Capabilities
        String build = environmentVariables.getProperty("browserstack.build");
        String project = environmentVariables.getProperty("browserstack.project");
        //BrowserStack Browser
        String browser = environmentVariables.getProperty("browserstack.browser");
        String browserVersion = environmentVariables.getProperty("browserstack.browser_version");
        String resolution = environmentVariables.getProperty("browserstack.resolution");
        //BrowserStack Platform
        String os = environmentVariables.getProperty("browserstack.os");
        String osVersion = environmentVariables.getProperty("browserstack.os_version");
        //BrowserStack Options
        Boolean debug = Boolean.valueOf(environmentVariables.getProperty("browserstack.debug"));
        Boolean local = Boolean.valueOf(environmentVariables.getProperty("browserstack.local"));

        //Defining defaults
        if (StringUtils.isEmpty(browser)) {
            browser = "IE";
        }
        if (StringUtils.isEmpty(browserVersion)) {
            browserVersion = "11.0";
        }
        if (StringUtils.isEmpty(os)) {
            os = "Windows";
        }
        if (StringUtils.isEmpty(osVersion)) {
            osVersion = "7";
        }

        if (StringUtils.isEmpty(resolution)) {
            resolution = "1920x1080";
        }

        //BrowserStack capabilities -> https://www.browserstack.com/automate/capabilities
        DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setCapability("build", build);
        capabilities.setCapability("project", project);
        //Desired Browser
        capabilities.setCapability("browser", browser);
        capabilities.setCapability("browser_version", browserVersion);
        capabilities.setCapability("resolution", resolution);
        //Desired Platform
        capabilities.setCapability("os", os);
        capabilities.setCapability("os_version", osVersion);
        //BrowserStack Options
        capabilities.setCapability("browserstack.debug", debug);
        capabilities.setCapability("browserstack.local", local);

        //Uncomment if you want to use browserstack-local in your local executions
        //You will also need browserstack-local-java dependency in your pom.xml
    /*
    if (local) {
      Local bsLocal = new Local();
      HashMap<String, String> bsLocalArgs = new HashMap<String, String>();
      bsLocalArgs.put("key", key);
      try {
        bsLocal.start(bsLocalArgs);
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    */

        try {
            WebDriver webDriver = new RemoteWebDriver(new URL("http://" + user + ":" + key + "@" + server + "/wd/hub"),
                    capabilities);
            String session = ((RemoteWebDriver) webDriver).getSessionId().toString();
            String seleniumUrl = "http://" + user + ":" + key + "@" + server + "/wd/hub";
            System.out.println("Session id is "+session);
            BrowserstackAPI bsApi = new BrowserstackAPI(seleniumUrl, session);
            String videoLink = bsApi.getPublicVideoUrl();
            System.out.println("BrowserStack url is "+videoLink);
            String data = String.format("<Browserstack session id =' %s ' 'Browserstack session url is'>%s</a> <br>",session, videoLink);
            FileUtils.writeStringToFile(new File("target/bsvideolinks/linksToBS.txt"), String.format(data));

            return webDriver;

        } catch (Exception e) {
            System.out.println(e);
            return null;
        }
    }



        /**
         *
         * Return true if the driver is configured to take screenshots
         */
        public boolean takesScreenshots(){
            return false;
        }
}


cucumbersteps

AuditTrailSteps.java

package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.AuditTrailPage;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import io.cucumber.datatable.DataTable;
import jxl.read.biff.BiffException;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.Properties;

public class AuditTrailSteps {


    AuditTrailPage auditTrailPage;
    private static final Logger log = LoggerFactory.getLogger(AuditTrailSteps.class);
    Properties config = PropertyFileReader.loadFile("config", "config.properties");
    String adidasEmailId = config.getProperty("adidasemailid");

    @Step
    public void userGoToAuditTrailPage() throws IOException, InterruptedException {
        auditTrailPage.goToAuditTrailPage();
    }

    @Step
    public void userShouldSeeAuditTrailOnLeftSideMenu() {
        Assert.assertTrue(auditTrailPage.shouldSeeAuditTrailOnLeftSideMenu());
    }

    @Step
    public void userShouldSeeAuditTrailOnTopLeftInPage() {
        Assert.assertTrue(auditTrailPage.shouldSeeAuditTrailOnTopLeftInPage());
    }


    @Step
    public void userClicksOnDownwardArrow() {
        auditTrailPage.clicksOnDownwardArrow();
    }

    @Step
    public void userShouldSeeDetailsSectionExpanded() {
        Assert.assertTrue(auditTrailPage.shouldSeeDetailsSectionExpanded());
    }

    @Step
    public void userClicksOnUpwardArrow() {
        userClicksOnDownwardArrow();
    }

    @Step
    public void userShouldSeeDetailsSectionCollapsed() {
        Assert.assertFalse(auditTrailPage.shouldSeeDetailsSectionExpanded());
    }


    @Step
    public void userEntersTextInField(String text, Integer field) {
        auditTrailPage.entersTextInField(text, field);
    }

    @Step
    public void userClicksOnSearchButton(Integer num) {
        auditTrailPage.clicksOnSearchButton(num);
    }

    @Step
    public void userDisplayedWithSearchedFieldRecords(String field, String text) {
        auditTrailPage.displayedWithSearchedFieldRecords(field, text);
    }

    @Step
    public void userEntersPartialTextInField(String partialText, Integer field) {
        userEntersTextInField(partialText, field);
    }

    @Step
    public void userDisplayedWithPartialSearchedFieldRecords(String field, String text) {
        auditTrailPage.displayedWithPartialSearchedFieldRecords(field, text);
    }


    @Step
    public void userClicksOnCancelButtonOfSearchTextBox(Integer num) {
        auditTrailPage.clicksOnCancelButtonOfSearchTextBox(num);
    }

    @Step
    public void textRemovedFromTextBox(Integer num) {
        Assert.assertEquals("", auditTrailPage.textRemovedFromSearchTextBox(num));
    }


    @Step
    public void userShouldBeDisplayedWithErrorMessage(String expectedErrorMsg) {
        Assert.assertEquals(expectedErrorMsg, auditTrailPage.shouldBeDisplayedWithErrorMessage());
    }


    @Step
    public void userVerifiesTriggeredDataInAuditTrailColumn(String triggeredData, String columnName, int rowNo) {
        if(triggeredData.equalsIgnoreCase("adidas-email"))
            Assert.assertEquals(triggeredData.replace(triggeredData, adidasEmailId).toUpperCase(), auditTrailPage.verifiesTriggeredDataInAuditTrailColumn(columnName, rowNo).toUpperCase());
        else
            Assert.assertEquals(triggeredData.toUpperCase(), auditTrailPage.verifiesTriggeredDataInAuditTrailColumn(columnName, rowNo).toUpperCase());
    }

    @Step
    public void userVerifiesCorrectStatusInAuditTrailColumn(String expectedSuccess, String expectedFailed, int rowNo, String columnName) {
        auditTrailPage.verifiesCorrectStatusInAuditTrailColumn(expectedSuccess, expectedFailed, columnName, rowNo);
    }

    @Step
    public void userShouldSeeBlankInPassedColumn(int rowNo, String columnName) {
        Assert.assertEquals("", auditTrailPage.shouldSeeBlankInPassedColumn(columnName, rowNo));
    }

    @Step
    public void userSeePassedActionsInActionDropdown(String createAllowItemAction, String createBlockItemAction, String editAllowItemAction, String editBlockItemAction, String deleteAllowItemAction, String deleteBlockItemAction) {
        Assert.assertEquals(createAllowItemAction.toUpperCase(), auditTrailPage.SeePassedActionsInActionDropdown(createAllowItemAction).toUpperCase());
        Assert.assertEquals(createBlockItemAction.toUpperCase(), auditTrailPage.SeePassedActionsInActionDropdown(createBlockItemAction).toUpperCase());
        Assert.assertEquals(editAllowItemAction.toUpperCase(), auditTrailPage.SeePassedActionsInActionDropdown(editAllowItemAction).toUpperCase());
        Assert.assertEquals(editBlockItemAction.toUpperCase(), auditTrailPage.SeePassedActionsInActionDropdown(editBlockItemAction).toUpperCase());
        Assert.assertEquals(deleteAllowItemAction.toUpperCase(), auditTrailPage.SeePassedActionsInActionDropdown(deleteAllowItemAction).toUpperCase());
        Assert.assertEquals(deleteBlockItemAction.toUpperCase(), auditTrailPage.SeePassedActionsInActionDropdown(deleteBlockItemAction).toUpperCase());
    }

    @Step
    public void userClickOnAuditTrailFilter() {
        auditTrailPage.clickOnAuditTrailFilter();
    }

    @Step
    public void userSelectPassedAttributeNameInPassedField(String passedAttributeName) {
        auditTrailPage.selectPassedAttributeNameInPassedField(passedAttributeName);
    }

    @Step
    public void userShouldSeePassedAuditTrailRecordsAction(String actionName, String fieldName) throws InterruptedException {
        auditTrailPage.shouldSeePassedAuditTrailRecordsAction(actionName, fieldName);
    }

    @Step
    public void userEntersTextInSearchBox(String text) {
        auditTrailPage.entersTextInSearchBox(text);

    }

    @Step
    public void userClicksOnSearchButtonOfDomainSearchBox() throws InterruptedException {
        auditTrailPage.clicksOnSearchButtonOfDomainSearchBox();
    }

    @Step
    public void userEntersTextInActionsSearchBox(String text) {
        auditTrailPage.entersTextInActionsSearchBox(text);
    }

    @Step
    public void userClicksOnSearchButtonOfActionsSearchBox() throws InterruptedException {
        auditTrailPage.clicksOnSearchButtonOfActionsSearchBox();
    }

    @Step
    public void userShouldSeePassedAttributeNameInPassedFieldDropdown(String passedAttributeName) {
        Assert.assertEquals(passedAttributeName.toUpperCase(), auditTrailPage.shouldSeePassedAttributeNameInPassedFieldDropdown(passedAttributeName).toUpperCase());
    }

    @Step
    public void userSelectActions(String createAllowItemAction, String createBlockItemAction, String editAllowItemAction, String editBlockItemAction, String deleteAllowItemAction, String deleteBlockItemAction) {
        auditTrailPage.selectAction(createAllowItemAction);
        auditTrailPage.selectAction(createBlockItemAction);
        auditTrailPage.selectAction(editAllowItemAction);
        auditTrailPage.selectAction(editBlockItemAction);
        auditTrailPage.selectAction(deleteAllowItemAction);
        auditTrailPage.selectAction(deleteBlockItemAction);
        auditTrailPage.clickOnRandomButton();

    }

    @Step
    public void userShouldSeeTheAuditTrailRecordsWithDesiredValues() {
        Assert.assertTrue(auditTrailPage.ShouldSeeTheAuditTrailRecordsWithDesiredValues());
    }


    @Step
    public void userShouldNotSeeSearchedStringInViewSearchBox(String basketAdminLandingPageColumnsCsvFile) {
        Assert.assertTrue(auditTrailPage.shouldNotSeeSearchedStringInViewSearchBox(basketAdminLandingPageColumnsCsvFile));
    }


    @Step
    public void userShouldSeeSearchedStringDynamically(String basketAdminColumnsCsvFile) {
        Assert.assertTrue(auditTrailPage.shouldSeeSearchedStringDynamically(basketAdminColumnsCsvFile));
    }

    @Step
    public void userShouldSeeProductIdAndSelectedAttributesInDetailsColumn(String productId, String passedAttributeExcelFile, int rowNo, String detailsColumn) throws BiffException, IOException {
        auditTrailPage.shouldSeeProductIdAndSelectedAttributesInDetailsColumn(productId, passedAttributeExcelFile,rowNo, detailsColumn);
    }

    @Step
    public void userEnterPassedTextInField(String passedText, int fieldNo) {
        auditTrailPage.enterPassedTextInField(passedText, fieldNo);
    }

    @Step
    public void userSelectsPassedStatus(String status) {
        auditTrailPage.selectsPassedStatus(status);
    }

    @Step
    public void userShouldSeeDomainAndActionFilterValueSetToAll() {
        Assert.assertEquals("All".toUpperCase(), auditTrailPage.shouldSeeDomainFilterValueSetToAll().toUpperCase());
        Assert.assertEquals("All".toUpperCase(), auditTrailPage.shouldSeeActionFilterValueSetToAll().toUpperCase());
    }

    @Step
    public void userShouldSeeActionStatusDeselected() {
        Assert.assertFalse(auditTrailPage.shouldSeeSuccessActionStatusDeselected());
        Assert.assertFalse(auditTrailPage.shouldSeeFailedActionStatusDeselected());
    }

    @Step
    public void userShouldSeeDateRangeResetAndDisplayedBlank() {
        Assert.assertEquals("", auditTrailPage.shouldSeeFromDateRangeResetAndDisplayedBlank());
        Assert.assertEquals("true", auditTrailPage.shouldSeeToDateRangeResetAndDisplayedBlank());
    }

    @Step
    public void userShouldSeeAggregatedStatusCountIsSameAsPaginationCount(String status) {
        auditTrailPage.shouldSeeAggregatedStatusCountIsSameAsPaginationCount(status);
    }

    @Step
    public void userClicksOnPassedRowChevron(int rowNo) {
        auditTrailPage.clicksOnPassedRowChevron(rowNo);
    }

    @Step
    public void userShouldSeePassedColumnJsonResponseDataAsPerThePassedRowTrigger(int rowNo) {
        Assert.assertTrue(auditTrailPage.shouldSeePassedColumnJsonResponseDataAsPerThePassedRowTrigger(rowNo));
    }
    @Step
    public void userShouldSeePassedFilterDataInDropdown(DataTable filterDataList) {
        auditTrailPage.shouldSeePassedFilterDataInDropdown(filterDataList);
    }
    @Step
    public void userVerifiesSelectedAuditTrailFilterDropdownValueOnAuditTrailTable(String dropdownValueOne, String dropdownValueTwo, String dropdownField) {
        Assert.assertTrue(auditTrailPage.verifiesSelectedAuditTrailFilterDropdownValueOnAuditTrailTable(dropdownValueOne, dropdownValueTwo, dropdownField));
    }
    @Step
    public void userVerifiesTriggeredDataInAuditTrailJsonResponse(String triggeredData, String auditTrailJsonResponseField) {
        if(triggeredData.equalsIgnoreCase("adidas-email"))
            Assert.assertEquals(triggeredData.replace(triggeredData, adidasEmailId).toUpperCase(), auditTrailPage.verifiesTriggeredDataInAuditTrailJsonResponse(auditTrailJsonResponseField).toUpperCase());
        else
            Assert.assertEquals(triggeredData.toUpperCase(), auditTrailPage.verifiesTriggeredDataInAuditTrailJsonResponse(auditTrailJsonResponseField).toUpperCase());
    }
}

BasketAdminStepsCA.java

package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.BasketAdminPageCA;
import com.adidas.tpAdidasSerenity.fe.pageObjects.CommonPage;
import com.adidas.tpAdidasSerenity.fe.utility.enums.CommonEnum;
import com.adidas.tpAdidasSerenity.fe.utility.enums.DropdownEnum;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class BasketAdminStepsCA {
    BasketAdminPageCA basketAdminPageCA;
    private static final Logger log = LoggerFactory.getLogger(BasketAdminStepsCA.class);
    CommonPage commonPage = new CommonPage();


    @Step
    public void userLoggedInToAdminApplication() throws Exception {
        basketAdminPageCA.doLogin();
    }

    @Step
    public void userGoToBasketAdminPage() throws Exception {
        basketAdminPageCA.goToBasketAdminPage();
    }

    @Step
    public void userIsInBasketAdminPage() {
        Assert.assertEquals("BASKET", basketAdminPageCA.basketAdminPageIsVisible());
    }

    @Step
    public void userClicksOnFilter() throws Exception {
        basketAdminPageCA.clickFilter();
    }

    @Step
    public void userSelectsColumnFromViewDropdown(String columnFromViewDropdown) throws Exception {
        basketAdminPageCA.selectsColumnFromViewDropdown(columnFromViewDropdown);
    }

    @Step
    public void userShouldSeeFilterWindow() throws Exception {
        Assert.assertEquals("FILTER", basketAdminPageCA.filterWindowIsVisible());
    }


    @Step
    public void userObservesNextArrow() {
        basketAdminPageCA.selectSPageSizeTen();
    }

    @Step
    public void userShouldSeeNextArrowEnabled() throws Exception, AssertionError {
        boolean nextArrow = basketAdminPageCA.ChecksNextArrowIsEnabled();
        Assert.assertTrue(nextArrow);
    }

    @Step
    public void userClicksOnNextArrow() throws Exception {
        basketAdminPageCA.clicksOnNextArrow();
    }

    @Step
    public void userShouldSeeNextPage() throws Exception {
        basketAdminPageCA.nextPageIsVisible();
    }


    @Step
    public void userSelectsPageSizeTen() {
        basketAdminPageCA.selectSPageSizeTen();
    }

    @Step
    public void userEntersTwoInTextBox(Integer number) throws Exception {
        basketAdminPageCA.entersTwoInTextBox(number);
    }

    @Step
    public void userShouldSeePreviousArrowEnabled() throws Exception, AssertionError {
        boolean previousArrow = basketAdminPageCA.ChecksPreviousArrowIsEnabled();
        Assert.assertTrue(previousArrow);
    }

    @Step
    public void userClicksOnPreviousArrow() throws Exception {
        basketAdminPageCA.clicksOnPreviousArrow();
    }

    @Step
    public void userShouldSeePreviousPage() throws Exception {
        basketAdminPageCA.previousPageIsVisible();
    }


    @Step
    public void userClicksOnDropdown() throws Exception {
        basketAdminPageCA.clicksOnDropdown();
    }

    @Step
    public void userSelectsPageNumFromDropDown(Integer int1) throws Exception {
        basketAdminPageCA.selectPageNumFromDropdown(int1);
    }

    @Step
    public void userShouldSeeSelectedPageSizeInDropdown(Integer int1) {
        basketAdminPageCA.shouldSeeSelectedPageSizeInDropdown(int1);
    }

    @Step
    public void userVerifiesRecordsLessThanOrEqualToRecordsPerPageIsDisplayed(int noOfRecords) {
        basketAdminPageCA.verifiesRecordsLessThanOrEqualToRecordsPerPageIsDisplayed(noOfRecords);
    }

    @Step
    public void userVerifiesRecordsInPaginationDropdownIsDisplayed(Integer noOfRecords) {
        basketAdminPageCA.verifiesRecordsInPaginationDropdownIsDisplayed(noOfRecords);
    }

    @Step
    public void userShouldSeeDefaultChannelAndExportStatus(String defaultChannel, String defaultExportStatus) {
        basketAdminPageCA.shouldSeeDefaultChannelAndExportStatus(defaultChannel, defaultExportStatus);
    }

    @Step
    public void userShouldSeeChannelIdAs(String channelId) {
        basketAdminPageCA.shouldSeeChannelIdAs(channelId);
    }

    @Step
    public void userVerifiesMarketAs(String market) {
        basketAdminPageCA.verifiesMarketAs(market);
    }

    @Step
    public void userShouldViewExportStatusAs(String exportStatus) {
        basketAdminPageCA.shouldViewExportStatusAs(exportStatus);
    }


    @Step
    public void userClicksOnViewButton() throws Exception {
        basketAdminPageCA.clicksOnViewButton();
    }

    @Step
    public void userIsOnBasketJsonPopup() throws Exception {
        Assert.assertEquals("INSPECT JSON", basketAdminPageCA.isOnBasketJsonPopup());
    }

    @Step
    public void userClicksOnCloseButtonOfBasketJsonPopup() {
        basketAdminPageCA.clicksOnCloseButtonOfBasketJsonPopup();
    }

    @Step
    public void userShouldSeeBasketListPage() throws Exception, AssertionError {
        Assert.assertEquals("BASKET", basketAdminPageCA.shouldSeeBasketListPage().toUpperCase());
    }


    @Step
    public void userSelectExportStatus(String exportStatus) {
        basketAdminPageCA.selectExportStatus(exportStatus);
    }

    @Step
    public void userClicksOnApplyButton() throws Exception {
        basketAdminPageCA.clicksOnApplyButton();
    }

    @Step
    public void userShouldSeeSelectedExportStatus(String exportStatus) {
        basketAdminPageCA.shouldSeeSelectedExportStatus(exportStatus);
    }


    @Step
    public void userClicksOnBasketIdSearchBox() throws Exception {
        basketAdminPageCA.clicksOnBasketIdSearchBox();
    }

    @Step
    public void userEntersBasketId() throws Exception {
        basketAdminPageCA.entersBasketId();
    }

    @Step
    public void userClicksOnSearchButtonOfBasketId() throws Exception {
        basketAdminPageCA.clicksOnSearchButtonOfBasketId();
    }

    @Step
    public void userCanSeeRespectiveSearchedBasketId() throws Exception, AssertionError {
        basketAdminPageCA.shouldSeeRespectiveSearchedBasketId();
    }


    @Step
    public void userClicksOnOrderIdSearchBox() throws Exception {
        basketAdminPageCA.clicksOnOrderIdSearchBox();
    }

    @Step
    public void userEntersOrderId() throws Exception {
        basketAdminPageCA.entersOrderId();
    }

    @Step
    public void userClicksOnSearchButtonOfOrderId() throws Exception {
        basketAdminPageCA.clicksOnSearchButtonOfOrderId();
    }

    @Step
    public void userCanSeeRespectiveSearchedOrderId() throws Exception, AssertionError {
        basketAdminPageCA.shouldSeeRespectiveSearchedOrderId();
    }


    @Step
    public void userClicksOnCustomerIdSearchBox() throws Exception {
        basketAdminPageCA.clicksOnCustomerIdSearchBox();
    }

    @Step
    public void userEntersCustomerId() throws Exception {
        basketAdminPageCA.entersCustomerId();
    }

    @Step
    public void userClicksOnSearchButtonOfCustomerId() throws Exception {
        basketAdminPageCA.clicksOnSearchButtonOfCustomerId();
    }

    @Step
    public void userCanSeeRespectiveSearchedCustomerId() throws Exception, AssertionError {
        basketAdminPageCA.shouldSeeRespectiveSearchedCustomerId();
    }


    @Step
    public void userEntersIncompleteOrderId() {
        basketAdminPageCA.entersIncompleteOrderId();
    }

    @Step
    public void userCanSeeRespectiveErrorMessageInAPopup(String errorMessage) {
        basketAdminPageCA.canSeeRespectiveErrorMessageInAPopup(errorMessage);
    }


    @Step
    public void userShouldSeeDefaultCriteria(String channelId, String siteId, String exportStatus) {
        basketAdminPageCA.userShouldSeeDefaultCriteria(channelId, siteId, exportStatus);
    }

    @Step
    public void userSelectsALLExportStatus() {
        basketAdminPageCA.selectsALLExportStatus();
    }


    @Step
    public void userClicksOnLastSyncButton(){
        basketAdminPageCA.clicksOnLastSyncButton();
    }

    @Step
    public void userShouldSeeLastSyncTime(int minute) {
        Assert.assertEquals("LAST: "+minute+" MIN AGO", basketAdminPageCA.shouldSeeLastSyncTime(minute));
    }

    //Anurag


    @Step
    public void userSelectFilters() throws InterruptedException {
        basketAdminPageCA.selectFilters();
    }

    @Step
    public void userSeeDefaultChannelSiteExportStatus() {
        basketAdminPageCA.seeDefaultChannelSiteExportStatus();
    }


    @Step
    public void userClicksFilterWindowCloseicon() {
        basketAdminPageCA.clicksFilterWindowCloseicon();
    }


    @Step
    public void userSelectFirstCheckBox() throws Exception {
        basketAdminPageCA.selectFirstCheckBox();

    }

    @Step
    public void userChecksReExportButtonState() {
        basketAdminPageCA.checksReExportButtonState();
    }


    @Step
    public void userDeselectCheckbox() throws Exception {
        basketAdminPageCA.deselectFirstCheckbox();
    }


    @Step
    public void userSelectsBasketWithPassedStatus() {
        basketAdminPageCA.selectsBasketWithPassedStatus();
    }

    @Step
    public void userClicksOnReExportButton() {
        basketAdminPageCA.clicksOnReExportButton();
    }

    @Step
    public void userIsAbleToSeeSuccessMessageInAPopup() {
        basketAdminPageCA.ableToSeeSuccessMessageInAPopup();
    }


    @Step
    public void userSelectsMoreThanOneBasket(int noOfBaskets) {
        basketAdminPageCA.selectsMoreThanOneBasket(noOfBaskets);
    }

    @Step
    public void userClicksOnTheReExportButton() {
        basketAdminPageCA.clicksOnTheReExportButton();
    }

    @Step
    public void userShouldBeDisplayedWithBatchReExportPopup() {
        basketAdminPageCA.shouldBeDisplayedWithBatchReExportPopup();
    }


    @Step
    public void userShouldSeeCorrectHeadrsInPopup() {
        basketAdminPageCA.SeeCorrectHeadrsInPopup();
    }


    @Step
    public void userClicksOnDownloadIcon() throws InterruptedException {
        basketAdminPageCA.clicksOnDownloadIcon();
    }

    @Step
    public void userShouldBeAbleTODownloadCsvFile(String fileName) throws IOException, InterruptedException {
        basketAdminPageCA.shouldBeAbleToDownloadCsvFile(fileName);
    }


    @Step
    public void userClicksOnCloseIconOfBatchReExportPopup() {
        basketAdminPageCA.clicksOnCloseIconOfBatchReExportPopup();
    }

    @Step
    public void userShouldBeAbleToClosePopup() throws Exception {
        userShouldSeeBasketListPage();
    }


    @Step
    public void userShouldSeeCorrectHeaderDetailsAndCountOfBasketsInCsvFile(String fileName) {
        basketAdminPageCA.shouldSeeCorrectHeaderDetailsAndCountOfBasketsInCsvFile(fileName);
    }


    @Step
    public void userDoNotSelectOverridePopupCheckbox() {
        basketAdminPageCA.doNotSelectOverridePopupCheckbox();
    }

    @Step
    public void userOnOverRidePopup() {
        basketAdminPageCA.overridePopupDisplay();
    }


    @Step
    public void userClicksonYesButton() {
        basketAdminPageCA.clicksOnYesButton();
    }


    @Step
    public void userSeeOverrideBasketPopupClosed() {
        basketAdminPageCA.seeOverrideBasketPopupClosed();
    }


    @Step
    public void userOnOverrideBasketPopup() throws Exception {
        commonPage.doLogin();
        commonPage.selectRegion("CANADA");
        basketAdminPageCA.goToBasketAdminPage();
        basketAdminPageCA.clickFilter();
        commonPage.clickOnButton(CommonEnum.fromString("Reset"), "Reset");
        commonPage.clickOnDropdown(DropdownEnum.fromString("Channel(Filter)"), "Channel(Filter)");
        commonPage.clickOnCheckBox(CommonEnum.fromString("All->Channel"), "All->Channel");
        commonPage.clickOnCheckBox(CommonEnum.fromString("Web"), "Web");
        commonPage.clickOnDropdown(DropdownEnum.fromString("Channel(Filter)"), "Channel(Filter)");
        commonPage.clickOnCheckBox(CommonEnum.fromString("IN PROGRESS"), "IN PROGRESS");
        commonPage.clickOnCheckBox(CommonEnum.fromString("EXPORTED"), "EXPORTED");
        basketAdminPageCA.clicksOnApplyButton();
        basketAdminPageCA.selectFirstCheckBox();
        userClicksOnViewButton();
    }

    @Step
    public void userClickOverridePopupCancelButton() throws Exception {
        basketAdminPageCA.clickOverridePopupCancelButton();
    }

    @Step
    public void userClosesOverrideBasketPopup() {
        basketAdminPageCA.closesOverrideBasketPopup();
    }

    @Step
    public void userSelectedCheckBoxNotRemoved() throws Exception {
        Assert.assertTrue(basketAdminPageCA.selectedCheckBoxNotRemoved());
    }


    @Step
    public void userOnlandingPage() {
        basketAdminPageCA.onLandingPage();
    }


    @Step
    public void userdeselectMultipleBasket(int noOfBaskets) {
        userSelectsMoreThanOneBasket(noOfBaskets);
        userSelectsMoreThanOneBasket(noOfBaskets);
    }


    @Step
    public void userSelectAllCheckboxInHeader() throws InterruptedException {
        basketAdminPageCA.selectAllCheckBoxInHeader();
    }


    @Step
    public void userDeselectAllCheckboxInHeader() throws InterruptedException {
        userSelectAllCheckboxInHeader();
        userSelectAllCheckboxInHeader();
    }


    @Step
    public void userShouldSeeCorrectBasketCountInFooter(Integer countInFooter) {
        basketAdminPageCA.shouldSeeCorrectBasketCountInFooter(countInFooter);
    }


    @Step
    public void userRedirectedToDesiredPage() throws Exception {
        userShouldSeeBasketListPage();
    }


    @Step
    public void userShouldSeeOverrideBasketHeader(String overrideBasketHeader) {
        Assert.assertEquals(overrideBasketHeader, basketAdminPageCA.shouldSeeOverrideBasketHeader());
    }

    @Step
    public void userShouldSeeOverrideBasketMessage(String overrideBasketMessage) {
        Assert.assertEquals(overrideBasketMessage, basketAdminPageCA.shouldSeeOverrideBasketMessage());
    }

    @Step
    public void userShouldSeeCheckBoxWithText(String checkBoxMessage) {
        boolean checkBoxIsPresent = basketAdminPageCA.checkBoxIsVisible();
        Assert.assertTrue(checkBoxIsPresent);
        Assert.assertEquals(checkBoxMessage, basketAdminPageCA.shouldSeeOverrideCheckBoxMessage());
    }

    @Step
    public void userShouldSeeCancelButton() {
        boolean cancelButtonIsPresent = basketAdminPageCA.cancelButtonIsVisible();
        Assert.assertTrue(cancelButtonIsPresent);
    }

    @Step
    public void userShouldSeeYesButton() {
        boolean yesButtonIsPresent = basketAdminPageCA.yesButtonIsVisible();
        Assert.assertTrue(yesButtonIsPresent);
    }


    @Step
    public void userClosesTheBrowser() {
        basketAdminPageCA.closesTheBrowser();
    }

    @Step
    public void userRelaunchesTheBrowser() {
        basketAdminPageCA.relaunchesTheBrowser();
    }


    @Step
    public void userClicksOnNextOrPreviousArrowOrEntersPageNo() throws Exception {
        for (int i = 1; i <= 3; i++) {
            if (i == 1) {
                userShouldSeeNextArrowEnabled();
                userClicksOnNextArrow();
                basketAdminPageCA.clicksOnlyOnYesButton();
            } else if (i == 2) {
                userSelectFirstCheckBox();
                userShouldSeePreviousArrowEnabled();
                userClicksOnPreviousArrow();
                basketAdminPageCA.clicksOnlyOnYesButton();
            } else {
                userSelectFirstCheckBox();
                userEntersTwoInTextBox(2);
            }
        }
    }


    @Step
    public void userClicksOnNextOrPreviousArrowOrEntersPageNoUponSelectingCheckBox() {
        try {
            for (int i = 1; i <= 3; i++) {
                if (i == 1) {
                    userShouldSeeNextArrowEnabled();
                    userClicksOnNextArrow();
                    userShouldSeeNextPage();
                } else if (i == 2) {
                    basketAdminPageCA.selectFirstCheckBox();
                    userShouldSeePreviousArrowEnabled();
                    userClicksOnPreviousArrow();
                    userShouldSeePreviousPage();
                } else {
                    basketAdminPageCA.selectFirstCheckBox();
                    userEntersTwoInTextBox(2);
                }
            }
        } catch (Exception | AssertionError e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases of pagination");
            e.printStackTrace();
        }

    }


    @Step
    public void userSearchesWithBasketOrOrderOrCustomerId() throws Exception {
        for (int i = 1; i <= 2; i++) {
            if (i == 1) {
                userClicksOnBasketIdSearchBox();
                userEntersBasketId();
                userClicksOnSearchButtonOfBasketId();
                basketAdminPageCA.clicksOnlyOnYesButton();
                basketAdminPageCA.clicksOnCancelIconOfBasketIdSearchBox();
            } else {
                userSelectFirstCheckBox();
                userClicksOnCustomerIdSearchBox();
                userEntersCustomerId();
                userClicksOnSearchButtonOfCustomerId();
            }
        }
    }


    @Step
    public void userSearchesWithBasketOrOrderOrCustomerIdUponSelectingCheckBox() {
        try {
            for (int i = 1; i <= 3; i++) {
                if (i == 1) {
                    userClicksOnBasketIdSearchBox();
                    userEntersBasketId();
                    userClicksOnSearchButtonOfBasketId();
                    userCanSeeRespectiveSearchedBasketId();
                    basketAdminPageCA.clicksOnCancelIconOfBasketIdSearchBox();
                } else if (i == 2) {
                    userSelectFirstCheckBox();
                    userClicksOnOrderIdSearchBox();
                    userEntersOrderId();
                    userClicksOnSearchButtonOfOrderId();
                    userCanSeeRespectiveSearchedOrderId();
                    basketAdminPageCA.clicksOnCancelIconOfOrderIdSearchBox();
                } else {
                    userSelectFirstCheckBox();
                    userClicksOnCustomerIdSearchBox();
                    userEntersCustomerId();
                    userClicksOnSearchButtonOfCustomerId();
                    userCanSeeRespectiveSearchedCustomerId();
                    basketAdminPageCA.clicksOnCancelIconOfCustomerIdSearchBox();
                }
            }
        } catch (Exception | AssertionError e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while doing search operations");
            e.printStackTrace();
        }

    }


    @Step
    public void userSeesUniqueRecords() {
        Assert.assertEquals(1, basketAdminPageCA.seesUniqueRecords());
    }

    @Step
    public void userShouldNotSeeDupliactOrderIdRecords() throws Exception, AssertionError {
        userCanSeeRespectiveSearchedOrderId();
    }


    @Step
    public void userShouldNotSeeDupliactBasketIdRecords() throws Exception, AssertionError {
        userCanSeeRespectiveSearchedBasketId();
    }


    @Step
    public void userShouldSeeZeroBasketsSelected(Integer basketsSelected) {
        userShouldSeeCorrectBasketCountInFooter(basketsSelected);
    }

    @Step
    public void userShouldNotAbleToSelectExportStatus() {
        basketAdminPageCA.shouldNotAbleToSelectExportStatus();
    }


    @Step
    public void byDefaultBasketsInDescendingOrder(String moduleName, String columnName) throws InterruptedException {
        basketAdminPageCA.byDefaultBasketsIsInDescendingOrder(moduleName, columnName);
    }

    @Step
    public void userSelectExportedExportStatus() {
        basketAdminPageCA.selectExportedExportStatus();
    }

    @Step
    public void userChangePreferenceFromDescToAsc(String columnName) {
        basketAdminPageCA.changePreferenceFromDescToAsc(columnName);
    }

    @Step
    public void userSeesBasketListInAscOrder(String columnName) {
        basketAdminPageCA.seesBasketListInAscOrder(columnName);
    }


    @Step
    public void userChangePreferenceFromAscToDesc(String columnName) {
        userChangePreferenceFromDescToAsc(columnName);
    }

    @Step
    public void userSeesBasketListInDescOrder(String columnName) throws InterruptedException {
        byDefaultBasketsInDescendingOrder(columnName, columnName);
    }


    @Step
    public void userOnBasketAdminPageInCanadaRegion() throws Exception {
        basketAdminPageCA.doLogin();
    }

    @Step
    public void userChangesRegionFromCanadaToUsa() {
        basketAdminPageCA.changesRegionFromCanadaToUsa();
    }

    @Step
    public void userIsDisplayedWithErrorPopup(String expectedErrorMessage) {
        Assert.assertEquals(expectedErrorMessage, basketAdminPageCA.isDisplayedWithErrorPopup());
    }

    @Step
    public void userClosesErrorPopup() {
        basketAdminPageCA.closesErrorPopup();
    }

    @Step
    public void userShouldNotSeeBasketAdminTabInLeftNavMenu() {
        Assert.assertFalse(basketAdminPageCA.shouldNotSeeBasketAdminTabInLeftNavMenu());
    }


    @Step
    public void userShouldSeeDownloadButtonAtTop() throws InterruptedException {
        Assert.assertTrue(basketAdminPageCA.shouldSeeDownloadButtonAtTop());
    }


    @Step
    public void userClicksOnDownloadButtonOnTop() throws InterruptedException {
        basketAdminPageCA.clicksOnDownloadButtonOnTop();
    }

    @Step
    public void userCheckNoOfRecordsInDownloadedFileSameAsUI(String fileName) throws IOException {
        basketAdminPageCA.checkNoOfRecordsInDownloadedFileSameAsUI(fileName);
    }

    //Basket Admin definitions for "selecting override basket popup checkbox"
    @Step
    public void userOnOverrideBasketPopup_checkboxSelected() {
        try {
            commonPage.doLogin();
            commonPage.selectRegion("CANADA");
            basketAdminPageCA.goToBasketAdminPage();
            basketAdminPageCA.clickFilter();
            commonPage.clickOnButton(CommonEnum.fromString("Reset"), "Reset");
            commonPage.clickOnDropdown(DropdownEnum.fromString("Channel(Filter)"), "Channel(Filter)");
            commonPage.clickOnCheckBox(CommonEnum.fromString("All->Channel"), "All->Channel");
            commonPage.clickOnCheckBox(CommonEnum.fromString("Web"), "Web");
            commonPage.clickOnDropdown(DropdownEnum.fromString("Channel(Filter)"), "Channel(Filter)");
            commonPage.clickOnCheckBox(CommonEnum.fromString("IN PROGRESS"), "IN PROGRESS");
            commonPage.clickOnCheckBox(CommonEnum.fromString("EXPORTED"), "EXPORTED");
            basketAdminPageCA.clicksOnApplyButton();
            basketAdminPageCA.selectFirstCheckBox();
            userClicksOnViewButton();
        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while navigating to override basket popup");
            e.printStackTrace();
        }

    }

    @Step
    public void userSelectsOverridePopupCheckbox_checkboxSelected() {
        basketAdminPageCA.selectsOverridePopupCheckbox_checkboxSelected();
    }

    @Step
    public void userClickOverridePopupCancelButton_checkboxSelected() throws Exception {
        try {
            basketAdminPageCA.clickOverridePopupCancelButton();
        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while clicking on cancel button of override basket popup");
            e.printStackTrace();
        }
    }

    @Step
    public void userShouldBeOnLandingPage_checkboxSelected() {
        try {
            userShouldSeeBasketListPage();
        } catch (Exception | AssertionError e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Failed to see basket admin text in basket admin home page");
            e.printStackTrace();
        }
    }

    @Step
    public void userSelectedCheckBoxNotRemoved_checkboxSelected() {
        try {
            Assert.assertTrue(basketAdminPageCA.selectedCheckBoxNotRemoved());
        } catch (Exception | AssertionError e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases checkbox is not selected");
            e.printStackTrace();
        }

    }

    @Step
    public void userClicksOnViewButton_checkboxSelected() {
        try {
            basketAdminPageCA.clicksOnViewButton();
        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while clicking on first basket view button");
            e.printStackTrace();
        }
    }

    @Step
    public void userClicksonYesButton_checkboxSelected() throws Exception {
        try {
            basketAdminPageCA.clicksOnYesButton();
        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while clicking on yes button of override basket popup");
            e.printStackTrace();
        }
    }

    @Step
    public void userSelectFirstCheckBox_checkboxSelected() {
        try {
            basketAdminPageCA.selectFirstCheckBox();
        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while selecting first basket checkbox");
            e.printStackTrace();
        }
    }

    @Step
    public void userClicksOnDropdown_checkboxSelected() {
        try {
            basketAdminPageCA.clicksOnDropdown();
        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while clicking on pagination dropdown button");
            e.printStackTrace();
        }
    }

    @Step
    public void userSelectsPageNumFromDropDown_checkboxSelected(Integer int1) {
        try {
            basketAdminPageCA.selectPageNumFromDropdown(int1);
        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while selecting page size: " + int1);
            e.printStackTrace();
        }
    }

    @Step
    public void userIsOnBasketJsonPopup_checkboxSelected() {
        try {
            Assert.assertEquals("INSPECT JSON", basketAdminPageCA.isOnBasketJsonPopup());
        } catch (Exception | AssertionError e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases, there is change in INSPECT JSON header or Locator");
            e.printStackTrace();
        }
    }

    @Step
    public void userClicksOnFilter_checkboxSelected() {
        try {
            basketAdminPageCA.clickFilter();
        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while clicking on Filter icon");
            e.printStackTrace();
        }
    }

    @Step
    public void userShouldSeeFilterWindow_checkboxSelected() {
        try {
            Assert.assertEquals("FILTER", basketAdminPageCA.filterWindowIsVisible());
        } catch (Exception | AssertionError e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases of filter text or locator");
            e.printStackTrace();
        }

    }

    @Step
    public void userSelectsColumnFromViewDropdown_checkboxSelected(String columnFromViewDropdown) {
        try {
            basketAdminPageCA.selectsColumnFromViewDropdown(columnFromViewDropdown);

        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while selecting " + columnFromViewDropdown + "from view dropdown");
            e.printStackTrace();
        }
    }

    @Step
    public void userClicksOnApplyButton_checkboxSelected() {
        try {
            basketAdminPageCA.clicksOnApplyButton();
        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while clicking on apply button of filter window");
            e.printStackTrace();
        }
    }

    @Step
    public void userClicksOnLastSyncButton_checkboxSelected() {
        try {
            basketAdminPageCA.clicksOnLastSyncButton();
        } catch (Exception e) {
            basketAdminPageCA.closesTheBrowser();
            Assert.fail("Error in override basket test cases while clicking on Last sync button");
            e.printStackTrace();
        }
    }
    @Step
    public void userRemainsIdleForAMinute() throws InterruptedException {
        basketAdminPageCA.remainsIdleForAMinute();
    }
    @Step
    public void userShouldSeeToDateInDisabledState() {
        Assert.assertEquals("true", basketAdminPageCA.shouldSeeToDateInDisabledState());
    }
    @Step
    public void userClickOnCloseButtonOfSingleReExportBasketPopup() {
        basketAdminPageCA.clickOnCloseButtonOfSingleReExportBasketPopup();
    }
}


BasketAdminStepsCommon.java

package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.BasketAdminPageCA;
import com.adidas.tpAdidasSerenity.fe.pageObjects.BasketAdminPageCommon;
import com.adidas.tpAdidasSerenity.fe.pageObjects.InventoryPage;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;

public class BasketAdminStepsCommon {

    private static final Logger log = LoggerFactory.getLogger(BasketAdminStepsCommon.class);
    BasketAdminPageCommon basketAdminPageCommon;
    BasketAdminPageCA basketAdminPageCA = new BasketAdminPageCA();
    InventoryPage inventoryPage = new InventoryPage();


    @Step
    public void userShouldSeeDefaultColumnsOnDefLanding(String defaultOrderNoCol, String defaultChannelCol, String defaultSiteIdCol, String defaultExportStatusCol, String defaultPaymentStatus, String defaultInspectCol) {
        basketAdminPageCommon.shouldSeeDefaultColumnsOnDefLanding(defaultOrderNoCol, defaultChannelCol, defaultSiteIdCol, defaultExportStatusCol, defaultPaymentStatus, defaultInspectCol);
    }


    @Step
    public void userShouldSeeAppliedAndDefColumnsAfterApplyingFilter(String defaultOrderNoCol, String defaultChannelCol, String defaultSiteIdCol, String defaultExportStatusCol, String defaultPaymentStatus, String defaultInspectCol, String selectedBasketIdCol, String selectedCustomerIdIdCol, String selectedLastModifiedCol) {
        basketAdminPageCommon.shouldSeeAppliedAndDefColumnsAfterApplyingFilter(defaultOrderNoCol, defaultChannelCol, defaultSiteIdCol, defaultExportStatusCol, defaultPaymentStatus, defaultInspectCol, selectedBasketIdCol, selectedCustomerIdIdCol, selectedLastModifiedCol);
    }


    @Step
    public void userVerifiesOtherFieldsFromViewDropdownInDisabledState() {
        basketAdminPageCommon.verifiesOtherFieldsFromViewDropdownInDisabledState();
    }

    @Step
    public void userClicksOnViewDropdown() {
        basketAdminPageCommon.clicksOnViewDropdown();
    }


    @Step
    public void userShouldSeeSingleBasketSelected() {
        Assert.assertTrue(basketAdminPageCommon.checksWhetherSingleBasketIsSelected());
    }

    @Step
    public void userDeselectsSelectedSingleBasket() {
        basketAdminPageCA.selectFirstCheckBox();
    }

    @Step
    public void userShouldSeeSelectedSingleBasketDeSelected() {
        Assert.assertFalse(basketAdminPageCommon.checksWhetherSingleBasketIsSelected());
    }


    @Step
    public void userShouldSeeMultipleBasketsSelected() {
        Assert.assertTrue(basketAdminPageCommon.checksWhetherMultipleBasketsIsSelected());
    }

    @Step
    public void userDeselectsSelectedMultipleBaskets() {
        basketAdminPageCA.selectsMoreThanOneBasket(2);
    }

    @Step
    public void userShouldSeeSelectedMultipleBasketsDeSelected() {
        Assert.assertTrue(basketAdminPageCommon.checksWhetherMultipleBasketsIsDeSelected(2));
    }


    @Step
    public void userClickOnMarketSelectionDropdown() {
        basketAdminPageCommon.clickOnMarketSelectionDropdown();
    }

    @Step
    public void userClickOnContinueButton() {
        basketAdminPageCommon.clickOnContinueButton();
    }

    @Step
    public void userShouldSeeBasketAdminHeaders(String comNextModule, String region) {
        Assert.assertEquals("BASKET", basketAdminPageCA.basketAdminPageIsVisible());
        Assert.assertEquals(region.toUpperCase(), basketAdminPageCommon.checkRegionInLeftCornerDropdown(comNextModule));
        Assert.assertTrue(basketAdminPageCommon.filterButtonIsVisible());
        Assert.assertTrue(basketAdminPageCommon.shouldSeeDownloadButtonAtTop());
    }

    @Step
    public void userSelectsAnotherRegion(String regionTwo) throws InterruptedException {
        basketAdminPageCommon.selectAnotherRegion(regionTwo);
    }

    @Step
    public void userShouldBeAbleToChangeAnotherRegionInSameModule(String regionTwo, String comNextModule) {
        Assert.assertEquals(regionTwo.toUpperCase(), basketAdminPageCommon.checkRegionInLeftCornerDropdown(comNextModule));
        Assert.assertEquals("BASKET", basketAdminPageCA.basketAdminPageIsVisible());
    }

    @Step
    public void userLoggedInToChooseYourMarketToContinueDropdownPage() throws IOException {
        basketAdminPageCommon.loggedInToChooseYourMarketToContinueDropdownPage();
    }


    @Step
    public void userShouldGoToInventoryPageInSameRegion(String module, String region) {
        Assert.assertEquals(module.toUpperCase(), inventoryPage.shouldSeeInventoryAtTop(module));
        Assert.assertTrue(inventoryPage.shouldSeeSamePassedRegion(region));
    }


    @Step
    public void userClicksOnPassedInspectJsonPopupButton(String passedButton) {
        basketAdminPageCommon.clicksOnPassedInspectJsonPopupButton(passedButton);
    }

    @Step
    public void userVerifiesNoChangesInJsonDataBeInExpandedForm() {
        Assert.assertTrue(basketAdminPageCommon.verifiesJsonDataIsExpandedOrCollapsedForm());
    }

    @Step
    public void userVerifiesNoChangesInJsonDataBeInCollapsedForm() {
        Assert.assertFalse(basketAdminPageCommon.verifiesJsonDataIsExpandedOrCollapsedForm());
    }

    @Step
    public void userVerifiesJsonDataIsExpandedOrCollapsedForm(String buttonForm) {
        if(buttonForm.equalsIgnoreCase("EXPANDED"))
            Assert.assertTrue(basketAdminPageCommon.verifiesJsonDataIsExpandedOrCollapsedForm());
        else
            Assert.assertFalse(basketAdminPageCommon.verifiesJsonDataIsExpandedOrCollapsedForm());
    }


    @Step
    public void userShouldSeePassedSnackBarMsgOnBasketJsonPopup(String snackBarMsg) {
        Assert.assertEquals(snackBarMsg.toUpperCase(), basketAdminPageCommon.shouldSeePassedSnackBarMsgOnBasketJsonPopup(snackBarMsg).toUpperCase());
    }

    @Step
    public void userShouldSeeSnackBarMsgDismissButtonOnBasketJsonPopup(String dismiss) {
        Assert.assertEquals(dismiss.toUpperCase(), basketAdminPageCommon.shouldSeeSnackBarMsgDismissButtonOnBasketJsonPopup(dismiss).toUpperCase());
    }

    @Step
    public void userPastesCopiedJsonIntoPassedNotepadFile(String copyJsonTextFile) throws IOException, UnsupportedFlavorException {
        Assert.assertTrue(basketAdminPageCommon.pastesCopiedJsonIntoPassedNotepadFile(copyJsonTextFile));
    }

    @Step
    public void userChecksWhetherJsonIsCopiedIntoPassedNotepadFile(String copyJsonTextFile) {
        Assert.assertTrue(basketAdminPageCommon.checksWhetherJsonIsCopiedIntoPassedNotepadFile(copyJsonTextFile));
    }

    @Step
    public void userShouldSeeAllExportStatusIsCheckBoxField() {
        basketAdminPageCommon.shouldSeeAllExportStatusIsCheckBoxField();
    }

    @Step
    public void userSelectsAllExportStatus(String allExportStatus) {
        basketAdminPageCommon.selectsExportStatus(allExportStatus);
    }

    @Step
    public void userShouldSeeAllTheExportStatusChecked() {
        basketAdminPageCommon.shouldSeeAllTheExportStatusChecked();
    }

    @Step
    public void userDeSelectsPassedCheckbox(String passedExportStatus) {
        basketAdminPageCommon.deSelectsPassedCheckbox(passedExportStatus);
    }

    @Step
    public void userValidatesPassedExportStatusAndAllExportStatusDeselected(String passedExportStatus, String allExportStatus) {
        Assert.assertFalse(basketAdminPageCommon.validatesPassedExportStatus(passedExportStatus));
        Assert.assertFalse(basketAdminPageCommon.validatesPassedExportStatus(allExportStatus));
    }

    @Step
    public void userShouldSeePassedExportStatusBasketData(String firstExportStatus, String secondExportStatus) {
        Assert.assertTrue(basketAdminPageCommon.shouldSeePassedExportStatusBasketData(firstExportStatus, secondExportStatus));
    }

    @Step
    public void userSelectsAllCommerceNextModulesAndChecksRightSideMarketDropdown() {
        basketAdminPageCommon.selectsAllCommerceNextModulesAndChecksRightSideMarketDropdown();
    }
    @Step
    public void userVerifiesBasketDownloadCsvToastPopupMsg(String toastPopupMsg) {
        Assert.assertEquals(toastPopupMsg.toUpperCase(), basketAdminPageCommon.verifiesBasketDownloadCsvToastPopupMsg().toUpperCase());
    }
    @Step
    public void userHoversOnToastPopup() {
        basketAdminPageCommon.hoversOnToastPopup();
    }
    @Step
    public void userVerifiesThatToastPopupVisibleUntilUserTakesOffHover() {
        Assert.assertTrue(basketAdminPageCommon.verifiesThatToastPopupVisibleUntilUserTakesOffHover());
    }
    @Step
    public void userTakesOffHoveredMouseFromToastPopup() {
        basketAdminPageCommon.takesOffHoveredMouseFromToastPopup();
    }
    @Step
    public void userVerifiesToastPopupDisappearsAfterPassedSeconds(int noOfSecond) throws InterruptedException {
        basketAdminPageCommon.verifiesToastPopupDisappearsAfterPassedSeconds(noOfSecond);
    }
    @Step
    public void userVerifiesToastPopupDisappeared() {
        basketAdminPageCommon.verifiesToastPopupDisappeared();
    }
    @Step
    public void userValidatesAggregatedCountIsEqualToTotalBasketCountInPagination(String aggregatedCountOfField) throws InterruptedException {
        basketAdminPageCommon.validatesAggregatedCountIsEqualToTotalBasketCountInPagination(aggregatedCountOfField);
    }

    @Step
    public void userValidatesFieldIsClear(String field, String element, String state) {
        if(state.equalsIgnoreCase("Clear"))
            Assert.assertEquals("", basketAdminPageCommon.validatesFieldIsClear(field, state));
        else
            Assert.assertNotEquals("", basketAdminPageCommon.validatesFieldIsClear(field, state));
    }

    @Step
    public void userValidatesReExportBasketCheckboxIsNotPresent() {
        Assert.assertTrue(basketAdminPageCommon.validatesReExportBasketsCheckboxIsNotPresent());
    }

    @Step
    public void userVerifiesCorrectDataInViewDropdown() {
        basketAdminPageCommon.verifiesCorrectDataInViewDropdown();
    }
}


package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.BasketAdminPageCA;
import com.adidas.tpAdidasSerenity.fe.pageObjects.BasketAdminPageUS;
import net.thucydides.core.annotations.Step;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BasketAdminStepsUS {
    BasketAdminPageUS basketAdminPageUS;
    private static final Logger log = LoggerFactory.getLogger(BasketAdminStepsUS.class);

    @Step
    public void userClicksOnChannel() {
        basketAdminPageUS.clicksOnChannel();
    }

    @Step
    public void userShouldSeeCorrectChannelsOnChannelDropdown() {
        basketAdminPageUS.shouldSeeCorrectChannelsOnChannelDropdown();
    }


    @Step
    public void userSelectsChannel(String channel) {
        basketAdminPageUS.selectsChannel(channel);
    }

    BasketAdminPageCA basketAdminPageCA;

    @Step
    public void userShouldSeeAppliedFilterData(String channelId, String siteId, String exportStatus) {
        basketAdminPageCA.userShouldSeeDefaultCriteria(channelId, siteId, exportStatus);
    }


}

package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.BasketAdminPageWE;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BasketAdminStepsWE {

    BasketAdminPageWE basketAdminPageWE;
    private static final Logger log = LoggerFactory.getLogger(BasketAdminStepsWE.class);


    @Step
    public void userVerifiesCorrectMarketsOnMarketDropdown() {
        basketAdminPageWE.verifiesCorrectMarketsOnMarketDropdown();
    }


    @Step
    public void userSelectsSiteId(String siteId) throws InterruptedException {
        basketAdminPageWE.selectsSiteId(siteId);
    }


    @Step
    public void userShouldSeeAllSiteIdsRelatedToEUMarkets() {
        Assert.assertTrue(basketAdminPageWE.shouldSeeAllSiteIdsRelatedToEUMarkets());
    }


    @Step
    public void userVerifiesSelectedSiteIdBaskets() {
        basketAdminPageWE.verifiesSelectedSiteIdBaskets();
    }
}


package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.CheckoutPage;
import com.adidas.tpAdidasSerenity.fe.pageObjects.InventoryPage;
import com.adidas.tpAdidasSerenity.fe.pageObjects.OrderFulfilmentPage;
import org.junit.Assert;
import net.thucydides.core.annotations.Step;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CheckoutSteps {

    CheckoutPage checkoutPage;

    InventoryPage inventoryPage = new InventoryPage();

    @Step
    public void userShouldSeeHeaders() {
        checkoutPage.shouldSeeHeaders();
    }


    @Step
    public void userVerifiesChannelDropdownInCheckoutPage() {
        Assert.assertTrue(checkoutPage.verifiesChannelDropdownInCheckoutPage());
    }

    @Step
    public void userVerifiesSearchButtonInCheckoutPage() {
        Assert.assertTrue(checkoutPage.verifiesSearchButtonInCheckoutPage());
    }

    @Step
    public void userVerifiesAddressManagementSectionState(String addressManagementSection, String state) {
        if(state.equalsIgnoreCase("expanded"))
        {
            Assert.assertTrue(checkoutPage.verifiesAddressManagementSection(addressManagementSection));
        }
        else {
            Assert.assertFalse(checkoutPage.verifiesAddressManagementSection(addressManagementSection));
        }
    }

    @Step
    public void userVerifiesOnlyNumbersCanBeEntered(String field, String addressManagementSection) {
        Assert.assertEquals("", checkoutPage.verifiesOnlyNumbersCanBeEntered(field, addressManagementSection));
    }

    @Step
    public void userChecksRequiredCheckBoxState(String requiredCheckbox) {
        checkoutPage.checksRequiredCheckBoxState(requiredCheckbox);
    }

    @Step
    public void userClickOnRequiredCheckBox(String requiredCheckbox) {
        checkoutPage.clickOnRequiredCheckBox(requiredCheckbox);
    }

    @Step
    public void userVerifiesRequiredCheckBoxDeSelectedIfSelectedAndViceVersa(String requiredCheckBox) {
        checkoutPage.verifiesRequiredCheckBoxDeSelectedIfSelectedAndViceVersa(requiredCheckBox);
    }

    @Step
    public void userChangesCarrierNameCarrierStringAndCarrierService() throws InterruptedException {
        checkoutPage.changesCarrierNameCarrierStringAndCarrierService();
    }

    @Step
    public void userStoresCheckoutOrTaxRatesOrFulfilmentFields(String fieldName) throws InterruptedException {
        checkoutPage.storesCheckoutOrTaxRatesOrFulfilmentFields(fieldName);
    }

    @Step
    public void userChecksDynamicTaxIsEnabled(String state) {
        Assert.assertEquals(state.toUpperCase(), checkoutPage.checksDynamicTaxIsEnabled().toUpperCase());
    }
    @Step
    public void userVerifiesTwoModulesFieldsAreSame(String moduleOne, String moduleTwo) {
        checkoutPage.verifiesTwoModulesFieldsAreSame(moduleOne, moduleTwo);
    }

    @Step
    public void userClickOnSaveButtonOfAddressManagementSection() {
        checkoutPage.clickOnSaveButtonOfAddressManagementSection();
    }

    @Step
    public void userValidatesCountriesInMarketDropdownIsDisplayed() {
        inventoryPage.validatesCountriesInMarketDropdownIsDisplayed();
    }

    @Step
    public void userValidatesLiveOrNotLiveFlagIsDisplayed(String liveFlag, String notLiveFlag) {
        Assert.assertTrue(checkoutPage.validatesLiveOrNotLiveFlagIsDisplayed(liveFlag, notLiveFlag));
    }

    @Step
    public void userUpdatesStatusFlag(String statusFlag) {
        checkoutPage.updatesStatusFlag(statusFlag);
    }

    @Step
    public void userValidatesPassedFlagIsDisplayed(String statusFlag) {
        if(statusFlag.equalsIgnoreCase("LIVE") || statusFlag.equalsIgnoreCase("NOT LIVE"))
            Assert.assertTrue(checkoutPage.validatesPassedFlagIsDisplayed(statusFlag));
    }
}


package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.CommonPage;
import com.adidas.tpAdidasSerenity.fe.utility.enums.CommonEnum;
import com.adidas.tpAdidasSerenity.fe.utility.enums.DropdownEnum;
import com.adidas.tpAdidasSerenity.fe.utility.enums.FieldVisibilityValidationEnum;
import com.adidas.tpAdidasSerenity.fe.utility.enums.PageValidationEnum;
import io.cucumber.datatable.DataTable;
import jxl.read.biff.BiffException;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;

import java.io.IOException;
import java.text.ParseException;

public class CommonSteps {

    CommonPage commonPage;

    @Step
    public void userLoggedInToAdminApplication() throws IOException {
        commonPage.doLogin();
    }
    @Step
    public void userSelectRegion(String region) throws InterruptedException {
        commonPage.selectRegion(region);
    }
    @Step
    public void userClickOnLinkOnMenu(String linkOnMenu) throws InterruptedException {
        commonPage.clickOnLinkOnMenu(CommonEnum.fromString(linkOnMenu), linkOnMenu);
    }
    @Step
    public void userClickOnDropdown(String dropdown) throws InterruptedException {
        commonPage.clickOnDropdown(DropdownEnum.fromString(dropdown), dropdown);
    }
    @Step
    public void userSelectsValueInDropdown(String dropdownValue, String dropdownFieldName) throws InterruptedException {
        commonPage.selectsValueInDropdown(dropdownValue, DropdownEnum.fromString(dropdownFieldName));
    }
    @Step
    public void userClickOnButton(String button) {
        commonPage.clickOnButton(CommonEnum.fromString(button), button);
    }

    @Step
    public void userClickOnLink(String link, String field) {
        commonPage.clickOnLink(CommonEnum.fromString(link), field, link);
    }

    @Step
    public void userVerifiesPageOfCOMNxtIsDisplayed(String pageLevelValidater) {
        Assert.assertTrue(commonPage.verifiesPageOfCOMNxtIsDisplayed(PageValidationEnum.fromString(pageLevelValidater), pageLevelValidater));
    }

    @Step
    public void userEntersValueInField(String value, String fieldName) {
        commonPage.entersValueInField(value, CommonEnum.fromString(fieldName), fieldName);
    }

    @Step
    public void userUpdatesValueInField(String value, String fieldName) {
        commonPage.updatesValueInField(value, CommonEnum.fromString(fieldName), fieldName);
    }

    @Step
    public void userValidatesPopupIsDisplayed(String popup) {
        Assert.assertTrue(commonPage.validatesPopupIsDisplayed(CommonEnum.fromString(popup), popup));
    }

    @Step
    public void userValidatesPopupMessageIsDisplayed(String popupMessage) {
        Assert.assertTrue(commonPage.validatesPopupMessageIsDisplayed(CommonEnum.fromString(popupMessage), popupMessage));
    }

    @Step
    public void userVerifiesElementState(String field, String state) {
        if(state.equalsIgnoreCase("enabled"))
            Assert.assertNull(commonPage.verifiesElementState(CommonEnum.fromString(field), field, state));
        else
            Assert.assertEquals("true", commonPage.verifiesElementState(CommonEnum.fromString(field), field, state));
    }

    @Step
    public void userVerifiesFieldIsDisplayed(String field) throws ParseException {
        Assert.assertTrue(commonPage.verifiesFieldIsDisplayed(FieldVisibilityValidationEnum.fromString(field), field));
    }
    @Step
    public void userValidatesFieldIsEnabled(String field) {
        Assert.assertTrue(commonPage.validatesFieldIsEnabled(CommonEnum.fromString(field), field));
    }

    @Step
    public void userClickOnTab(String tab) throws InterruptedException {
        commonPage.clickOnTab(CommonEnum.fromString(tab), tab);
    }

    @Step
    public void userClickOnDropdownOnMenu(String dropdownOnMenu) {
        commonPage.clickOnDropdownOnMenu(DropdownEnum.fromString(dropdownOnMenu), dropdownOnMenu);
    }

    @Step
    public void userValidatesFieldIsSelected(String fieldName) {
        Assert.assertTrue(commonPage.validatesFieldIsSelected(CommonEnum.fromString(fieldName), fieldName));
    }

    @Step
    public void userChecksStatusOfCheckBox(String field, String status) {
        if(status.equalsIgnoreCase("Active"))
            Assert.assertEquals("true", commonPage.checksStatusOfCheckBox(CommonEnum.fromString(field), field));
        else
            Assert.assertNull(commonPage.checksStatusOfCheckBox(CommonEnum.fromString(field), field));
    }

    @Step
    public void userSelectRandomValueFromDropdown(String dropdownField) {
        commonPage.selectRandomValueFromDropdown(DropdownEnum.fromString(dropdownField), dropdownField);
    }

    @Step
    public void userSelectRandomCheckBox(String checkBoxField) {
        commonPage.selectRandomCheckBox(CommonEnum.fromString(checkBoxField), checkBoxField);
    }

    @Step
    public void userValidatesPopupMessageIsNotDisplayed(String popupMessage) {
        Assert.assertFalse(commonPage.validatesPopupMessageIsDisplayed(CommonEnum.fromString(popupMessage), popupMessage));
    }

    @Step
    public void userClickOnRadioButton(String radioButton) {
        commonPage.clickOnRadioButton(CommonEnum.fromString(radioButton), radioButton);
    }

    @Step
    public void userClickOnIcon(String icon, String field) {
        commonPage.clickOnIcon(CommonEnum.fromString(field), field);
    }

    @Step
    public void userClickOnCheckBox(String checkbox) {
        commonPage.clickOnCheckBox(CommonEnum.fromString(checkbox), checkbox);
    }

    @Step
    public void userClickOnOutsideAreaOfPopup(String text) {
        commonPage.userClickOnOutsideAreaOfPopup(text);
    }

    @Step
    public void userValidatesDropdownValuesIsDisplayedOrNot(String dropdownName, String fieldStatus, DataTable dropdownValuesDataTable) {
        if(fieldStatus.equalsIgnoreCase("isDisplayed"))
            Assert.assertTrue(commonPage.validatesDropdownValuesIsDisplayedOrNot(DropdownEnum.fromString(dropdownName), dropdownName, dropdownValuesDataTable));
        else
            Assert.assertFalse(commonPage.validatesDropdownValuesIsDisplayedOrNot(DropdownEnum.fromString(dropdownName), dropdownName, dropdownValuesDataTable));
    }

    @Step
    public void userValidatesDataIsDisplayedInTableColumn(String data, String tableColumn) {
        commonPage.validatesDataIsDisplayedInTableColumn(CommonEnum.fromString(data), data, tableColumn);
    }

    @Step
    public void userUploadsRequiredFile(String file) throws InterruptedException {
        commonPage.uploadsRequiredFile(file);
    }

    @Step
    public void userValidatesFileDownloadedOrExportedSuccessfully(String fileName) throws IOException {
        commonPage.validatesFileDownloadedOrExportedSuccessfully(fileName);
    }

    @Step
    public void userValidatesFieldIsNotDisplayed(String field) throws ParseException {
        Assert.assertFalse(commonPage.verifiesFieldIsDisplayed(FieldVisibilityValidationEnum.fromString(field), field));
    }

    @Step
    public void userVerifiesRecordsIsDisplayedInTableColumn(String expectedColumnRecord, String tableColumn) {
        Assert.assertTrue(commonPage.verifiesRecordsIsDisplayedInTableColumn(expectedColumnRecord, tableColumn));
    }

    @Step
    public void userSelectsFromAndToDateWithinGivenRange(Integer noOfDays) throws InterruptedException {
        commonPage.selectsFromAndToDateWithinGivenRange(noOfDays);
    }

    @Step
    public void userVerifiesRecordsIsDisplayedWithinSelectedDateRangeInTable(String moduleName, String tableColumn) throws ParseException {
        commonPage.verifiesRecordsIsDisplayedWithinSelectedDateRangeInTable(tableColumn);
    }

    @Step
    public void userClicksOnLink(String link) {
        commonPage.clicksOnLink(link);
    }

    @Step
    public void userVerifiesElementIsCheckedOrNot(String field, String element, String state) {
        if(state.equalsIgnoreCase("Checked"))
            Assert.assertTrue(commonPage.verifiesElementIsCheckedOrNot(CommonEnum.fromString(field), field, state));
        else
            Assert.assertFalse(commonPage.verifiesElementIsCheckedOrNot(CommonEnum.fromString(field), field, state));
    }
    @Step
    public void userScrollsToSection(String section) {
        commonPage.scrollsToSection(CommonEnum.fromString(section), section);
    }

    @Step
    public void userVerifiesCOMNxtIsDisplayedForRegion(String pageHeader, String region) {
        Assert.assertTrue(commonPage.verifiesCOMNxtIsDisplayedForRegion(pageHeader, region));
    }

    @Step
    public void userSelectsDateAndTime(String dateAndTimeValue) {
        commonPage.selectsDateAndTime(CommonEnum.fromString(dateAndTimeValue), dateAndTimeValue);
    }

    @Step
    public void userStoresSelectedDataInLocalVariable(String field, String varName) {
        commonPage.storesSelectedDataInLocalVariable(CommonEnum.fromString(field), field, varName);
    }

    @Step
    public void userValidatesFieldsIsDisplayedOnFile(String field, String file, DataTable fieldsDataTable) throws BiffException, IOException {
        commonPage.validatesFieldsIsDisplayedOnFile(CommonEnum.fromString(field), field, file, fieldsDataTable);
    }
}


package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.InventoryPage;
import com.adidas.tpAdidasSerenity.fe.utility.enums.CommonEnum;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InventorySteps {

    InventoryPage inventoryPage;

    @Step
    public void userValidatesInventorySearchResult() {
        inventoryPage.validatesInventorySearchResult();
    }

    @Step
    public void userValidatesCountriesInMarketDropdownIsDisplayed() {
        inventoryPage.validatesCountriesInMarketDropdownIsDisplayed();
    }

    @Step
    public void userValidatesProductDetailsPage() {
        Assert.assertTrue(inventoryPage.validatesProductDetailsPage() >= 1);
    }


    @Step
    public void userVerifiesValidChannelsInChannelsDropdown() {
        inventoryPage.verifiesValidChannelsInChannelsDropdown();
    }


    @Step
    public void userVerifiesCorrectCountOfUnSuccessProductIdOnMoreInfoPopup() {
        inventoryPage.verifiesCorrectCountOfUnSuccessProductIdOnMoreInfoPopup();
    }

    @Step
    public void userValidatesAvailabilityQuantityPerNodeTableColumnHeaders(String columnHeader, String tableName) {
        Assert.assertTrue(inventoryPage.validatesAvailabilityQuantityPerNodeTableColumnHeaders(columnHeader, tableName));
    }

    @Step
    public void userValidatesFieldsDataOnInventoryResultsPage(String inventoryData) {
        Assert.assertTrue(inventoryPage.validatesFieldsDataOnInventoryResultsPage(inventoryData));
    }

}


package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.OrderFulfilmentPage;
import io.cucumber.datatable.DataTable;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class OrderFulfilmentSteps {
    OrderFulfilmentPage orderFulfilmentPage;
    private static final Logger log = LoggerFactory.getLogger(OrderFulfilmentSteps.class);

    @Step
    public void userGoToPassedPageUnderFulfilmentTab() {
        orderFulfilmentPage.clickOnFulfilmentTab();
        orderFulfilmentPage.goToPassedPageUnderFulfilmentTab();
    }

    @Step
    public void userClicksOnSpecifiedSiteID(Integer siteID) {
        orderFulfilmentPage.clicksOnSpecifiedSiteID(siteID);
    }

    @Step
    public void userRedirectedToFulfilmentPage() {
        orderFulfilmentPage.redirectedToFulfilmentPage();
    }


    @Step
    public void userClicksOnEditLinkOfFulfilmentMethod(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentPage.clicksOnEditLinkOfFulfilmentMethod(fulfilmentMethod);
    }

    @Step
    public void userSelectsStatusAndEntersLocalDesc() throws InterruptedException {
        orderFulfilmentPage.selectsStatusAndEntersLocalDesc();
    }

    @Step
    public void userDoNotEnterPositionAndLocalName() {
        orderFulfilmentPage.doNotEnterPositionAndLocalName();
    }

    @Step
    public void userShouldSeeSaveButtonInDisabledState() {
        Assert.assertFalse(orderFulfilmentPage.checksSaveButtonBehavior());
    }


    @Step
    public void userClicksOnPrePopulatedSiteId(String siteId) {
        orderFulfilmentPage.clicksOnPrePopulatedSiteId(siteId);
    }

    @Step
    public void userRedirectedToConfigureFulfilmentMethod() {
        orderFulfilmentPage.redirectedToConfigureFulfilmentMethod();
    }

    @Step
    public void userClicksOnPositionDropdown() throws InterruptedException {
        orderFulfilmentPage.clicksOnFmPositionDropdown();
    }

    @Step
    public void userClicksOnCloseButtonOfFulfilmentMethod() throws InterruptedException {
        orderFulfilmentPage.clicksOnCloseButtonOfFulfilmentOrShipmentMethod();
    }

    boolean isCLCAndPUDOPosnDisplayed;

    @Step
    public void userShouldNotSeePositionOfCLCAndPUDO() {
        isCLCAndPUDOPosnDisplayed = orderFulfilmentPage.shouldNotSeePositionOfCLCAndPUDO();
    }

    boolean isHDAndPUDOPosnDisplayed;

    @Step
    public void userShouldNotSeePositionOfHDAndPUDO() {
        isHDAndPUDOPosnDisplayed = orderFulfilmentPage.shouldNotSeePositionOfHDAndPUDO();
    }

    boolean isHDAndCLCPosnDisplayed;

    @Step
    public void userShouldNotSeePositionOfHDAndCLC() {
        isHDAndCLCPosnDisplayed = orderFulfilmentPage.shouldNotSeePositionOfHDAndCLC();
        log.info(isCLCAndPUDOPosnDisplayed + " " + isHDAndPUDOPosnDisplayed + " " + isHDAndCLCPosnDisplayed);
        if (isCLCAndPUDOPosnDisplayed || isHDAndPUDOPosnDisplayed || isHDAndCLCPosnDisplayed) {
            Assert.fail();
        }
    }


    @Step
    public void userChecksFulfilmentMethodStatus(String fulfilmentMethod) {
        orderFulfilmentPage.checksFulfilmentMethodStatus(fulfilmentMethod);
    }

    /*@Step
    public void userEnablesFmIfDisabledElseDisableAllSmsUnderPassedFm(String fulfilmentMethod, String passedStatus) throws InterruptedException {
        orderFulfilmentPage.enablesFmIfDisabledElseDisableAllSmsUnderPassedFm(fulfilmentMethod, passedStatus);
    }*/

    @Step
    public void userDisablesToggleButton() throws InterruptedException {
        orderFulfilmentPage.clicksOnToggleButton();
    }

    @Step
    public void userClicksOnSaveButtonOfConfigureFulfilmentMethod() {
        orderFulfilmentPage.clicksOnSaveButtonOfConfigureFulfilmentMethod();
    }

    @Step
    public void userShouldSeeFulfilmentMethodPopupHeader(String expectedHeader) {
        Assert.assertEquals(expectedHeader, orderFulfilmentPage.shouldSeeFulfilmentMethodPopupHeader());
    }

    @Step
    public void userShouldSeeSuccessMessage(String successMsg) {
        Assert.assertEquals(successMsg, orderFulfilmentPage.shouldSeeSuccessMessage(successMsg));
    }

    @Step
    public void userClicksOnCloseButtonOfFmOrSmPopup() throws InterruptedException {
        orderFulfilmentPage.clicksOnCloseButtonOfFmOrSmPopup();
    }

    @Step
    public void userSeesToggleButtonDisabled() {
        Assert.assertFalse(orderFulfilmentPage.checksToggleButtonBehavior());
    }

    @Step
    public void userEnablesTogglesButton() throws InterruptedException {
        orderFulfilmentPage.clicksOnToggleButton();
    }

   /* @Step
    public void checkStatusAndAddShippingMethodButtonIsDisabled(String fulfilmentMethod) throws InterruptedException {
        Assert.assertFalse(orderFulfilmentPage.checksStatusAndAddShippingMethodButtonIsDisabled(fulfilmentMethod));
    }


    @Step
    public void checkStatusAndAddShippingMethodButtonIsEnabled(String fulfilmentMethod) throws InterruptedException {
        Assert.assertTrue(orderFulfilmentPage.checksStatusAndAddShippingMethodButtonIsEnabled(fulfilmentMethod));
    }
*/
    @Step
    public void userSeesToggleButtonEnabled() {
        Assert.assertTrue(orderFulfilmentPage.checksToggleButtonBehavior());
    }


    @Step
    public void userEntersLocalName() {
        orderFulfilmentPage.entersLocalName();
    }

    @Step
    public void userShouldSeeSaveButtonEnabledState() {
        Assert.assertTrue(orderFulfilmentPage.checksSaveButtonBehavior());
    }


    @Step
    public void userVerifiesFulfilmentMethodWithPrefilledDetails() throws InterruptedException {
        Assert.assertTrue(orderFulfilmentPage.verifiesFulfilmentMethodWithPrefilledDetails());
    }


    @Step
    public void userGoesToConfigureFulfilmentMethodsScreen(String fulfilmentMethodsPageHeader) {
        Assert.assertEquals(fulfilmentMethodsPageHeader.toUpperCase(), orderFulfilmentPage.goesToConfigureFulfilmentMethodsScreen(fulfilmentMethodsPageHeader));
    }

    @Step
    public void userClicksOnBackButton() {
        orderFulfilmentPage.clicksOnBackButton();
    }

    @Step
    public void userRedirectedToLandingPage(String landingPageHeader) {
        Assert.assertEquals(landingPageHeader.toUpperCase(), orderFulfilmentPage.redirectedToLandingPage(landingPageHeader));

    }


    @Step
    public void userValidatesConfigureFmOrSmPageHeader(String configureFmOrSmPageHeader) {
        Assert.assertEquals(configureFmOrSmPageHeader.toUpperCase(), orderFulfilmentPage.validatesConfigureFmOrSmPageHeader(configureFmOrSmPageHeader));
    }


    @Step
    public void userClicksOnEditLinkOrAddShippingMethodButton(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentPage.clicksOnEditLinkOrAddShippingMethodButton(fulfilmentMethod);
    }

    /*@Step
    public void userClicksOnCarrierNameDropdown() throws InterruptedException {
        orderFulfilmentPage.clicksOnCarrierNameDropdown();
    }*/


    @Step
    public void userVerifiesCorrectDataInCarrierNameDropdown() {
        orderFulfilmentPage.verifiesCorrectDataInCarrierNameDropdown();
    }


    /*@Step
    public void userClicksOnCarrierServiceDropdown() throws InterruptedException {
        orderFulfilmentPage.clicksOnCarrierServiceDropdown();
    }*/

    @Step
    public void userVerifiesCorrectDataInCarrierServiceDropdown() {
        orderFulfilmentPage.verifiesCorrectDataInCarrierServiceDropdown();
    }


    /*@Step
    public void userClicksOnTaxClassDropdown() throws InterruptedException {
        orderFulfilmentPage.clicksOnTaxClassDropdown();
    }*/

    @Step
    public void userVerifiesCorrectDataInTaxClassDropdown() {
        orderFulfilmentPage.verifiesCorrectDataInTaxClassDropdown();
    }


    @Step
    public void userVerifiesCorrectChannelsOnCreateSMScreen() {
        orderFulfilmentPage.verifiesCorrectChannelsOnCreateSMScreen();
    }


    @Step
    public void userVerifiesCorrectProductTypesOnCreateSMScreen() {
        orderFulfilmentPage.verifiesCorrectProductTypesOnCreateSMScreen();
    }


    @Step
    public void userEnablesFulfilmentMethod(String fulfilmentMethod, String status) throws InterruptedException {
        orderFulfilmentPage.enablesFulfilmentMethod(fulfilmentMethod, status);
    }

    @Step
    public void userClicksOnAddShippingMethodButton(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentPage.clicksOnAddShippingMethodButton(fulfilmentMethod);
    }

    @Step
    public void userAddsAllDetailsExceptCarrierNameField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptCarrierNameField();
    }

    @Step
    public void userShouldSeeSaveButtonOfCreateSMMethodInDisabledState() {
        Assert.assertFalse(orderFulfilmentPage.checksCreateSMMethodSaveButtonBehavior());
    }

    /*@Step
    public void userSelectsCarrierName() throws InterruptedException {
        orderFulfilmentPage.selectsCarrierName();
    }*/

    @Step
    public void userShouldSeeSaveButtonOfCreateSMMethodInEnabledState() {
        Assert.assertTrue(orderFulfilmentPage.checksCreateSMMethodSaveButtonBehavior());
    }


    @Step
    public void userAddsAllDetailsExceptCarrierStringField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptCarrierStringField();
    }
    /*
    OUT OF SCOPE BECAUSE OF NEW CARRIER STRING FIELD IMPLEMENTATION
    @Step
    public void userEntersCarrierString() {
        orderFulfilmentPage.addsCarrierStringField();
    }*/


    @Step
    public void userAddsAllDetailsExceptCarrierServiceField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptCarrierServiceField();
    }

    @Step
    public void userSelectsCarrierService() throws InterruptedException {
        orderFulfilmentPage.selectsCarrierService();
    }


    @Step
    public void userAddsAllDetailsExceptLocaleNameField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptLocaleNameField();
    }

    @Step
    public void userAddsLocalName() {
        orderFulfilmentPage.addsLocalNames();
    }


    @Step
    public void userAddsAllDetailsExceptBaseFixedPriceField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptBaseFixedPriceField();
    }

    @Step
    public void userEntersBaseFixedPrice() {
        orderFulfilmentPage.addsBasedFixedPrice();
    }

    @Step
    public void userClicksOnCloseButtonOfShipmentMethod() throws InterruptedException {
        orderFulfilmentPage.clicksOnCloseButtonOfFulfilmentOrShipmentMethod();
    }

    @Step
    public void userAddsAllDetailsExceptThresholdField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptThresholdField();
    }

    @Step
    public void userEntersThreshold() {
        orderFulfilmentPage.addsThresholdPrice();
    }

    @Step
    public void userAddsAllDetailsExceptShipmentUpSellField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptShipmentUpSellField();
    }

    @Step
    public void userEntersShipmentUpSell() {
        orderFulfilmentPage.addsShipmentUpSellPrice();
    }

    @Step
    public void userAddsAllDetailsExceptThresholdAndShipmentUpSellField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptThresholdAndShipmentUpSellField();
    }

    @Step
    public void userEntersThresholdLesserThanShipmentUpSellField(String thresholdValue, String shipmentUpSellValue) {
        orderFulfilmentPage.entersThresholdAndShipmentUpSellField(thresholdValue, shipmentUpSellValue);
    }

    @Step
    public void userShouldSeeErrorMessageBelowField(String errorMessage, String field) {
        Assert.assertEquals(errorMessage, orderFulfilmentPage.shouldSeeErrorMessageBelowField(errorMessage, field));
    }

    @Step
    public void userEntersShipmentUpSellGreaterThanThresholdField(String shipmentUpSellValue, String thresholdValue) {
        orderFulfilmentPage.entersShipmentUpSellGreaterThanThresholdField(shipmentUpSellValue, thresholdValue);
    }

    @Step
    public void userEntersThresholdGreaterThanShipmentUpSellField(String thresholdValue, String shipmentUpSellValue) {
        orderFulfilmentPage.entersThresholdAndShipmentUpSellField(thresholdValue, shipmentUpSellValue);
    }

    @Step
    public void userClicksOnYesButtonOfConfigureSMClosePopup() {
        orderFulfilmentPage.clicksOnYesButtonOfConfigureSMClosePopup();
    }


    @Step
    public void userAddsAllDetailsExceptPositionField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptPositionField();
    }

    @Step
    public void userSelectsPosition() throws InterruptedException {
        orderFulfilmentPage.selectsPosition();
    }


    /*@Step
    public void userAddsAllDetailsExceptChannelsField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptChannelsField();
    }*/

    @Step
    public void userSelectsChannels() {
        orderFulfilmentPage.selectsChannels();
    }


    /*@Step
    public void userAddsAllDetailsExceptProductTypesField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptProductTypesField();
    }*/

    @Step
    public void userSelectsProductTypes() {
        orderFulfilmentPage.selectsProductTypes();
    }


    /*@Step
    public void userAddsAllDetailsExceptMinimumField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptMinimumField();
    }

    @Step
    public void userEntersMinimum(String min) {
        orderFulfilmentPage.addsMinimumDeliveryDays(min);
    }

    @Step
    public void userAddsAllDetailsExceptMaximumField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptMaximumField();
    }

    @Step
    public void userEntersMaximum(String max) {
        orderFulfilmentPage.addsMaximumDeliveryDays(max);
    }
*/
    @Step
    public void userClicksOnEditLinkOfShippingMethod(String fulfilmentMethod) {
        orderFulfilmentPage.clicksOnEditLinkOfShippingMethod(fulfilmentMethod);
    }

    @Step
    public void userClicksOnSaveButtonOfConfigureShippingMethod() {
        orderFulfilmentPage.clicksOnSaveButtonOfConfigureShippingMethod();
    }

    @Step
    public void userChecksPassedFieldValueAndUpdatedFieldValueInConfigureFmsScreen(String field, String value) {
        Assert.assertEquals(value, orderFulfilmentPage.checksPassedFieldValueAndUpdatedFieldValueInConfigureFmsScreen(field));
    }

    /*@Step
     It is commented because of new carrier string implementation and carrier string is not a mandatory field    public void userUpdatesCarrierString() {
        orderFulfilmentPage.updatesCarrierString();
    }*/

   /* @Step
    public void userUpdatesThresholdAndShipmentUpSell() {
        orderFulfilmentPage.updatesThresholdAndShipmentUpSell("200","150");
    }*/

    /*@Step
    public void userUpdatesTaxClass() throws InterruptedException {
        orderFulfilmentPage.updatesTaxClass();
    }*/


    @Step
    public void userEnterSomeDetailsOnConfigureFmScreen() throws InterruptedException {
        orderFulfilmentPage.selectsRandomPosition();
        orderFulfilmentPage.entersLocalName();
        orderFulfilmentPage.entersDescription();
    }


    @Step
    public void userChecksLocalesForSiteIdsBasedOnRegion(String region) throws InterruptedException {
        Assert.assertTrue(orderFulfilmentPage.checksLocalesForSiteIdsBasedOnRegion(region));
    }

    @Step
    public void userDisableAllShippingMethods(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentPage.disableAllShippingMethods(fulfilmentMethod);
    }


    /*@Step
    public void ifFmsStatusIsEnabledDisableAllSmsAndFm(String fulfilmentMethod, String fulfilmentStatus) throws InterruptedException {
        orderFulfilmentPage.fmsStatusIsEnabledDisableAllSmsAndFm(fulfilmentMethod, fulfilmentStatus);
    }*/

    @Step
    public void userVerifiesEditButtonOfShippingMethodInDisabledState(String fulfilmentMethod, String fulfilmentStatus) throws InterruptedException {
        orderFulfilmentPage.verifiesEditButtonOfShippingMethodInDisabledState(fulfilmentMethod, fulfilmentStatus);
    }


    @Step
    public void userDisableAllSmsExceptDefaultEnabledSm() throws InterruptedException {
        orderFulfilmentPage.disableAllSmsExceptDefaultEnabledSm();
    }

    @Step
    public void userClicksOnEditLinkOfDefaultEnabledSm() {
        orderFulfilmentPage.clicksOnEditLinkOfDefaultEnabledSm();
    }

    @Step
    public void userDeselectDefaultFlag() throws InterruptedException {
        orderFulfilmentPage.deselectDefaultFlag();
    }

    @Step
    public void userShouldSeeShippingMethodPopupErrorHeader(String errorHeader) {
        Assert.assertEquals(errorHeader, orderFulfilmentPage.shouldSeeShippingMethodPopupErrorHeader());
    }

    @Step
    public void userShouldSeeShippingMethodPopupErrorMsg(String errorMsg) {
        Assert.assertEquals(errorMsg, orderFulfilmentPage.shouldSeeShippingMethodPopupErrorMsg(errorMsg));
    }

    @Step
    public void userClicksOnCloseButtonOfSmErrorPopup() {
        orderFulfilmentPage.clicksOnCloseButtonOfSmErrorPopup();
    }

    @Step
    public void userRefreshesTheBrowser() {
        orderFulfilmentPage.refreshesTheBrowser();
    }


    @Step
    public void userStoresNextHigherPosEnabledSmDetailsInJSONObject() throws InterruptedException {
        orderFulfilmentPage.storesNextHigherPosEnabledSmDetailsInJSONObject();
    }

    @Step
    public void userVerifiesAutopickOfSmSameAsStoredSm() {
        orderFulfilmentPage.verifiesAutopickOfSmSameAsStoredSm();
    }


    @Step
    public void userClicksOnEditLinkOfSmExceptDefTrueSmEnabled() throws InterruptedException {
        orderFulfilmentPage.clicksOnEditLinkOfSmExceptDefTrueSmEnabled();
    }

    @Step
    public void userSelectDefaultCheckBoxIfNotSelected() throws InterruptedException {
        orderFulfilmentPage.selectDefaultCheckBoxIfNotSelected();
    }

    @Step
    public void userEnablesSmIfDisabled() throws InterruptedException {
        orderFulfilmentPage.enablesSmIfDisabled();
    }

    @Step
    public void userShouldSeeShippingMethodPopupHeader(String header) {
        Assert.assertEquals(header, orderFulfilmentPage.shouldSeeShippingMethodPopupHeader(header));
    }

    @Step
    public void userShouldSeeShippingMethodPopupMsg(String msg) {
        Assert.assertEquals(msg, orderFulfilmentPage.shouldSeeShippingMethodPopupMsg(msg));
    }


    @Step
    public void userAddsAllDetailsExceptCustomIdField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptCustomIdField();
    }

    @Step
    public void userEnterCustomId() {
        orderFulfilmentPage.entersCustomId();
    }


    
    
    /*
    OUT OF SCOPE BECAUSE OF NEW TIER FIXED PRICE IMPLEMENTATION

    @Step
    public void userAddsAllDetailsExceptTierOneField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptTierOneField();
    }

    @Step
    public void userAddsAllDetailsExceptTierTwoField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptTierTwoField();
    }

    @Step
    public void userAddsAllDetailsExceptTierThreeField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptTierThreeField();
    }

    @Step
    public void userAddsAllDetailsExceptTierFourField() throws InterruptedException {
        orderFulfilmentPage.addsAllDetailsExceptTierFourField();
    }

    @Step
    public void userEntersPassedTier(Integer tierNo) {
        String tierValue="7";
        orderFulfilmentPage.entersPassedTier(tierNo,tierValue);
    }*/


    @Step
    public void userClicksOnViewActionIcon() throws InterruptedException {
        orderFulfilmentPage.clickOnViewActionIcon();
    }

    @Step
    public void userShouldBeAbleToSeeViewPopupHeader(String expectedHeader) {
        Assert.assertEquals(expectedHeader.toUpperCase(), orderFulfilmentPage.shouldSeeViewPopupHeader(expectedHeader).toUpperCase());
    }

    @Step
    public void userClicksOnCloseIconOfAllowedOrBlockedItemsPopup(String expectedHeader) {
        orderFulfilmentPage.clicksOnCloseIconOfAllowedOrBlockedItemsPopup(expectedHeader);
    }


    @Step
    public void userClicksOnDeletedActionIcon() throws InterruptedException {
        orderFulfilmentPage.clickOnDeleteActionIcon();
    }

    @Step
    public void userShouldBeAbleToSeeDeleteListPopupWithText(String deletePopupText) {
        Assert.assertEquals(deletePopupText.toUpperCase(), orderFulfilmentPage.shouldSeeDeletePopupText(deletePopupText).toUpperCase());
    }

    @Step
    public void userClicksOnCancelButton() {
        orderFulfilmentPage.clicksOnCancelButton();
    }


    @Step
    public void userClicksOnAddItemsButton() throws InterruptedException {
        orderFulfilmentPage.clicksOnAddItemsButton();
    }

    @Step
    public void userShouldBeAbleToSeeAddItemsPopupHeader(String addHeader) {
        Assert.assertEquals(addHeader.toUpperCase(), orderFulfilmentPage.shouldSeeAddItemsPopupHeader(addHeader).toUpperCase());
    }


    @Step
    public void userClicksOnEditActionIcon() throws InterruptedException {
        orderFulfilmentPage.clicksOnEditActionIcon();
    }

    @Step
    public void userShouldSeeHeaderInEditPopup(String editHeader) {
        Assert.assertEquals(editHeader.toUpperCase(), orderFulfilmentPage.shouldSeeHeaderInEditPopup(editHeader).toUpperCase());
    }


    @Step
    public void userShouldSeeHeaderInDeletePopup(String deleteHeader) {
        Assert.assertEquals(deleteHeader.toUpperCase(), orderFulfilmentPage.shouldSeeHeaderInDeletePopup(deleteHeader).toUpperCase());
    }

    @Step
    public void userShouldSeeRespectiveMessageInDeletePopup(String deleteMsg) {
        Assert.assertEquals(deleteMsg.toUpperCase(), orderFulfilmentPage.shouldSeeRespectiveMessageInDeletePopup(deleteMsg).toUpperCase());
    }


    @Step
    public void userEditsAllowTypeOperatorAndValueFields() {
        orderFulfilmentPage.editsAllowTypeOperatorAndValueFields();
    }

    @Step
    public void userClicksOnSaveButton() {
        orderFulfilmentPage.clicksOnSaveButton();
    }

    @Step
    public void userShouldSeeSuccessHeader(String successHeader) {
        Assert.assertEquals(successHeader.toUpperCase(), orderFulfilmentPage.shouldSeeSuccessHeader(successHeader).toUpperCase());
    }

    @Step
    public void userShouldSeeSuccessMessageInPopup(String successMsg) {
        Assert.assertEquals(successMsg.toUpperCase(), orderFulfilmentPage.shouldSeeSuccessMessageInPopup(successMsg).toUpperCase());
    }

    @Step
    public void userClicksOnCloseButtonOfSuccessMessagePopup() {
        orderFulfilmentPage.clicksOnCloseButtonOfSuccessMessagePopup();
    }


    @Step
    public void userClicksOnDeleteButtonOfDeletePopup() {
        orderFulfilmentPage.clicksOnDeleteButtonOfDeletePopup();
    }


    @Step
    public void userAddsAllowTypeOperatorAndValueFields() throws InterruptedException {
        orderFulfilmentPage.addsAllowTypeOperatorAndValueFields();
    }

    @Step
    public void userClicksOnAddItemsButtonOnAddPopup() {
        orderFulfilmentPage.clicksOnAddItemsButtonOnAddPopup();
    }


    @Step
    public void userClicksOnTypeDropdown() {
        orderFulfilmentPage.clicksOnTypeDropdown();
    }

    @Step
    public void userVerifiesCorrectDataInItemDropdown() {
        orderFulfilmentPage.verifiesCorrectDataInTypeDropdown();
    }
    @Step
    public void userVerifiesCorrectDataInOperatorDropdown() {
        orderFulfilmentPage.verifiesCorrectDataInOperatorDropdown();
    }
    @Step
    public void userClicksOnAllowDropdown() {
        orderFulfilmentPage.clicksOnAllowDropdown();
    }

    @Step
    public void userVerifiesCorrectDataInTypeDropdown() {
        orderFulfilmentPage.verifiesCorrectDataInAllowDropdown();
    }


    @Step
    public void userChecksAndRemovesIfAnyTierPriceFound() throws InterruptedException {
        orderFulfilmentPage.checksAndRemovesIfAnyTierPriceFound();
    }

    @Step
    public void userClicksOnAddDifferentTierPricesButton() throws InterruptedException {
        orderFulfilmentPage.clicksOnAddDifferentTierPricesButton();
    }

    @Step
    public void userEntersMemberFixedPrice(String memberFixedPriceValue, String memberFixedPriceTextBoxNo) {
        orderFulfilmentPage.entersMemberFixedPrice(memberFixedPriceValue, memberFixedPriceTextBoxNo);
    }

    @Step
    public void userSelectsPassedTier(String allTier) {
        orderFulfilmentPage.selectsPassedTier(allTier);
    }


    @Step
    public void userClicksOnRemoveButtonOfTierPrice() {
        orderFulfilmentPage.clicksOnRemoveButtonOfTierPrice();
    }

    @Step
    public void userShouldSeeRemovePopupHeader(String header) {
        Assert.assertEquals(header.toUpperCase(), orderFulfilmentPage.shouldSeeRemovePopupHeader(header).toUpperCase());
    }

    @Step
    public void userShouldSeeRemovePopupMsg(String msg) {
        Assert.assertEquals(msg.toUpperCase(), orderFulfilmentPage.shouldSeeRemovePopupMsg(msg).toUpperCase());

    }

    @Step
    public void userClicksOnCancelButtonOfRemovePopup() {
        orderFulfilmentPage.clicksOnCancelButton();
    }

    @Step
    public void userClicksOnYesButtonOfRemovePopup() {
        orderFulfilmentPage.clicksOnYesButtonOfRemovePopup();
    }

    /*
    IF THERE ARE MORE THAN 1 TIER PRICE, THIS CONDITION WONT WORK SINCE WE ARE REMOVING 1 TIER PRICE
    @Step
    public void userShouldNotSeeAnyTierPriceOrMemberFixedPrice() {
        Assert.assertFalse(orderFulfilmentPage.shouldNotSeeAnyTierOrMemberFixedPrice());
    }
*/


    @Step
    public void userShouldSeeAllTierInSelectedState(String tier1, String tier2, String tier3, String tier4) {
        Assert.assertEquals("true", orderFulfilmentPage.shouldSeeAllTierInSelectedState(tier1));
        Assert.assertEquals("true", orderFulfilmentPage.shouldSeeAllTierInSelectedState(tier2));
        Assert.assertEquals("true", orderFulfilmentPage.shouldSeeAllTierInSelectedState(tier3));
        Assert.assertEquals("true", orderFulfilmentPage.shouldSeeAllTierInSelectedState(tier4));
    }


    @Step
    public void userClicksOnSelectTheTierDropdown(String tierDropdownNo) {
        orderFulfilmentPage.clicksOnSelectTheTierDropdown(tierDropdownNo);
    }

    @Step
    public void userShouldSeePassedTiersCheckboxInDisabledState(String tier1, String tier2) {
        Assert.assertEquals("true", orderFulfilmentPage.checksPassedTierCheckboxBehavior(tier1));
        Assert.assertEquals("true", orderFulfilmentPage.checksPassedTierCheckboxBehavior(tier2));
    }

    @Step
    public void userShouldSeePassedTiersCheckboxInEnabledState(String tier3, String tier4) {
        Assert.assertNull(orderFulfilmentPage.checksPassedTierCheckboxBehavior(tier3));
        Assert.assertNull(orderFulfilmentPage.checksPassedTierCheckboxBehavior(tier4));
    }


    @Step
    public void userShouldSeeAddDifferentTierPriceLinkInDisabledState() {
        Assert.assertEquals("true", orderFulfilmentPage.shouldSeeAddDifferentTierPriceLinkInDisabledState());
    }


    @Step
    public void userShouldSeeSameBaseFixedAndMemberFixedPrice(String firstTier, String secondTier) {
        Assert.assertEquals(orderFulfilmentPage.getBasedFixedPrice(), orderFulfilmentPage.getPrefilledMemberFixedPrice(firstTier, secondTier));
    }
    @Step
    public void userVerifiesSameBaseFixedAndMemberFixedPriceForFourTiers(String memberFixedPriceTextBoxNo) {
        Assert.assertEquals(orderFulfilmentPage.getBasedFixedPrice(), orderFulfilmentPage.getMemberFixedPrice(memberFixedPriceTextBoxNo));
    }

    @Step
    public void userShouldSeePrefilledMemberFixedPrice(String firstTier, String secondTier, String passedPrefilledMemberFixedPrice) {
        Assert.assertEquals(passedPrefilledMemberFixedPrice, orderFulfilmentPage.getPrefilledMemberFixedPrice(firstTier, secondTier));
    }


    @Step
    public void userClicksOnUploadCarrierString() throws InterruptedException {
        orderFulfilmentPage.clicksOnUploadCarrierString();
    }

    @Step
    public void userShouldSeeAddItemsDialogHeaderTextAs(String header) {
        Assert.assertEquals(header.toUpperCase(), orderFulfilmentPage.shouldSeeAddItemsDialogHeaderTextAs(header).toUpperCase());
    }

    @Step
    public void userSelectSingleOrMultipleCarrierStringRadioBox(String singleCarrierStringRadioBox) {
        orderFulfilmentPage.selectSingleOrMultipleCarrierStringRadioBox(singleCarrierStringRadioBox);
    }

    @Step
    public void userEnterValidCarrierString(String carrierString) {
        orderFulfilmentPage.enterValidCarrierString(carrierString);
    }

    @Step
    public void userClicksOnAddItemsButtonOfAddCarrierStringsPopup() {
        orderFulfilmentPage.clicksOnAddItemsButtonOfAddCarrierStringsPopup();
    }

    @Step
    public void userShouldSeeAddedCarrierStringOnConfigureSMPage(String addedCarrierString) throws InterruptedException {
        Assert.assertTrue(orderFulfilmentPage.shouldSeeAddedCarrierStringOnConfigureSMPage(addedCarrierString));
    }


    @Step
    public void userSeesFileUploadedSuccessfully(String uploadedString) {
        Assert.assertEquals(uploadedString.toUpperCase(), orderFulfilmentPage.seesFileUploadedSuccessfully(uploadedString).toUpperCase());

    }

    @Step
    public void userShouldSeeUploadedCarrierStringFileDataOnConfigureSMPage(String uploadedCarrierStringFile) {
        orderFulfilmentPage.shouldSeeUploadedCarrierStringFileDataOnConfigureSMPage(uploadedCarrierStringFile);
    }


    @Step
    public void userClickOnUploadNewLinkOfCarrierString(String uploadNewLink) {
        orderFulfilmentPage.clickOnUploadNewLinkOfCarrierString(uploadNewLink);
    }

    @Step
    public void userShouldSeeHeaderInUploadNewCarrierStringPopup(String header) {
        Assert.assertEquals(header.toUpperCase(), orderFulfilmentPage.shouldSeeHeaderInUploadNewCarrierStringPopup(header).toUpperCase());
    }

    @Step
    public void userShouldSeeRespectiveMessageInUploadNewCarrierStringPopup(String message) {
        Assert.assertEquals(message.toUpperCase(), orderFulfilmentPage.shouldSeeRespectiveMessageInUploadNewCarrierStringPopup(message).toUpperCase());

    }

    @Step
    public void userClicksOnYesButtonOfRemoveCarrierStringPopup() {
        orderFulfilmentPage.clicksOnYesButtonOfRemoveCarrierStringPopup();
    }


    @Step
    public void userUpdatesFieldsOfShippingMethod() throws InterruptedException {
        orderFulfilmentPage.updatesFieldsOfShippingMethod();
    }


    @Step
    public void userVerifiesMarketsOnLandingPage(DataTable marketsDataTable) {
        Assert.assertTrue(orderFulfilmentPage.verifiesMarketsOnLandingPage(marketsDataTable));
    }


    @Step
    public void userClickOnFindSiteIdOrCountryDropdown() {
        orderFulfilmentPage.clickOnFindSiteIdOrCountryDropdown();
    }

    @Step
    public void userShouldSeePassedSiteIdsInDropdown(String siteId) {
        Assert.assertTrue(orderFulfilmentPage.shouldSeePassedSiteIdsInDropdown(siteId));
    }


    @Step
    public void userClicksOnExportCsvButton() throws InterruptedException {
        orderFulfilmentPage.clicksOnExportCsvButton();
    }

    @Step
    public void userShouldSeeDownloadedCsvFileDataSameAsAllowOrBlockListTableData(String fileName) throws IOException {
        Assert.assertTrue(orderFulfilmentPage.shouldSeeDownloadedCsvFileDataSameAsAllowOrBlockListTableData(fileName));
    }


    @Step
    public void userClicksOnCloseButtonOfFmOrSmMethod(String configureFmOrSm) {
        orderFulfilmentPage.clicksOnCloseButtonOfFmOrSmMethod(configureFmOrSm);
    }


    @Step
    public void userShouldSeeCarrierStringSnackBarErrorMsg(String errorMsg) {
        Assert.assertEquals(errorMsg.toUpperCase(), orderFulfilmentPage.shouldSeeCarrierStringSnackBarErrorMsg(errorMsg).toUpperCase());
    }

    @Step
    public void userClickOnDismissButtonOfSnackBarErrorMsg() {
        orderFulfilmentPage.clickOnDismissButtonOfSnackBarErrorMsg();
    }

    @Step
    public void userShouldNotSeeCarrierStringSnackBarErrorMsg() {
        Assert.assertFalse(orderFulfilmentPage.shouldNotSeeCarrierStringSnackBarErrorMsg());
    }


    @Step
    public void userClickOnEditButtonOfCarrierStrings() throws InterruptedException {
        orderFulfilmentPage.clickOnEditButtonOfCarrierStrings();
    }

    @Step
    public void userShouldSeeCarrierStringsEditPopup(String carrierStrings) {
        Assert.assertEquals(carrierStrings.toUpperCase(), orderFulfilmentPage.shouldSeeCarrierStringsEditPopup(carrierStrings).toUpperCase());
    }

    @Step
    public void userClickOnEditButtonOnEditItemsPopup() {
        orderFulfilmentPage.clickOnEditButtonOnEditItemsPopup();
    }

    @Step
    public void userClickOnCrossIconOnTextField() {
        orderFulfilmentPage.clickOnCrossIconOnTextField();
    }

    @Step
    public void userShouldNotSeeCarrierStringOnTextBox() {
        Assert.assertEquals("", orderFulfilmentPage.shouldNotSeeCarrierStringOnTextBox());
    }


    @Step
    public void userClickOnCrossIconOfCarrierStringsEditItemsPopup(String carrierStrings) throws InterruptedException {
        orderFulfilmentPage.clickOnCrossIconOfCarrierStringsEditItemsPopup(carrierStrings);
    }


    @Step
    public void userShouldSeeDismissButtonInTheError() {
        Assert.assertTrue(orderFulfilmentPage.shouldSeeDismissButtonInTheError());
    }


    @Step
    public void userClickOnDeleteButtonOfEditItemsPopup() {
        orderFulfilmentPage.clickOnDeleteButtonOfEditItemsPopup();
    }

    @Step
    public void userClickOnCarrierStringsDropdown(String carrierStrings) {
        orderFulfilmentPage.clickOnCarrierStringsDropdown(carrierStrings);
    }

    @Step
    public void userShouldNotSeeDeletedItemInCarrierStringsDropdown(String carrierString) {
        Assert.assertFalse(orderFulfilmentPage.shouldNotSeeDeletedItemInCarrierStringsDropdown(carrierString));
    }


    @Step
    public void userShouldSeeTextBoxPrefilledWithText() {
        orderFulfilmentPage.shouldSeeTextBoxPrefilledWithText();
    }

    @Step
    public void userEditsPrefilledText() {
        orderFulfilmentPage.editsPrefilledText();
    }

    @Step
    public void userClickOnRightTickButtonOfCarrierStringsPopup(String carrierStrings) {
        orderFulfilmentPage.clickOnRightTickButtonOfCarrierStringsPopup(carrierStrings);
    }

    @Step
    public void userShouldSeeChangedTextInEditCarrierStringsPopup(String carrierStrings) {
        Assert.assertTrue(orderFulfilmentPage.shouldSeeChangedTextInEditCarrierStringsPopup(carrierStrings));
    }

    @Step
    public void userShouldSeeChangedTextInCarrierStringsDropdown() {
        Assert.assertTrue(orderFulfilmentPage.shouldSeeChangedTextInCarrierStringsDropdown());
    }


    @Step
    public void userVerifiesFulfilmentMethodsIsDisplayed(String homeDelivery, String clickAndCollect, String pickUpAndDropOff, String digital) {
        Assert.assertEquals(homeDelivery.toUpperCase(), orderFulfilmentPage.verifiesFulfilmentMethodsIsDisplayed(homeDelivery).toUpperCase());
        Assert.assertEquals(clickAndCollect.toUpperCase(), orderFulfilmentPage.verifiesFulfilmentMethodsIsDisplayed(clickAndCollect).toUpperCase());
        Assert.assertEquals(pickUpAndDropOff.toUpperCase(), orderFulfilmentPage.verifiesFulfilmentMethodsIsDisplayed(pickUpAndDropOff).toUpperCase());
        Assert.assertEquals(digital.toUpperCase(), orderFulfilmentPage.verifiesFulfilmentMethodsIsDisplayed(digital).toUpperCase());
    }

    @Step
    public void userEntersRequiredCarrierString() {
        orderFulfilmentPage.entersForRequiredCarrierString();
    }

    @Step
    public void userClickOnCarrierStringSearchButton() {
        orderFulfilmentPage.clickOnCarrierStringSearchButton();
    }

    @Step
    public void userShouldSeeSingleSearchedCarrierString() {
        orderFulfilmentPage.shouldSeeSingleSearchedCarrierString();
    }

    @Step
    public void userEntersPartialCarrierString() {
        orderFulfilmentPage.entersPartialCarrierString();
    }

    @Step
    public void userShouldSeeErrorMsgOnEditItemsPopup(String errorMsg) {
        Assert.assertEquals(errorMsg.toUpperCase(), orderFulfilmentPage.shouldSeeErrorMsgOnEditItemsPopup(errorMsg).toUpperCase());
    }

    @Step
    public void userClearsPrefilledTextOfCarrierString() {
        orderFulfilmentPage.clearsPrefilledTextOfCarrierString();
    }

    @Step
    public void userShouldSeeCrossButtonOfCarrierString(String carrierString) {
        Assert.assertTrue(orderFulfilmentPage.shouldSeeCrossButtonOfCarrierString(carrierString));
    }

    @Step
    public void userShouldSeeRightTickButtonOfCarrierString(String carrierString) {
        Assert.assertTrue(orderFulfilmentPage.shouldSeeRightTickButtonOfCarrierString(carrierString));
    }

    @Step
    public void userClickOnCrossButtonOfCarrierStringField(String carrierString) {
        orderFulfilmentPage.clickOnCrossButtonOfCarrierStringField(carrierString);
    }

    @Step
    public void userShouldSeeNoChangesInCarrierStringTextField(String carrierString) {
        orderFulfilmentPage.shouldSeeNoChangesInCarrierStringTextField(carrierString);
    }

    @Step
    public void userShouldSeePenIconAtTheEndOfCarrierString() {
        Assert.assertTrue(orderFulfilmentPage.shouldSeePenIconAtTheEndOfCarrierString());
    }

    @Step
    public void userClicksOnEditButtonOfMultipleCarrierStrings(String carrierString) {
        orderFulfilmentPage.clicksOnEditButtonOfMultipleCarrierStrings(carrierString);
    }

    @Step
    public void userShouldSeeInlineEditTextCrossAndRightTickButton(String carrierString) {
        orderFulfilmentPage.shouldSeeInlineEditTextCrossAndRightTickButton(carrierString);
    }

    @Step
    public void userShouldSeePassedFields(String memberFixedPriceField, String selectTheTierField) {
        Assert.assertTrue(orderFulfilmentPage.shouldSeePassedFields(memberFixedPriceField));
        Assert.assertTrue(orderFulfilmentPage.shouldSeePassedFields(selectTheTierField));
    }

    @Step
    public void userClearsPrefilledTextOfThresholdAndShipmentUpSellFields() {
        orderFulfilmentPage.clearsPrefilledTextOfThresholdAndShipmentUpSellFields();
    }

    @Step
    public void userStoresAllShippingMethodPositionsUnderPassedShippingMethod(String passedSm) {
        orderFulfilmentPage.storesAllShippingMethodPositionsUnderPassedShippingMethod(passedSm);
    }

    @Step
    public void userClickOnShippingMethodPositionDropdown() throws InterruptedException {
        orderFulfilmentPage.clicksOnCreateShippingMethodPositionDropdown();
    }

    @Step
    public void userShouldSeePositionsFromOneToHundredInSmPositionDropdown() {
        Assert.assertTrue(orderFulfilmentPage.shouldSeePositionsFromOneToHundredInSmPositionDropdown());
    }
    @Step
    public void userShouldSeeErrorMsgOnPassedFieldWithAsteriskSymbol(String fieldName) {
        Assert.assertEquals("rgb(237, 65, 41)", orderFulfilmentPage.checkAsteriskSymbolByGettingRgbColorCodeOfPsuedoElement());
        Assert.assertTrue(orderFulfilmentPage.shouldSeeErrorMsgOnPassedField());
    }
    @Step
    public void userClearsSearchedString() {
        orderFulfilmentPage.clearsSearchedString();
    }
    @Step
    public void userShouldSeeCarrierStringList(){
        orderFulfilmentPage.shouldSeeCarrierStringList();
    }
    @Step
    public void userClicksOnCloseIconOfValidationHeaderPopup() {
        orderFulfilmentPage.clicksOnCloseIconOfValidationHeaderPopup();
    }
    @Step
    public void userClearsValueField() {
        orderFulfilmentPage.clearsValueField();
    }
    @Step
    public void userVerifiesPassedModuleIsDisplayedUnderComnMenu(String moduleName) {
        Assert.assertEquals(moduleName.toUpperCase(), orderFulfilmentPage.verifiesPassedModuleIsDisplayedUnderComnMenu(moduleName));
    }
    @Step
    public void userClickOnFulfilmentModuleToExpand(String fulfilmentModule) {
        orderFulfilmentPage.clickOnFulfilmentTab();
    }
    @Step
    public void userClickOnFulfilmentModuleToCollapse(String fulfilmentModule) {
        orderFulfilmentPage.clickOnFulfilmentTab();
    }
    @Step
    public void userClickOnPassedSubMenuUnderFulfilmentComnMenu(String subMenu) {
        orderFulfilmentPage.goToPassedPageUnderFulfilmentTab();
    }

    @Step
    public void userVerifiesPassedSubMenuIsDisplayedUnderFulfilmentComnMenu(String subMenu) {
        Assert.assertEquals(subMenu.toUpperCase(), orderFulfilmentPage.verifiesPassedSubMenuIsDisplayedUnderFulfilmentComnMenu(subMenu));
    }

    @Step
    public void userVerifiesPassedSubMenuIsHidden(String subMenu) {
        Assert.assertFalse(orderFulfilmentPage.verifiesPassedSubMenuIsHidden(subMenu));
    }
    @Step
    public void userVerifiesPassedMenuIsOnCollapsedMode(String menu) {
        Assert.assertFalse(orderFulfilmentPage.verifiesPassedSubMenuIsHidden("Fulfilment Methods"));
    }
    @Step
    public void userVerifiesComnModulesOrder(DataTable comnModules) {
        orderFulfilmentPage.verifiesComnModulesOrder(comnModules);
    }
    @Step
    public void userVerifiesCarrierStringsShouldBeInSortedOrder() {
        orderFulfilmentPage.verifiesCarrierStringsShouldBeInSortedOrder();
    }
    @Step
    public void userVerifiesCarrierStringIsDeleted() {
        Assert.assertFalse(orderFulfilmentPage.verifiesCarrierStringIsDeleted());
    }
    @Step
    public void userVerifiesCarrierStringsShouldBeInSortedOrderInPassedShippingMethodPage(String passedSmPage) {
        orderFulfilmentPage.verifiesCarrierStringsShouldBeInSortedOrderInPassedShippingMethodPage();
    }
    @Step
    public void userClickOnCarrierStringsDropdownOnPassedSmPage() {
        orderFulfilmentPage.clickOnCarrierStringsDropdownOnPassedSmPage();
    }
    @Step
    public void userClickOnAddItemsButtonOfEditItemsPopup() {
        orderFulfilmentPage.clickOnAddItemsButtonOfEditItemsPopup();
    }

    @Step
    public void userVerifiesErrorMsgOnPassedDeliveryDaysField(String errorMsg, String deliveryDaysField) {
        Assert.assertEquals(errorMsg.toUpperCase(), orderFulfilmentPage.verifiesErrorMsgOnPassedDeliveryDaysField(deliveryDaysField).toUpperCase());
    }

    @Step
    public void userVerifiesPassedErrorMsgOnPassedFieldWithAsteriskSymbol(String errorMsg, String fieldName) {
        Assert.assertEquals("rgb(237, 65, 41)", orderFulfilmentPage.checksAsteriskSymbolByGettingRgbColorCodeOfPsuedoElement(errorMsg, fieldName));
        Assert.assertTrue(orderFulfilmentPage.verifiesErrorMsgOnPassedField(errorMsg, fieldName));
    }
    @Step
    public void userSelectsPassedValueFromDropdown(String value, String fieldName) {
        orderFulfilmentPage.selectsPassedValueFromDropdown(value, fieldName);
    }
    @Step
    public void userClicksOnOperatorDropdown() {
        orderFulfilmentPage.clicksOnOperatorDropdown();
    }
    @Step
    public void userEnterPassedValueInPassedField(String data, String fieldName) {
        orderFulfilmentPage.enterPassedValueInPassedField(data, fieldName);
    }
    @Step
    public void userClicksOnButtonThroughKeyBoard(String key) {
        orderFulfilmentPage.clicksOnButtonThroughKeyBoard(key);
    }
    @Step
    public void userVerifiesAddCarrierStringButtonOnCreateShippingMethodPage() {
        Assert.assertTrue(orderFulfilmentPage.verifiesAddCarrierStringButtonOnCreateShippingMethodPage());
    }

    @Step
    public void userClicksOnCarrierStringsTextOutsideCarrierStringSearchBox() {
        orderFulfilmentPage.clicksOnCarrierStringsTextOutsideCarrierStringSearchBox();
    }
    @Step
    public void userVerifiesEditedCarrierStringIsDisplayed() {
        Assert.assertTrue(orderFulfilmentPage.verifiesEditedCarrierStringIsDisplayed());
    }
    @Step
    public void userDeletesAllCarrierStringsExceptNewlyCreated(String newlyCreatedCarrierString)  {
        orderFulfilmentPage.deletesAllCarrierStringsExceptNewlyCreated(newlyCreatedCarrierString);
    }
    @Step
    public void userVerifiesDeletedCarrierStringsIsNotDisplayed() {
        Assert.assertTrue(orderFulfilmentPage.verifiesDeletedCarrierStringsIsNotDisplayed()==1);
    }
    @Step
    public void userChecksAtleastTwoAllowedOrBlockedItemsIsPresent() {
        orderFulfilmentPage.checksAtleastTwoAllowedOrBlockedItemsIsPresent();
    }
    @Step
    public void userAddsTwoItemsIfNotPresent(int expectedNoOfItems) throws InterruptedException {
        orderFulfilmentPage.addsTwoItemsIfNotPresent(expectedNoOfItems);
    }
    @Step
    public void userValidatesByDefaultAllowedOrBlockedTableColumnIsSortedInAscendingOrder(String allowOrBlockItemTableColumnName, String sortingOrder) {
        orderFulfilmentPage.validatesAllowedOrBlockedTableColumnIsSortedAscendingOrDescendingOrde(allowOrBlockItemTableColumnName, sortingOrder);
    }
    @Step
    public void userClicksOnAllowedOrBlockedTableColumn(String allowOrBlockItemTableColumn) {
        orderFulfilmentPage.clicksOnAllowedOrBlockedTableColumn(allowOrBlockItemTableColumn);
    }
    @Step
    public void userValidatesAllowedOrBlockedTableColumnIsSortedInAscendingOrDescendingOrder(String allowOrBlockItemTableColumnName, String sortingOrder) {
        orderFulfilmentPage.validatesAllowedOrBlockedTableColumnIsSortedAscendingOrDescendingOrde(allowOrBlockItemTableColumnName, sortingOrder);
    }
    @Step
    public void userClicksOnLinkOfShippingMethod(String link, String fulfilmentMethod) {
        orderFulfilmentPage.clicksOnLinkOfShippingMethod(link, fulfilmentMethod);
    }

    @Step
    public void userVerifiesDeleteButtonIsVisible() {
        Assert.assertTrue(orderFulfilmentPage.verifiesDeleteButtonIsVisible());
    }
    @Step
    public void userClicksOnFulfilmentModuleButton(String button) {
        orderFulfilmentPage.clicksOnFulfilmentModuleButton(button);
    }

    @Step
    public void userVerifiesDeleteButtonIsNotDisplayed() {
        Assert.assertFalse(orderFulfilmentPage.verifiesDeleteButtonIsVisible());
    }

    @Step
    public void userGetsExistingCustomIdOfRandomShippingMethod(String customId) {
        orderFulfilmentPage.getsExistingCustomIdOfRandomShippingMethod();
    }

    @Step
    public void userVerifiesNewlyCreatedShippingMethodCustomIdNotMatchedWithOther(String newCustomId) throws InterruptedException {
        Assert.assertTrue(orderFulfilmentPage.verifiesNewlyCreatedShippingMethodCustomIdNotMatchedWithOther(newCustomId));
    }

    @Step
    public void userVerifiesFulfilmentMethodFieldsIsDisplayed(DataTable fulfilmentMethodFieldsDataTable) {
        Assert.assertTrue(orderFulfilmentPage.verifiesFulfilmentMethodFieldsIsDisplayed(fulfilmentMethodFieldsDataTable));
    }
    @Step
    public void userStoresValuesOfFulfilmentMethodFields(DataTable fulfilmentMethodFieldsDataTable) {
        orderFulfilmentPage.storesValuesOfFulfilmentMethodFields(fulfilmentMethodFieldsDataTable);
    }
    @Step
    public void userVerifiesStoredFulfilmentMethodFieldsValuesAreSame() {
        Assert.assertTrue(orderFulfilmentPage.verifiesStoredFulfilmentMethodFieldsValuesAreSame());
    }

    @Step
    public void userEnablesFulfilmentMethodWithOneActiveShippingMethod(String fulfilmentMethod, String activeState) throws InterruptedException {
        orderFulfilmentPage.enablesFulfilmentMethodWithOneActiveShippingMethod(fulfilmentMethod, activeState);
    }

    @Step
    public void userValidatesOnlySelectedShippingMethodIsDisplayed() {
        orderFulfilmentPage.validatesOnlySelectedShippingMethodIsDisplayed();
    }

    @Step
    public void userVerifiesErrorMessageIsDisplayedOnFieldOrNot(String errorMessage, String displayState, String fieldName) {
        if(displayState.equalsIgnoreCase("isDisplayed"))
            Assert.assertTrue(orderFulfilmentPage.verifiesErrorMessageIsDisplayedOnField(errorMessage, fieldName));
        else
            Assert.assertFalse(orderFulfilmentPage.verifiesErrorMessageIsDisplayedOnField(errorMessage, fieldName));
    }

    @Step
    public void userDisableAllShippingMethodsOfFulfilmentMethod(String fulfilmentMethod) {
        orderFulfilmentPage.disableAllShippingMethodsOfFulfilmentMethod(fulfilmentMethod);
    }
    @Step
    public void userValidatesColumnDataIsDisplayedInBelowOrder(String columnName, DataTable columnDataTable) {
        orderFulfilmentPage.validatesColumnDataIsDisplayedInBelowOrder(columnName, columnDataTable);
    }

    @Step
    public void userValidatesShippingMethodsCountIsZero(String activeOrInactiveShippingMethod) {
        Assert.assertTrue(orderFulfilmentPage.validatesShippingMethodsCountIsZero(activeOrInactiveShippingMethod));
    }
}


package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.PaymentsPage;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PaymentsSteps {

    PaymentsPage paymentsPage;

    @Step
    public void userValidatesChannelsIsDisplayedInPaymentChannelDropdown() {
        paymentsPage.validatesChannelsIsDisplayedInPaymentChannelDropdown();
    }
    @Step
    public void userVerifiesPassedValueIsDisplayedOnPassedField(String passedValue, String fieldName) {
        Assert.assertEquals(passedValue, paymentsPage.verifiesPassedValueIsDisplayedOnPassedField(fieldName));
    }

    @Step
    public void userClickOutsideField(String field) {
        paymentsPage.clickOutsideField(field);
    }
}

package com.adidas.tpAdidasSerenity.fe.cucumberSteps;

import com.adidas.tpAdidasSerenity.fe.pageObjects.BasketAdminPageCommon;
import com.adidas.tpAdidasSerenity.fe.pageObjects.ProductsPage;
import jxl.read.biff.BiffException;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class ProductsSteps {

    ProductsPage productsPage;
    private static final Logger log = LoggerFactory.getLogger(ProductsSteps.class);
    BasketAdminPageCommon basketAdminPageCommon = new BasketAdminPageCommon();


    @Step
    public void userValidatesStoredAttributesOnProductsPage(String attributesCsvFile, String region) throws IOException, BiffException {
        Assert.assertTrue(productsPage.validatesStoredAttributesOnProductsPage(attributesCsvFile, region));
    }

    @Step
    public void userSelectsPassedAttributesFromExcel(Integer noOfAttributes, String excelFile) throws BiffException, IOException {
        productsPage.selectsPassedAttributesFromExcel(noOfAttributes, excelFile);
    }

    @Step
    public void userVerifiesSelectedAttributes(int noOfAttributesSelected, String excelFile) throws BiffException, IOException {
        Assert.assertTrue(productsPage.verifiesSelectedAttributes(noOfAttributesSelected, excelFile));
    }


    @Step
    public void userVerifiesDefaultAttributes(String defaultAttributesExcelFile) throws BiffException, IOException {
        Assert.assertTrue(productsPage.verifiesDefaultAttributes(defaultAttributesExcelFile));
    }


    @Step
    public void userVerifiesOtherCheckboxesInDisabledState() {
        productsPage.verifiesOtherCheckboxesInDisabledState();
    }

    @Step
    public void userShouldSeeValidCountriesInProductPageMarketDropdown() {
        productsPage.shouldSeeValidCountriesInProductPageMarketDropdown();
    }


    @Step
    public void userVerifiesAvailableSearchResult(String searchedProductId) {
        Assert.assertEquals(searchedProductId.toUpperCase(), productsPage.verifiesAvailableSearchResult(searchedProductId));
    }


    @Step
    public void userShouldSeePassedModuleWithMarketSelectionDropdownAtTopRightSide(String comNextModule, String region) {
        Assert.assertEquals(region.toUpperCase(), basketAdminPageCommon.checkRegionInLeftCornerDropdown(comNextModule));
    }

    @Step
    public void userSelectsNumFromStoredPaginationFileAndValidates(String paginationDropdownNoCsvFile) {
        productsPage.selectsNumFromStoredPaginationFileAndValidates(paginationDropdownNoCsvFile);
    }


    @Step
    public void userVerifiesProductIdLessThanOrEqualToSearchedProductId(String multipleProductIdCsvFile) {
        productsPage.verifiesProductIdLessThanOrEqualToSearchedProductId(multipleProductIdCsvFile);
    }


    @Step
    public void userSelectsPassedProductIdsOnProductDetailPage(int noOfProductIds) {
        productsPage.selectsPassedProductIdsOnProductDetailPage(noOfProductIds);
    }

    @Step
    public void userSelectsPassedAttributesOption(String passedAttributes) {
        productsPage.selectsPassedAttributesOption(passedAttributes);
    }


    @Step
    public void userVerifiesPassedCsvFileExportedSuccessfully(String exportedCsvFileName) throws IOException, InterruptedException {
        productsPage.verifiesPassedCsvFileExportedSuccessfully(exportedCsvFileName);
    }

    @Step
    public void userVerifiesSameNoOfAttributesAndProductIdInExportedFile(String exportedCsvFileName) throws BiffException, IOException {
        productsPage.verifiesSameNoOfAttributesAndProductIdInExportedFile(exportedCsvFileName);
    }


    @Step
    public void userSelectsPassedAttribute(String passedAttribute) {
        productsPage.selectsPassedAttribute(passedAttribute);
    }

    @Step
    public void userClickOnExpandIconOfPassedAttribute(String passedAttribute) {
        productsPage.clickOnExpandIconOfPassedAttribute(passedAttribute);
    }

    @Step
    public void userVerifiesCompleteDataOnProductAttributeExpandPopup(String passedAttribute) {
        Assert.assertTrue(productsPage.verifiesCompleteDataOnProductAttributeExpandPopup(passedAttribute) >= 1);
    }

    @Step
    public void userVerifiesSearchedInvalidProductIdInErrorPopup(String invalidProductId) {
        productsPage.verifiesSearchedInvalidProductIdInErrorPopup(invalidProductId);
    }

    @Step
    public void userVerifiesSearchedMultipleInvalidProductIdsInErrorPopup(String invalidMultipleProductIds) {
        productsPage.verifiesSearchedInvalidProductIdInErrorPopup(invalidMultipleProductIds);
    }


    @Step
    public void userChecksExportedDataWithUIData(String exportedFileName, String region) throws IOException, InterruptedException {
        Assert.assertTrue(productsPage.checksExportedDataWithUIData(exportedFileName, region));
    }


    @Step
    public void userClickOnBackButtonOfProductsDetailPage(String products) {
        productsPage.clickOnBackButton(products);
    }

    @Step
    public void userVerifiesSameFieldsOnExcelFileAndSingleProductDetailPageUI(int sheetNo, String singleProductDetailPageFieldsExcelFile) throws BiffException, IOException {
        Assert.assertTrue(productsPage.verifiesSameFieldsOnExcelFileAndSingleProductDetailPageUI(sheetNo, singleProductDetailPageFieldsExcelFile));
    }

    @Step
    public void userVerifiesThatUserIsInPassedPage(int pageNo) {
        Assert.assertEquals(""+pageNo, productsPage.verifiesThatUserIsInPassedPage(pageNo));
    }
    @Step
    public void userOpensPassedTabInNewPage(String tabName) {
        productsPage.opensPassedTabInNewPage(tabName);
    }
    @Step
    public void userClosesAndRedirectsBackToPreviousTab() {
        productsPage.closesAndRedirectsBackToPreviousTab();
    }

    @Step
    public void userVerifiesStateOfProductPageAttributes(int noOfAttributes, String productPageAttributesExcelFile, String checkboxState) throws BiffException, IOException, InterruptedException {
        if(checkboxState.equalsIgnoreCase("isChecked"))
            Assert.assertTrue(productsPage.verifiesStateOfProductPageAttributes(noOfAttributes, productPageAttributesExcelFile));
        else
            Assert.assertFalse(productsPage.verifiesStateOfProductPageAttributes(noOfAttributes, productPageAttributesExcelFile));
    }
}

package com.adidas.tpAdidasSerenity.fe.cucumberSteps;


import com.adidas.tpAdidasSerenity.fe.pageObjects.TaxationPageCA;
import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class TaxationStepsCA {
    TaxationPageCA taxationPageCA;
    private static final Logger log = LoggerFactory.getLogger(TaxationStepsCA.class);
    CommonUtils commonUtils = new CommonUtils();
    int numberOfProvinces;

    @Step
    public void userGoToTaxationScreen() throws IOException {
        taxationPageCA.goToTaxationScreen();
    }

    @Step
    public void userVerifiesAllProvincesWithTaxRates() {
        numberOfProvinces = taxationPageCA.verifyAllProvincesWithTaxRates();
        Assert.assertTrue(numberOfProvinces > 1);
    }

   @Step
    public void userVerifiesSingleProvinceData() throws InterruptedException {
        commonUtils.waits(3);
        numberOfProvinces = taxationPageCA.verifyAllProvincesWithTaxRates();
        log.info(String.valueOf(numberOfProvinces));
        Assert.assertEquals(1, numberOfProvinces);
    }

    @Step
    public void userVerifiesErrorMessage(String expectedErrorMessage) {
        Assert.assertEquals(expectedErrorMessage, taxationPageCA.seesErrorMessage());
    }

    @Step
    public void userIsOnTaxationPageInCanadaRegion() throws IOException {
        userGoToTaxationScreen();
    }

    @Step
    public void userShouldNotSeeTaxationTabInLeftNavMenu() {
        Assert.assertFalse(taxationPageCA.shouldNotSeeTaxationTabInLeftNavMenu());
    }

    @Step
    public void userChecksSumOfDifferentTaxRates() throws InterruptedException {
        Assert.assertTrue(taxationPageCA.checksSumOfDifferentTaxRates());
    }

    @Step
    public void userVerifiesProvinceCode(String provinceCode) {
        taxationPageCA.verifiesProvinceCode(provinceCode);
    }
}


package com.adidas.tpAdidasSerenity.fe.cucumberSteps;


import com.adidas.tpAdidasSerenity.fe.pageObjects.TaxationPageWE;
import net.thucydides.core.annotations.Step;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaxationStepsWE {

    TaxationPageWE taxationPageWE;
    private static final Logger log = LoggerFactory.getLogger(TaxationStepsWE.class);

    @Step
    public void userVerifiesValidEuCountriesInAlphabeticalOrder() {
        taxationPageWE.verifiesValidEuCountriesInAlphabeticalOrder();
    }

    @Step
    public void userSelectCountry(String country) {
        taxationPageWE.selectCountry(country);
    }

    @Step
    public void userVerifiesSameCountryAndCountryCode(String country, String countryCode) {
        taxationPageWE.verifiesSameCountryAndCountryCode(country, countryCode);
    }

    @Step
    public void userDoNotSelectSiteID() {
        Assert.assertEquals("", taxationPageWE.doNotSelectSiteID());
    }

    @Step
    public void userClickOnTaxRatesPageCountry(String country) {
        taxationPageWE.clickOnTaxRatesPageCountry(country);
    }
}


pageObjects

package com.adidas.tpAdidasSerenity.fe.pageObjects;


import au.com.bytecode.opencsv.CSVReader;
import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import io.cucumber.datatable.DataTable;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import net.thucydides.core.pages.PageObject;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.junit.Assert;
import org.openqa.selenium.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class AuditTrailPage extends PageObject {

    CommonUtils commonUtils = new CommonUtils();
    private static final Logger log = LoggerFactory.getLogger(AuditTrailPage.class);
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");
    Properties config = PropertyFileReader.loadFile("config", "config.properties");
    String adidasEmailId = config.getProperty("adidasemailid");
    String columnData = null, actualFieldData, actualStatus;

    public void goToAuditTrailPage() throws InterruptedException {
        commonUtils.waitTillElementIsVisible(locators.getProperty("audiTrailTab"), 20);
        commonUtils.waitForElementClick(locators.getProperty("audiTrailTab"));
    }

    public boolean shouldSeeAuditTrailOnLeftSideMenu() {
        return commonUtils.elementIsDisplayed(locators.getProperty("auditTrail"));
    }

    public boolean shouldSeeAuditTrailOnTopLeftInPage() {
        return commonUtils.elementIsDisplayed(locators.getProperty("auditTrailInPage"));
    }


    public void clicksOnDownwardArrow() {
        commonUtils.click(locators.getProperty("firstRowArrow"));
    }

    public boolean shouldSeeDetailsSectionExpanded() {
        return commonUtils.elementIsDisplayed(locators.getProperty("details"));
    }


    private void selctsPageSizeTen() {
        commonUtils.scrollAndClick(locators.getProperty("pageNumberDropdownButton"));
        commonUtils.click(locators.getProperty("pageSizeTen"));
    }

    public void entersTextInField(String text, Integer num) {
        selctsPageSizeTen();
        log.info("value of i: " + num);
        commonUtils.waitTillElementIsClickable("(//input[@placeholder='Search'])[" + num + "]", 10);
        commonUtils.click("(//input[@placeholder='Search'])[" + num + "]");
        if(text.equalsIgnoreCase("adidas-email"))
            commonUtils.enterText("(//input[@placeholder='Search'])[" + num + "]", text.replace(text, adidasEmailId));
        else
            commonUtils.enterText("(//input[@placeholder='Search'])[" + num + "]", text);
    }

    public void clicksOnSearchButton(Integer num) {
        commonUtils.click("(//input[@placeholder='Search'])[" + num + "]//parent::div//following::div");
    }

    public void displayedWithSearchedFieldRecords(String field, String expectedText) {
        log.info("Field  is: " + field);
        if (field.equalsIgnoreCase(commonUtils.getText("//label[text()='" + field + "']"))) {
            List<WebElement> fieldsDataList = commonUtils.getWebElements("//td//div[text()='" + expectedText + "']");
            compareExpectedAndActualFields(fieldsDataList, expectedText);
        }

    }

    private void compareExpectedAndActualFields(List<WebElement> fieldsDataList, String expectedText) {
        for (int i = 0; i < fieldsDataList.size(); i++) {
            actualFieldData = fieldsDataList.get(i).getText();
            log.info(actualFieldData);
            Assert.assertEquals(expectedText.toUpperCase(), actualFieldData.toUpperCase());
        }
    }

    public void clicksOnCancelButtonOfSearchTextBox(Integer num) {
        clicksOnSearchButton(num);
    }

    public void displayedWithPartialSearchedFieldRecords(String field, String expectedText) {
        if (field.equalsIgnoreCase("email")) {
            List<WebElement> emails = commonUtils.getWebElements(locators.getProperty("emailList"));

            for (int i = 0; i < emails.size(); i++) {
                actualFieldData = emails.get(i).getText();
                int length = expectedText.length();
                actualFieldData = actualFieldData.substring(0, length);
                log.info("Substring: " + actualFieldData.toUpperCase());
                Assert.assertEquals(expectedText.toUpperCase(), actualFieldData.toUpperCase());
            }

        }
        if (field.equalsIgnoreCase("area")) {
            List<WebElement> areas = commonUtils.getWebElements(locators.getProperty("areaList"));

            for (int i = 0; i < areas.size(); i++) {
                actualFieldData = areas.get(i).getText();
                actualFieldData = actualFieldData.substring(8, 12);
                log.info("Substring: " + actualFieldData.toUpperCase());
                Assert.assertEquals(expectedText.toUpperCase(), actualFieldData.toUpperCase());
            }
        }
        if (field.equalsIgnoreCase("details")) {
            List<WebElement> details = commonUtils.getWebElements(locators.getProperty("detailList"));

            for (int i = 0; i < details.size(); i++) {
                actualFieldData = details.get(i).getText();
                actualFieldData = actualFieldData.substring(1, 4);
                log.info("Substring: " + actualFieldData.toUpperCase());
                Assert.assertEquals(expectedText.toUpperCase(), actualFieldData.toUpperCase());
            }

        }

    }


    public String textRemovedFromSearchTextBox(Integer num) {
        commonUtils.click("(//input[@placeholder='Search'])[" + num + "]");
        return commonUtils.getText("(//input[@placeholder='Search'])[" + num + "]");
    }


    public String shouldBeDisplayedWithErrorMessage() {
        return commonUtils.getText(locators.getProperty("errorMsg"));
    }


    public String verifiesTriggeredDataInAuditTrailColumn(String columnName, int rowNo) {
        return getColumnData(columnName, rowNo, locators.getProperty("tableColumnNamesListLoc"));
    }

    private String getColumnData(String columnName, int rowNo, String tableColumnNamesListLoc) {
        indexOfColumn = commonUtils.getIndexOfRequiredColumn(columnName, tableColumnNamesListLoc);
        columnData = "(//table//tbody//tr//td[" + (indexOfColumn + 2) + "])["+rowNo+"]";
        return commonUtils.getText(columnData);
    }

    public void verifiesCorrectStatusInAuditTrailColumn(String expectedSuccess, String expectedFailed, String columnName, int rowNo) {
        actualStatus = getColumnData(columnName, rowNo, locators.getProperty("tableColumnNamesListLoc"));
        if (actualStatus.equalsIgnoreCase(expectedSuccess)) {
            Assert.assertEquals(expectedSuccess, actualStatus);
        } else {
            Assert.assertEquals(expectedFailed, actualStatus);
        }
    }

    public String shouldSeeBlankInPassedColumn(String columnName, int rowNo) {
        return getColumnData(columnName, rowNo, locators.getProperty("tableColumnNamesListLoc"));
    }

    public String SeePassedActionsInActionDropdown(String arg) {
        return commonUtils.getText("//div[text()='" + arg + "']");
    }


    public void clickOnAuditTrailFilter() {
        commonUtils.click(locators.getProperty("AuditTrailFilterButton"));
    }


    public void selectPassedAttributeNameInPassedField(String passedAttributeName) {
        commonUtils.click("//div[@overflow]//*[text()='" + passedAttributeName + "']");
    }


    public void shouldSeePassedAuditTrailRecordsAction(String actionName, String fieldName) throws InterruptedException {
        List<WebElement> actionsFieldData = commonUtils.getWebElements("//td//div[text()='" + actionName + "']");
        compareExpectedAndActualFields(actionsFieldData, actionName);
    }

    public void entersTextInSearchBox(String text) {
        commonUtils.click(locators.getProperty("searchFieldsTextBox"));
        commonUtils.enterText(locators.getProperty("searchFieldsTextBox"), text);
    }

    public void clicksOnSearchButtonOfDomainSearchBox() throws InterruptedException {
        commonUtils.click(locators.getProperty("fieldsSearchButton"));
    }

    public void entersTextInActionsSearchBox(String text) {
        commonUtils.click(locators.getProperty("searchActionsTextBox"));
        commonUtils.enterText(locators.getProperty("searchActionsTextBox"), text);
    }

    public void clicksOnSearchButtonOfActionsSearchBox() throws InterruptedException {
        commonUtils.click(locators.getProperty("actionsSearchButton"));
    }


    public String shouldSeePassedAttributeNameInPassedFieldDropdown(String arg) {
        return commonUtils.getText("//div[text()='" + arg + "']");
    }

    public void selectAction(String arg) {
        commonUtils.click("//div[@overflow]//*[text()='" + arg + "']");
    }

    public void clickOnRandomButton() {
        commonUtils.click("//*[text( )='Refine results']");
    }

    private List<String> getActionsList() {
        List<java.lang.String> getActionsList = new ArrayList<>();
        getActionsList.add("All");
        getActionsList.add("Create allow item");
        getActionsList.add("Create block item");
        getActionsList.add("Edit allow item");
        getActionsList.add("Edit block item");
        getActionsList.add("Delete allow item");
        getActionsList.add("Delete block item");
        return getActionsList;
    }


    int indexOfColumn;

    public boolean ShouldSeeTheAuditTrailRecordsWithDesiredValues() {
        List<String> desiredActionListFromFilter = getActionsList();

        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Actions", locators.getProperty("tableColumnNamesListLoc"));
        log.info(String.valueOf(indexOfColumn));
        commonUtils.waitTillElementIsVisible("//table//tbody//tr//td[" + (indexOfColumn + 2) + "]", 15);
        List<WebElement> auditTrailActionListFromTable = commonUtils.getWebElements("//table//tbody//tr//td[" + (indexOfColumn + 2) + "]");
        boolean flag = true;
        for (int i = 0; i < auditTrailActionListFromTable.size(); i++) {
            boolean found = false;
            String actionNameFromTable = auditTrailActionListFromTable.get(i).getText();
            for (int j = 1; j <= desiredActionListFromFilter.size() - 1; j++) {
                //log.info("Site Id from filter: "+allSiteIdsListFromFilter.get(j));
                if (actionNameFromTable.equalsIgnoreCase(desiredActionListFromFilter.get(j))) {
                    found = true;
                    break;
                }
            }

            if (found) {
                log.info(actionNameFromTable + " is present within given Actions list");
            } else {
                flag = false;
                log.error(actionNameFromTable + " is not from the given Actions list");
            }
        }
        return flag;
    }


    public boolean shouldNotSeeSearchedStringInViewSearchBox(String basketAdminLandingPageColumnsCsvFile) {
        boolean isFound = true;
        try {
            // Create an object of filereader
            // class with CSV file as a parameter.
            FileReader filereader = new FileReader("./src/test/resources/data/csvFiles/" + basketAdminLandingPageColumnsCsvFile);

            // create csvReader object passing
            // file reader as a parameter
            CSVReader csvReader = new CSVReader(filereader);
            String[] nextRecord;

            // we are going to read data line by line
            while ((nextRecord = csvReader.readNext()) != null) {
                for (String cell : nextRecord) {
                    log.info("Data from file: " + cell);
                    commonUtils.enterText(locators.getProperty("viewSearchBox"), cell);
                    if (commonUtils.elementIsDisplayed(locators.getProperty("searchedStringLoc"))) {
                        log.info("Searched basket admin landing page data is visible: " + cell);
                        isFound = false;
                    }
                    commonUtils.deleteTextByKeys(locators.getProperty("viewSearchBox"));
                }
            }


        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
        return isFound;
    }


    public boolean shouldSeeSearchedStringDynamically(String basketAdminColumnsCsvFile) {
        boolean isFound = true;
        try {
            // Create an object of filereader
            // class with CSV file as a parameter.
            FileReader filereader = new FileReader("./src/test/resources/data/csvFiles/" + basketAdminColumnsCsvFile);

            // create csvReader object passing
            // file reader as a parameter
            CSVReader csvReader = new CSVReader(filereader);
            String[] nextRecord;

            // we are going to read data line by line
            while ((nextRecord = csvReader.readNext()) != null) {
                for (String cell : nextRecord) {
                    log.info("Data from file: " + cell);
                    commonUtils.enterText(locators.getProperty("viewSearchBox"), cell);
                    if (!commonUtils.getText(locators.getProperty("searchedStringLoc")).equalsIgnoreCase(cell)) {
                        log.info("Data from file: " + cell + "is not matching with Data from UI: " + commonUtils.getText(locators.getProperty("searchedStringLoc")));
                        isFound = false;
                    }
                    commonUtils.deleteTextByKeys(locators.getProperty("viewSearchBox"));
                }
            }

        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
        return isFound;
    }


    public void shouldSeeProductIdAndSelectedAttributesInDetailsColumn(String productId, String passedAttributeExcelFile, int rowNo, String detailsColumn) throws BiffException, IOException {
        String[] selectedAttributesList = commonUtils.getText(getColumnData(detailsColumn, rowNo, locators.getProperty("tableColumnNamesListLoc"))).split("&");

        File inputWorkbook = new File("./src/test/resources/data/excelFiles/" + passedAttributeExcelFile);
        Workbook wb;
        wb = Workbook.getWorkbook(inputWorkbook);

        Sheet sheet = wb.getSheet(0);
        int totalNumberOfColumns = sheet.getColumns();
        int i = 0;
        boolean flag = true;

        while (flag) {
            if (i == 0) {
                String[] productIdAndFirstAttributeArray = selectedAttributesList[i].split("\\+");
                for (int j = 0; j < productIdAndFirstAttributeArray.length; j++) {
                    if (j == 0) {
                        Assert.assertEquals(productId.toUpperCase().trim(), productIdAndFirstAttributeArray[j].toUpperCase().trim());
                    } else {
                        for (int m = 0; m < totalNumberOfColumns; m++) {
                            for (int n = 1; n < 2; n++) {
                                Cell cell = sheet.getCell(m, n);
                                Assert.assertEquals(cell.getContents().toUpperCase().trim(), productIdAndFirstAttributeArray[j].toUpperCase().trim());
                            }
                        }
                    }
                }
                i++;
            } else {
                for (int p = 0; p < totalNumberOfColumns; p++) {
                    for (int q = 2; q < selectedAttributesList.length + 1; q++) {
                        Cell cell = sheet.getCell(p, q);
                        Assert.assertEquals(cell.getContents().toUpperCase().trim(), selectedAttributesList[i].toUpperCase().trim());
                        i++;
                    }
                }
                flag = false;
            }
        }
    }

    public void enterPassedTextInField(String passedText, int fieldNo) {
        commonUtils.click("(//input[@placeholder='Search'])[" + fieldNo + "]");
        commonUtils.enterText("(//input[@placeholder='Search'])[" + fieldNo + "]", passedText);
    }

    public void selectsPassedStatus(String status) {
        commonUtils.click(locators.getProperty("randomElement"));
        commonUtils.click("//label//div[text()='" + status + "']//preceding-sibling::div");
    }

    public String shouldSeeDomainFilterValueSetToAll() {
        return commonUtils.getAttribute(locators.getProperty("domainAuditTrailFilterText"), "value");
    }

    public String shouldSeeActionFilterValueSetToAll() {
        return commonUtils.getAttribute(locators.getProperty("actionsAuditTrailFilterText"), "value");
    }

    public boolean shouldSeeSuccessActionStatusDeselected() {
        return commonUtils.elementIsDisplayed(locators.getProperty("successRadioButtonCheck"));
    }

    public boolean shouldSeeFailedActionStatusDeselected() {
        return commonUtils.elementIsDisplayed(locators.getProperty("failedRadioButtonCheck"));
    }

    public String shouldSeeFromDateRangeResetAndDisplayedBlank() {
        return commonUtils.getAttribute(locators.getProperty("auditTrailFromDate"), "value");
    }

    public String shouldSeeToDateRangeResetAndDisplayedBlank() {
        return commonUtils.getAttribute(locators.getProperty("auditTrailToDate"), "disabled");
    }

    public void shouldSeeAggregatedStatusCountIsSameAsPaginationCount(String status) {
        String[] totalRecords = commonUtils.getText(locators.getProperty("auditTrailPaginationRecords")).split(" ");
        Assert.assertEquals(commonUtils.getText("//label[text()='" + status + "']//parent::div//p"), totalRecords[3].substring(1));
    }

    public void clicksOnPassedRowChevron(int rowNo) {
        commonUtils.click("(//table//tbody//tr//td[1]//button)["+rowNo+"]");
    }

    public boolean shouldSeePassedColumnJsonResponseDataAsPerThePassedRowTrigger(int rowNo) {
        commonUtils.waitTillElementIsVisible(locators.getProperty("auditTrailJsonResponseLoc"), 15);
        String auditTrailJsonResponse = locators.getProperty("auditTrailJsonResponseLoc");
        boolean triggerDataAndJsonResponseDataCheck = true;

        JSONParser parser = new JSONParser();
        try {
            Object obj = parser.parse(commonUtils.getText(auditTrailJsonResponse));
            JSONObject auditTrailColumnsData = (JSONObject) obj;

            List<String> columnDataFromTrigger = new ArrayList<>();
            addDataToColumnDataFromTrigger(columnDataFromTrigger, rowNo);

            List<String> columnDataFromJsonResponse = new ArrayList<>();
            addDataToColumnDataFromJsonResponse(columnDataFromJsonResponse, auditTrailColumnsData);

            for(int i=0; i<columnDataFromTrigger.size(); i++)
            {
                if(!columnDataFromTrigger.get(i).equalsIgnoreCase(columnDataFromJsonResponse.get(i)))
                {
                    triggerDataAndJsonResponseDataCheck = false;
                    log.error("There is mismatch in trigger data: "+columnDataFromTrigger.get(i)+ ", and Json response data: "+columnDataFromJsonResponse.get(i));
                }
            }
            columnDataFromTrigger.clear();
            columnDataFromJsonResponse.clear();
            commonUtils.click("(//table//tbody//tr//td[1])["+rowNo+"]");

            return triggerDataAndJsonResponseDataCheck;
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return false;
    }

    private void addDataToColumnDataFromJsonResponse(List<String> columnDataFromJsonResponse, JSONObject auditTrailColumnsData) {
        columnDataFromJsonResponse.add((String) auditTrailColumnsData.get("area"));
        columnDataFromJsonResponse.add((String) auditTrailColumnsData.get("email"));
        columnDataFromJsonResponse.add((String) auditTrailColumnsData.get("action"));
        columnDataFromJsonResponse.add((String) auditTrailColumnsData.get("domain"));
        columnDataFromJsonResponse.add((String) auditTrailColumnsData.get("status"));
        /*JSONObject detailsObject = (JSONObject) auditTrailColumnsData.get("details");
        columnDataFromJsonResponse.add((String) detailsObject.get("info"));*/
    }

    private void addDataToColumnDataFromTrigger(List<String> columnDataFromTrigger, int rowNo) {
        columnDataFromTrigger.add(getColumnData("area", rowNo, locators.getProperty("tableColumnNamesListLoc")));
        columnDataFromTrigger.add(getColumnData("email", rowNo, locators.getProperty("tableColumnNamesListLoc")));
        columnDataFromTrigger.add(getColumnData("actions", rowNo, locators.getProperty("tableColumnNamesListLoc")));
        columnDataFromTrigger.add(getColumnData("domain", rowNo, locators.getProperty("tableColumnNamesListLoc")));
        columnDataFromTrigger.add(getColumnData("status", rowNo, locators.getProperty("tableColumnNamesListLoc")));
        //columnDataFromTrigger.add(getColumnData("details", rowNo, locators.getProperty("tableColumnNamesListLoc")));
    }

    public void shouldSeePassedFilterDataInDropdown(DataTable filterData) {
        List<List<String>> filterDataDataTable = filterData.asLists(String.class);
        List<WebElement> filterDataWebElementList = commonUtils.getWebElements(locators.getProperty("filterDropdownDataLoc"));
        List<String> filterDataUIStringsList = new ArrayList<>();
        commonUtils.addWebElementListToStringsList(filterDataUIStringsList, filterDataWebElementList);
        for(List<String> filterDataBEList: filterDataDataTable)
        {
            Assert.assertEquals(filterDataBEList, filterDataUIStringsList);
        }
        commonUtils.click(locators.getProperty("randomElement"));
    }


    public boolean verifiesSelectedAuditTrailFilterDropdownValueOnAuditTrailTable(String dropdownValueOne, String dropdownValueTwo, String dropdownFieldName) {
        List<WebElement> fieldDataWebElementList = commonUtils.getWebElements("//td//div[text()='" + dropdownFieldName + "']");
        List<String> fieldDataStringsList = new ArrayList<>();
        commonUtils.addWebElementListToStringsList(fieldDataStringsList, fieldDataWebElementList);

        boolean checkUIDataAndBEData = true;
        for (String fieldData: fieldDataStringsList) {
            if(!( fieldData.equalsIgnoreCase(dropdownValueOne) || fieldData.equalsIgnoreCase(dropdownValueTwo) ))
            {
                log.info("UI data is not same as BE data: "+fieldData);
                checkUIDataAndBEData = false;
            }
        }
        return checkUIDataAndBEData;
    }

    public String verifiesTriggeredDataInAuditTrailJsonResponse(String auditTrailJsonResponseField) {
        commonUtils.waitTillElementIsVisible(locators.getProperty("auditTrailJsonResponseLoc"), 15);
        String auditTrailJsonResponse = locators.getProperty("auditTrailJsonResponseLoc");

        JSONParser parser = new JSONParser();
        try {
            Object obj = parser.parse(commonUtils.getText(auditTrailJsonResponse));
            JSONObject auditTrailColumnsData = (JSONObject) obj;
            return (String) auditTrailColumnsData.get(auditTrailJsonResponseField);
        } catch (ParseException e) {
            log.error("Failed to parse Json response");
            e.printStackTrace();
        }
        return null;
    }

}


package com.adidas.tpAdidasSerenity.fe.pageObjects;

import au.com.bytecode.opencsv.CSVReader;
import com.adidas.tpAdidasSerenity.fe.cucumberSteps.CommonSteps;
import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import com.adidas.tpAdidasSerenity.fe.utility.enums.CommonEnum;
import com.adidas.tpAdidasSerenity.fe.utility.enums.PageValidationEnum;
import net.thucydides.core.annotations.DefaultUrl;
import net.thucydides.core.pages.PageObject;
import net.thucydides.core.util.EnvironmentVariables;
//import net.thucydides.core.util.SystemEnvironmentVariables;
import net.thucydides.core.environment.SystemEnvironmentVariables;

import org.junit.Assert;
import org.openqa.selenium.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.interactions.Actions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.*;
import java.util.List;
import java.util.concurrent.TimeUnit;


@DefaultUrl("https://comn-stg.admin.deu01.k8s.anteater.dub.aws.k8s.3stripes.net/admin/ca/login?returnUrl=%2Fca")
public class BasketAdminPageCA extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(BasketAdminPageCA.class);
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");

    CommonUtils commonUtils = new CommonUtils();
    CommonPage commonPage = new CommonPage();
    CommonSteps commonSteps = new CommonSteps();

    static boolean checkBrowserSession = false;
    static int successAndUnSuccessDataCount = 0, rowCount = 1, calculateOnce = 0, basketListBasketIdIndex = 0, successCount = 0, unSuccessCount = 0;
    int noOfDays = 30, expectedNextPage, expectedPreviousPage;
    String strLine, currentPage, searchId, firstId, customerIdSearchBox, customerIdSearchButton, incompleteOrderId,
            defaultChannelId, defaultExportStatus, defaultSiteId;


    public void doLogin() throws Exception {

        if (this.getDriver().toString().equals("Uninitialised WebDriverFacade")) {
            checkBrowserSession = false;
            log.info("Opened new browser");
        }
        String adidasUrl = PropertyFileReader.loadFile("config", "config.properties").getProperty("url");
        this.getDriver().manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
        //LOGIN THROUGH AUTHENTICATOR
        if (adidasUrl.equalsIgnoreCase("https://qa.api.3stripes.net/admin/ca/login?returnUrl=%2Fca")) {
            if (!checkBrowserSession) {
                openAndMaximize();
                log.info("**************");
                FileInputStream fstream = new FileInputStream("./src/test/resources/data/cookies/UsingAuthenticatorCookie.txt");
                BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

                this.getDriver().manage().deleteAllCookies();

                while ((strLine = br.readLine()) != null) {
                    // Format: ck.getName() + ";" + ck.getValue() + ";" + ck.getDomain() + ";" + ck.getPath() + ";"+ ck.getExpiry() + ";" + ck.isSecure();
                    String[] cookieValues = strLine.split(";");
                    Cookie cookie = new Cookie.Builder(cookieValues[0], cookieValues[1]).domain(cookieValues[2]).isHttpOnly(true)
                            .path(cookieValues[3]).isSecure(Boolean.getBoolean(cookieValues[5])).build();
                    this.getDriver().manage().addCookie(cookie);
                }

                this.getDriver().get("https://qa.api.3stripes.net/admin/ca/mf/commerce-next/order-fulfilment/configure?siteId=adidas-CA&comNextRegion=ca");
                //Close the input stream
                fstream.close();
                checkBrowserSession = true;

            } else {
                this.getDriver().get("https://qa.api.3stripes.net/admin/ca/mf/commerce-next/order-fulfilment/configure?siteId=adidas-CA&comNextRegion=ca");
            }
        }
        //LOGIN THROUGH OTP
        else {
            if (!checkBrowserSession) {
                openAndMaximize();
                log.info("**************");
                FileInputStream fstream = new FileInputStream("./src/test/resources/data/cookies/UsingOTPCookie.txt");
                BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

                this.getDriver().manage().deleteAllCookies();

                while ((strLine = br.readLine()) != null) {
                    // Format: ck.getName() + ";" + ck.getValue() + ";" + ck.getDomain() + ";" + ck.getPath() + ";"+ ck.getExpiry() + ";" + ck.isSecure();
                    String[] cookieValues = strLine.split(";");
                    Cookie cookie = new Cookie.Builder(cookieValues[0], cookieValues[1]).domain(cookieValues[2]).isHttpOnly(true)
                            .path(cookieValues[3]).isSecure(Boolean.getBoolean(cookieValues[5])).build();
                    this.getDriver().manage().addCookie(cookie);
                }

                this.getDriver().get("https://comn-stg.admin.deu01.k8s.anteater.dub.aws.k8s.3stripes.net/admin/ca/mf/commerce-next/checkout?comNextRegion=ca");
               /*
                BECAUSE NEW MARKET REGION SELECTION DROPDOWN IMPLEMENTATION IS OUT OF SCOPE FOR NOW, AND IT WILL BE USED IN FUTURE.
                commonUtils.click(locators.getProperty("regionDropdown"));
                commonUtils.click(canadaRegion);
                commonUtils.click(locators.getProperty("continueButton"));
                */

                //Close the input stream
                fstream.close();
                checkBrowserSession = true;

            } else {
                this.getDriver().get("https://comn-stg.admin.deu01.k8s.anteater.dub.aws.k8s.3stripes.net/admin/ca/mf/commerce-next/checkout?comNextRegion=ca");
            }
        }
    }

    public void openAndMaximize() {

        //Code to maximize browser windows on all available platforms
        EnvironmentVariables environmentVariables = SystemEnvironmentVariables.createEnvironmentVariables();
        String executionPlatform = environmentVariables.getProperty("te.execution.platform");
        String userAgent = (String) ((JavascriptExecutor) this.getDriver()).executeScript("return navigator.userAgent;");

        //Logging INFO
        System.out.println("\n INFO (Open and Maximize)");
        System.out.println("\n ------------------------");
        System.out.println("\n EXECUTION PLATFORM: " + executionPlatform);
        System.out.println("\n USER AGENT: " + userAgent);

        if (!executionPlatform.isEmpty()) {
            if ("selenoid".equals(executionPlatform)) {
                //Reading resolution properties
                int selenoidWidth = Integer.parseInt(environmentVariables.getProperty("browser.width"));
                int selenoidHeight = Integer.parseInt(environmentVariables.getProperty("browser.height"));
                this.getDriver().manage().window().setSize(new Dimension(selenoidWidth, selenoidHeight));
            } else {
                this.getDriver().manage().window().maximize();
            }
        } else {
            this.getDriver().manage().window().maximize();
        }
        open();
    }


    public void goToBasketAdminPage() throws Exception {
        //getCountryNameInDropdown();
        commonUtils.waitTillElementIsClickable(locators.getProperty("basketAdminTab"), 20);
        commonUtils.waitTillElementIsVisible(locators.getProperty("basketAdminTab"), 20);
        commonUtils.waitForElementClick(locators.getProperty("basketAdminTab"));
    }

    public void getCountryNameInDropdown() {
        log.info("country name: " + commonUtils.getAttribute("//input[@width]//following-sibling::div//input", "value"));
    }

    public String basketAdminPageIsVisible() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("basketText"), 20);
        log.info(commonUtils.getText(locators.getProperty("basketText")).toUpperCase());
        return commonUtils.getText(locators.getProperty("basketText")).toUpperCase();
    }


    public void clickFilter() throws Exception {
        commonUtils.waitTillElementIsClickable(locators.getProperty("basketFilterIcon"), 30);
        commonUtils.waitTillElementIsVisible(locators.getProperty("basketFilterIcon"), 30);
        commonUtils.click(locators.getProperty("basketFilterIcon"));
    }


    public void selectsColumnFromViewDropdown(String columnFromViewDropdown) throws Exception {
        commonUtils.click(locators.getProperty("viewDropdown"));
        commonUtils.click("//div[text()='" + columnFromViewDropdown + "']");
        commonUtils.click("//div");
    }

    public String filterWindowIsVisible() throws Exception {
        return commonUtils.getText(locators.getProperty("filterText")).toUpperCase();
    }



    public void capturesCurrentPageNumber() {
        WebElement pageNumber = commonUtils.getWebElement(locators.getProperty("pageNumberTextBox"));
        currentPage = pageNumber.getAttribute("value");
    }


    public void selectSPageSizeTen() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("pageNumberDropdownButton"), 30);
        commonUtils.click(locators.getProperty("pageNumberDropdownButton"));
        commonUtils.click(locators.getProperty("pageSizeTen"));
    }


    public boolean ChecksNextArrowIsEnabled() throws Exception {
        capturesCurrentPageNumber();
        expectedNextPage = Integer.parseInt(currentPage) + 1;
        WebElement nextArrow = commonUtils.getWebElement(locators.getProperty("paginationNextArrow"));
        return nextArrow.isEnabled();
    }

    public void clicksOnNextArrow() throws Exception {
        commonUtils.waitTillElementIsVisible(locators.getProperty("paginationNextArrow"), 10);
        commonUtils.scrollAndClick(locators.getProperty("paginationNextArrow"));
    }


    public void nextPageIsVisible() throws Exception {
        WebElement pageNumber = commonUtils.getWebElement(locators.getProperty("pageNumberTextBox"));
        log.info("The input value: " + pageNumber.getAttribute("value"));
        Assert.assertEquals(expectedNextPage, Integer.parseInt(pageNumber.getAttribute("value")));
    }



    public void entersTwoInTextBox(Integer num) throws Exception {
        commonUtils.waitTillElementIsVisible(locators.getProperty("pageNumberTextBox"), 15);
        commonUtils.enterTextByKeys(locators.getProperty("pageNumberTextBox"), Integer.toString(num));
        commonUtils.getWebElement(locators.getProperty("pageNumberTextBox")).sendKeys(Keys.ENTER);
    }


    public boolean ChecksPreviousArrowIsEnabled() throws Exception {
        capturesCurrentPageNumber();
        expectedPreviousPage = Integer.parseInt(currentPage) - 1;
        WebElement previousArrow = commonUtils.getWebElement(locators.getProperty("paginationPreviousArrow"));
        return previousArrow.isEnabled();
    }

    public void clicksOnPreviousArrow() throws Exception {
        commonUtils.click(locators.getProperty("paginationPreviousArrow"));
    }

    public void previousPageIsVisible() throws Exception {
        WebElement pageNumber = commonUtils.getWebElement(locators.getProperty("pageNumberTextBox"));
        log.info("The input value: " + pageNumber.getAttribute("value"));
        Assert.assertEquals(expectedPreviousPage, Integer.parseInt(pageNumber.getAttribute("value")));
    }


    public void clicksOnDropdown() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("pageNumberDropdownButton"), 15);
        commonUtils.scrollAndClick(locators.getProperty("pageNumberDropdownButton"));
    }

    public void selectPageNumFromDropdown(Integer int1) {
        commonUtils.waitTillElementIsClickable("//div[@value='" + int1 + "']", 10);
        commonUtils.click("//div[@value='" + int1 + "']");
    }

    public void shouldSeeRecordsLessThenOrEqualToSelectedNo(String pageSize, List<WebElement> noOfRecordsList) {
        Assert.assertTrue(noOfRecordsList.size() <= Integer.parseInt(pageSize));
    }

    public void shouldSeeSelectedPageSizeInDropdown(Integer numObj) {
        commonUtils.waitTillElementIsVisible(locators.getProperty("noOfRecordsLoc"), 15);
        List<WebElement> noOfRecordsList = commonUtils.getWebElements(locators.getProperty("noOfRecordsLoc"));
        shouldSeeRecordsLessThenOrEqualToSelectedNo(String.valueOf(numObj), noOfRecordsList);

        WebElement pageSize = commonUtils.getWebElement(locators.getProperty("pageNumberInDropdown"));
        int expectedPageSize = numObj;
        Assert.assertEquals(expectedPageSize, Integer.parseInt(pageSize.getAttribute("value")));
    }

    public void verifiesRecordsLessThanOrEqualToRecordsPerPageIsDisplayed(int noOfRecords) {
        commonUtils.waitTillElementIsVisible(locators.getProperty("noOfRecordsLoc"), 15);
        List<WebElement> noOfRecordsList = commonUtils.getWebElements(locators.getProperty("noOfRecordsLoc"));
        shouldSeeRecordsLessThenOrEqualToSelectedNo(String.valueOf(noOfRecords), noOfRecordsList);
    }

    public void verifiesRecordsInPaginationDropdownIsDisplayed(Integer noOfRecords) {
        WebElement pageSize = commonUtils.getWebElement(locators.getProperty("pageNumberInDropdown"));
        int expectedPageSize = noOfRecords;
        Assert.assertEquals(expectedPageSize, Integer.parseInt(pageSize.getAttribute("value")));
    }

    public void shouldSeeDefaultChannelAndExportStatus(String defaultChannel, String defExportStatus) {
        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Channel", locators.getProperty("tableColumnNamesListLoc"));
        defaultChannelId = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
        List<WebElement> channelId = commonUtils.getWebElements(defaultChannelId);


        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Export Status", locators.getProperty("tableColumnNamesListLoc"));
        defaultExportStatus = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
        List<WebElement> exportStatus = commonUtils.getWebElements("//table//tbody//tr//td[" + (indexOfColumn + 2) + "]");

        log.info(String.valueOf(channelId.size()));
        log.info(String.valueOf(exportStatus.size()));

        if (channelId.size() <= 0 || exportStatus.size() <= 0) {
            Assert.fail("No data found or page still loading");
        } else {
            for (int i = 1; i <= channelId.size() - 1; i++) {
                Assert.assertEquals(defaultChannel.toUpperCase(), channelId.get(i).getText().toUpperCase());
                Assert.assertEquals(defExportStatus.toUpperCase(), exportStatus.get(i).getText().toUpperCase());
            }
        }
    }

    public void shouldSeeChannelIdAs(String expectedChannelId) {
        WebElement channelId = commonUtils.getWebElement(locators.getProperty("filterChannel"));
        Assert.assertEquals(expectedChannelId.toUpperCase(),  channelId.getAttribute("value").toUpperCase());
    }

    public void verifiesMarketAs(String expectedMarket) {
        WebElement market = commonUtils.getWebElement(locators.getProperty("filterMarketText"));
        Assert.assertEquals(expectedMarket.toUpperCase(), market.getAttribute("value").toUpperCase());
    }

    public void shouldViewExportStatusAs(String expectedExportStatus) {
        WebElement exportStatus = commonUtils.getWebElement("//label[text()='Export Status']//preceding-sibling::div//parent::div//div[text()='"+expectedExportStatus+"']");
        Assert.assertEquals(expectedExportStatus, exportStatus.getText());
    }


    public void clicksOnViewButton() throws Exception {
        commonUtils.waitTillElementIsClickable(locators.getProperty("firstViewButton"), 20);
        commonUtils.click(locators.getProperty("firstViewButton"));
    }


    public String isOnBasketJsonPopup() throws Exception {
        log.info(commonUtils.getText(locators.getProperty("basketInspectText")).toUpperCase());
        return commonUtils.getText(locators.getProperty("basketInspectText")).toUpperCase();
    }


    public void clicksOnCloseButtonOfBasketJsonPopup() {
        commonUtils.click(locators.getProperty("basketJsonPopupCloseIcon"));
    }


    public String shouldSeeBasketListPage() throws Exception {
        log.info(commonUtils.getText(locators.getProperty("basketText")).toUpperCase());
        return commonUtils.getText(locators.getProperty("basketText")).toUpperCase();
    }


    public void selectExportStatus(String exportStatus) {
        if (exportStatus.equalsIgnoreCase("EXPORT IN PROGRESS")) {
            commonUtils.click("//div[text()='IN PROGRESS']//preceding-sibling::div[@type='checkbox']");
        } else {
            commonUtils.click("//div[text()='" + exportStatus + "']//preceding-sibling::div[@type='checkbox']");
        }
        commonUtils.click("//div[text()='EXPORT FAILED']//preceding-sibling::div[@type='checkbox']");
    }


    public void clicksOnApplyButton() throws Exception {
        commonUtils.click(locators.getProperty("randomElement"));
        commonUtils.click(locators.getProperty("basketFilterApplyButton"));
    }

    public void shouldSeeSelectedExportStatus(String expectedExportStatus) {

        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Export Status", locators.getProperty("tableColumnNamesListLoc"));
        defaultExportStatus = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
        commonUtils.waitTillElementIsVisible(defaultExportStatus, 15);
        List<WebElement> exportStatus = commonUtils.getWebElements(defaultExportStatus);

        log.info(String.valueOf(exportStatus.size()));
        for (int i = 1; i <= exportStatus.size() - 1; i++) {
            Assert.assertEquals(expectedExportStatus.replaceAll(" ", "_"), exportStatus.get(i).getText());
        }

    }



    public void clicksOnBasketIdSearchBox() throws Exception {
        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Basket ID", locators.getProperty("tableColumnNamesListLoc"));
        firstId = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";

        commonUtils.waitTillElementIsVisible(firstId, 15);
        searchId = commonUtils.getText(firstId);
        log.info("First Basket Id: " + searchId);

        commonUtils.click(locators.getProperty("basketIdSearchBox"));
    }


    public void entersBasketId() throws Exception {
        commonUtils.enterText(locators.getProperty("basketIdSearchBox"), searchId);
    }

    public void clicksOnSearchButtonOfBasketId() throws Exception {
        commonUtils.click(locators.getProperty("basketIdSearchButton"));
    }


    public void shouldSeeRespectiveSearchedBasketId() throws Exception, AssertionError {
        commonUtils.waitTillElementIsVisible(commonUtils.getText(firstId), 15);
        log.info("Searched Basket Id: " + commonUtils.getText(firstId));
        Assert.assertEquals(searchId, commonUtils.getText(firstId));
    }



    public void clicksOnOrderIdSearchBox() throws Exception {
        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Order No.", locators.getProperty("tableColumnNamesListLoc"));
        firstId = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";

        commonUtils.waitTillElementIsVisible(firstId, 15);
        searchId = commonUtils.getText(firstId);
        log.info("First Order Id: " + searchId);

        commonUtils.click(locators.getProperty("orderIdSearchBox"));
    }

    public void entersOrderId() throws Exception {
        commonUtils.enterText(locators.getProperty("orderIdSearchBox"), searchId);
    }

    public void clicksOnSearchButtonOfOrderId() throws Exception {
        commonUtils.click(locators.getProperty("orderIdSearchButton"));
    }

    public void shouldSeeRespectiveSearchedOrderId() throws Exception, AssertionError {
        commonUtils.waitTillElementIsVisible(commonUtils.getText(firstId), 15);
        log.info("Searched Order Id: " + commonUtils.getText(firstId));
        Assert.assertEquals(searchId, commonUtils.getText(firstId));
    }



    public void clicksOnCustomerIdSearchBox() throws Exception {
        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Customer ID", locators.getProperty("tableColumnNamesListLoc"));
        firstId = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";

        commonUtils.waitTillElementIsVisible(firstId, 15);
        searchId = commonUtils.getText(firstId);
        log.info("First Customer Id: " + searchId);

        String columnLoc = "//table//thead//tr//th//label[@color='secondary']";
        List<WebElement> columnList = commonUtils.getWebElements(columnLoc);

        String basketIdColumn = "A";
        String customerIdColumn = "B";

        for (int i = 0; i < columnList.size(); i++) {
            if (columnList.get(i).getText().equalsIgnoreCase("Basket ID")) {
                basketIdColumn = columnList.get(i).getText();
            }
            if (columnList.get(i).getText().equalsIgnoreCase("Customer ID")) {
                customerIdColumn = columnList.get(i).getText();
            }
        }

        log.info("Basket Id Text is:" + basketIdColumn + "Customer Id Text is:" + customerIdColumn);

        if (basketIdColumn.equalsIgnoreCase("Basket ID") && customerIdColumn.equalsIgnoreCase("Customer ID")) {
            customerIdSearchBox = "(//table//thead//tr//th//input[@placeholder='Search'])[3]";
            customerIdSearchButton = "(//table//thead//tr//th//input[@placeholder='Search'])[3]//parent::div//following::div";
        } else {
            customerIdSearchBox = "(//table//thead//tr//th//input[@placeholder='Search'])[2]";
            customerIdSearchButton = "(//table//thead//tr//th//input[@placeholder='Search'])[2]//parent::div//following::div";
        }

        log.info(customerIdSearchBox);
        log.info(customerIdSearchButton);
        commonUtils.click(customerIdSearchBox);
    }

    public void entersCustomerId() throws Exception {
        commonUtils.enterText(customerIdSearchBox, searchId);
    }

    public void clicksOnSearchButtonOfCustomerId() throws Exception {
        commonUtils.click(customerIdSearchButton);
    }

    public void shouldSeeRespectiveSearchedCustomerId() throws Exception, AssertionError {
        commonUtils.waitTillElementIsVisible(commonUtils.getText(firstId), 15);
        log.info("Searched Customer Id: " + commonUtils.getText(firstId));
        Assert.assertEquals(searchId, commonUtils.getText(firstId));
    }


    public void entersIncompleteOrderId() {
        incompleteOrderId = searchId.substring(0, 5);
        commonUtils.enterText(locators.getProperty("orderIdSearchBox"), incompleteOrderId);
    }

    public void canSeeRespectiveErrorMessageInAPopup(String actualErrorMessage) {
        Assert.assertEquals(commonUtils.getText(locators.getProperty("errorMessageAfterSearch")), actualErrorMessage);
    }


    int indexOfColumn;

    public void userShouldSeeDefaultCriteria(String expectedChannelId, String expectedSiteId, String expectedExportStatus) {

        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Channel", locators.getProperty("tableColumnNamesListLoc"));
        defaultChannelId = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
        List<WebElement> channelId = commonUtils.getWebElements(defaultChannelId);

        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Site ID", locators.getProperty("tableColumnNamesListLoc"));
        defaultSiteId = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
        List<WebElement> siteId = commonUtils.getWebElements(defaultSiteId);

        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Export Status", locators.getProperty("tableColumnNamesListLoc"));
        defaultExportStatus = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
        List<WebElement> exportStatus = commonUtils.getWebElements(defaultExportStatus);

        log.info(String.valueOf(channelId.size()));
        log.info(String.valueOf(siteId.size()));
        log.info(String.valueOf(exportStatus.size()));

        if (channelId.size() <= 0 || siteId.size() <= 0 || exportStatus.size() <= 0) {
            Assert.fail("No data found or page still loading");
        } else {
            for (int i = 1; i <= channelId.size() - 1; i++) {
                Assert.assertEquals(expectedChannelId, channelId.get(i).getText());
                Assert.assertEquals(expectedSiteId, siteId.get(i).getText());
                Assert.assertEquals(expectedExportStatus, exportStatus.get(i).getText());
            }
        }

    }


    public void selectsALLExportStatus() {
        commonUtils.click(locators.getProperty("exportStatusAll"));
    }


    public void clicksOnLastSyncButton() {
        commonUtils.click(locators.getProperty("lastSyncButton"));
    }

    public String shouldSeeLastSyncTime(int minute) {
        String actualLastSyncText = commonUtils.getText("//p[text()='Basket']//parent::div//parent::div//label[text()='LAST: "+minute+" MIN AGO']").toUpperCase();
        log.info(actualLastSyncText);
        return actualLastSyncText;
    }


    public void selectFilters() throws InterruptedException {
        commonUtils.click(locators.getProperty("readyForExportExportStatus"));
        commonPage.selectionOfFromAndToDateForGivenRange(noOfDays);
    }

    public void seeDefaultChannelSiteExportStatus() {

        channelIdStateCheck();
        //siteIdStateCheck();

        WebElement defaultExportStatus = commonUtils.getWebElement(locators.getProperty("filterExportStatus"));
        //  disbled.isEnabled();
        log.info(String.valueOf(defaultExportStatus.isEnabled()));
        if (defaultExportStatus.isEnabled()) {
            log.info("Export Failed is selected");
        } else {
            log.info("Export Failed is NOT selected");
        }
    }

    private void channelIdStateCheck() {
        WebElement defaultChannelId = commonUtils.getWebElement(locators.getProperty("filterChannel"));
        log.info(String.valueOf(defaultChannelId.isEnabled()));
        if (defaultChannelId.isEnabled()) {
            log.info("HypePlatform is NOT disabled");
        } else {
            log.error("HypePlatform is disabled");
        }
    }


    public void clicksFilterWindowCloseicon() {
        commonUtils.click(locators.getProperty("filterWindowCloseicon"));
    }


    public void selectFirstCheckBox() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("firstBasketCheckBox"), 30);
        commonUtils.click(locators.getProperty("firstBasketCheckBox"));
    }

    public void checksReExportButtonState() {
        WebElement reExportButton = commonUtils.getWebElement(locators.getProperty("basketReExportButton"));
        log.info(String.valueOf(reExportButton.isEnabled()));
        if (reExportButton.isEnabled()) {
            log.info("Re-Export button is enabled");
        } else {
            log.error("Re-Export Button is disabled");
        }
    }


    public void deselectFirstCheckbox() throws Exception {
        selectFirstCheckBox();
        selectFirstCheckBox();
    }


    public void selectsBasketWithPassedStatus() {
        log.info("checking success message scenario in 10 iterations in ableToSeeSuccessMessageInAPopup(successMessage) method");

    }

    public void clicksOnReExportButton() {
        log.info("checking success message scenario in 10 iterations in ableToSeeSuccessMessageInAPopup(successMessage) method");

    }

    public void ableToSeeSuccessMessageInAPopup() {
        //sorting();
        for (int i = 1; i <= 10; i++) {
            commonUtils.waitTillElementIsVisible("(//tr//td[1])[num]".replace("num", "" + i), 20);
            commonUtils.click("(//tr//td[1])[num]".replace("num", "" + i));
            commonUtils.click(locators.getProperty("basketReExportButton"));

            String reExportMessage = commonUtils.getText(locators.getProperty("singleBasketReExportHeader"));
            if (reExportMessage.equals("RE-EXPORT SUCCESSFUL")) {
                String actualSuccessMessage = commonUtils.getText(locators.getProperty("singleBasketReExportSuccessMsg"));
                Assert.assertEquals("The successfully re-exported basket's export status will have changed.", actualSuccessMessage);
                commonUtils.click(locators.getProperty("singleBasketReExportCloseIcon"));
                log.info("RE-EXPORT SUCCESSFUL");
                break;
            } else {
                String actualErrorMessage = commonUtils.getText(locators.getProperty("singleBasketReExportUnsuccessMsg"));
                Assert.assertEquals("Something went wrong with the Basket end point. Please try again later.", actualErrorMessage);
                log.error("RE-EXPORT UNSUCCESSFUL");
                commonUtils.click(locators.getProperty("singleBasketReExportCloseIcon"));
                if (i == 10) {
                    Assert.assertEquals("Something went wrong with the Basket end point.", actualErrorMessage);
                }
            }
        }
    }


    public void selectsMoreThanOneBasket(int noOfBaskets) {
        //sorting();
        for (int i = 1; i <= noOfBaskets; i++) {
            commonUtils.waitTillElementIsVisible("(//tr//td[1])[num]".replace("num", "" + i), 30);
            commonUtils.click("(//tr//td[1])[num]".replace("num", "" + i));
        }
    }

    public void clicksOnTheReExportButton() {
        commonUtils.click(locators.getProperty("basketReExportButton"));
    }

    public void shouldBeDisplayedWithBatchReExportPopup() {

        commonUtils.waitTillElementIsVisible(locators.getProperty("multipleBasketReExportHeader"), 20);
        String batchReexportMessage = commonUtils.getText(locators.getProperty("multipleBasketReExportHeader"));
        String actualBatchReexportMessage = batchReexportMessage.toUpperCase();
        Assert.assertEquals("BATCH RE-EXPORT RESULTS", actualBatchReexportMessage);

        List<WebElement> successMessage = commonUtils.getWebElements(locators.getProperty("successOrUnsuccessHeader"));
        Assert.assertTrue(successMessage.size() > 0);

    }


    public void SeeCorrectHeadrsInPopup() {
        List<WebElement> successOrUnsuccessMessageCount = commonUtils.getWebElements(locators.getProperty("successOrUnsuccessHeader"));
        log.info(String.valueOf(successOrUnsuccessMessageCount.size()));
        if (successOrUnsuccessMessageCount.size() == 1) {
            checkingHeadersOfBatchReExportPopup(2);
        } else {
            checkingHeadersOfBatchReExportPopup(2);
            checkingHeadersOfBatchReExportPopup(3);
        }
    }


    public void clicksOnDownloadIcon() throws InterruptedException {

        commonUtils.click(locators.getProperty("multipleBasketsDownloadButton"));
        commonUtils.waits(2);
    }

    public void shouldBeAbleToDownloadCsvFile(String fileName) throws IOException, InterruptedException {
        commonUtils.waits(5);
        JavascriptExecutor jse = (JavascriptExecutor) this.getDriver();

        // Check if file exists
        System.out.println(jse.executeScript("browserstack_executor: {\"action\": \"fileExists\"}"));

        // Get file properties
        System.out.println(jse.executeScript("browserstack_executor: {\"action\": \"getFileProperties\"}"));

        // Get file content. The content is Base64 encoded
        String base64EncodedFile = (String) jse.executeScript("browserstack_executor: {\"action\": \"getFileContent\"}");

        // Decode the content to Base64
        byte[] data = Base64.getDecoder().decode(base64EncodedFile);
        //Copying downloaded csv file in browserstack into BatchReexportDownloadedFile.csv file in local machine
        OutputStream stream = new FileOutputStream("./src/test/resources/data/downloadedfiles/" + fileName);
        stream.write(data);
        stream.close();

    }


    public void clicksOnCloseIconOfBatchReExportPopup() {
        commonUtils.click(locators.getProperty("multipleBasketsReExportCloseIcon"));
        commonUtils.waitTillElementIsVisible(locators.getProperty("noOfRecordsLoc"), 20);
    }


    public void shouldSeeCorrectHeaderDetailsAndCountOfBasketsInCsvFile(String fileName) {

        List<WebElement> successOrUnsuccessMessageCount = commonUtils.getWebElements(locators.getProperty("successOrUnsuccessHeader"));
        log.info(String.valueOf(successOrUnsuccessMessageCount.size()));
        if (successOrUnsuccessMessageCount.size() == 1) {
            checkBasketsHeaderAndData(2, fileName);
        } else {
            checkBasketsHeaderAndData(2, fileName);
            checkBasketsHeaderAndData(3, fileName);
        }
    }


    public void checkBasketsHeaderAndData(int number, String fileName) {
        List<WebElement> basketListHeaders = commonUtils.getWebElements("(//table)[num]//th".replace("num", "" + number));
        //basketListHeaders.add(commonUtils.getWebElement("//p[text()='Batch Re-Export results']"));
        log.info(String.valueOf(basketListHeaders.size()));
        List<WebElement> basketListBasketIds = commonUtils.getWebElements("(//table)[num]//tr//td[1]".replace("num", "" + number));

        log.info(String.valueOf(basketListBasketIds.size()));
        try {
            FileReader filereader = new FileReader("./src/test/resources/data/downloadedfiles/" + fileName);

            CSVReader csvReader = new CSVReader(filereader);
            String[] nextRecord;

            while ((nextRecord = csvReader.readNext()) != null) {
                successAndUnSuccessDataCount++;
                if (rowCount == 1) {
                    checkingHeadersOfBatchReExportPopup(number);
                } else {
                    for (String cell : nextRecord) {
                        if (cell.equalsIgnoreCase(basketListBasketIds.get(basketListBasketIdIndex).getText())) {
                            log.info("Inside if loop " + basketListBasketIds.get(basketListBasketIdIndex).getText());
                            Assert.assertEquals(basketListBasketIds.get(basketListBasketIdIndex).getText().toUpperCase(), cell.toUpperCase());
                            basketListBasketIdIndex++;
                            log.info("Basket List BasketId Index value is: " + basketListBasketIdIndex);
                        }
                        if (basketListBasketIdIndex == basketListBasketIds.size()) {
                            basketListBasketIdIndex = 0;
                            break;
                        }
                    }
                    if (calculateOnce == 0) {
                        if (nextRecord[5].length() > 0) {
                            unSuccessCount++;
                            log.info("unsuccss count is: " + unSuccessCount);
                        } else {
                            successCount++;
                            log.info("succss count is: " + successCount);
                        }
                    }

                }
                rowCount++;
            }

            calculateOnce++;

            if (commonUtils.elementIsDisplayed(locators.getProperty("multipleBasketsUnsuccessCount"))) {
                List<WebElement> unSuccessMessage = commonUtils.getWebElements(locators.getProperty("multipleBasketsUnsuccessCount"));
                if (unSuccessMessage.size() > 0) {
                    Assert.assertEquals(commonUtils.getText(locators.getProperty("multipleBasketsUnsuccessCount")).toUpperCase(), "" + unSuccessCount + " BASKETS");
                }
            }

            if (commonUtils.elementIsDisplayed(locators.getProperty("multipleBasketsSuccessCount"))) {
                List<WebElement> successMessage = commonUtils.getWebElements(locators.getProperty("multipleBasketsSuccessCount"));
                if (successMessage.size() > 0) {
                    Assert.assertEquals(commonUtils.getText(locators.getProperty("multipleBasketsSuccessCount")).toUpperCase(), "" + successCount + " BASKETS");
                }
            }
            log.info("Count is: " + successAndUnSuccessDataCount);
            Assert.assertEquals(unSuccessCount + successCount + 1, successAndUnSuccessDataCount);
            successAndUnSuccessDataCount = 0;
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void checkingHeadersOfBatchReExportPopup(int number) {
        List<WebElement> basketListHeaders = commonUtils.getWebElements("(//table)[num]//th".replace("num", "" + number));
        //basketListHeaders.add(commonUtils.getWebElement("//p[text()='Batch Re-Export results']"));
        log.info(String.valueOf(basketListHeaders.size()));
        for (int i = 0; i < basketListHeaders.size(); i++) {
            if (basketListHeaders.get(i).isDisplayed()) {
                log.info(basketListHeaders.get(i).getText());
            }
        }

    }


    public void doNotSelectOverridePopupCheckbox() {
        WebElement checkbx1 = commonUtils.getWebElement(locators.getProperty("overrideBasketCheckBox"));
        if (checkbx1.isSelected()) {
            log.info("Checkbox IS selected");
        } else {
            log.error("Checkbox IS NOT selected");
        }
    }

    public void overridePopupDisplay() {
        WebElement overrideBasketHeaderElement = commonUtils.getWebElement(locators.getProperty("overrideBasketHeader"));
        log.info("User is on" + overrideBasketHeaderElement.getText() + "Page");
    }


    public void clicksOnYesButton() {
        commonUtils.click(locators.getProperty("overrideBasketYesButton"));
        commonUtils.click(locators.getProperty("basketJsonPopupCloseIcon"));
    }


    public void seeOverrideBasketPopupClosed() {
        log.info("User is on" + commonUtils.getText(locators.getProperty("basketText")) + "Page");
    }


    public void clickOverridePopupCancelButton() throws Exception {
        commonUtils.click(locators.getProperty("cancelButton"));
    }

    public void closesOverrideBasketPopup() {
        log.info("User is on" + commonUtils.getText(locators.getProperty("basketText")) + "Page");
    }

    public boolean selectedCheckBoxNotRemoved() throws Exception {
        String firstCheckboxLocCheck = "//tr//td//div//div//div";
        return commonUtils.elementIsDisplayed(firstCheckboxLocCheck);
    }

    public void onLandingPage() {
        log.info("User is on" + commonUtils.getText(locators.getProperty("basketText")) + "Page");
    }


    public void selectAllCheckBoxInHeader() throws InterruptedException {
        commonUtils.waits(5);
        commonUtils.click(locators.getProperty("bulkSelectCheckBox"));

    }


    public void shouldSeeCorrectBasketCountInFooter(Integer countInFooter) {
        commonUtils.waitTillElementIsVisible(locators.getProperty("basketCountInFooter"), 15);
        log.info(commonUtils.getText(locators.getProperty("basketCountInFooter")));
        Assert.assertEquals("" + countInFooter + " baskets selected", commonUtils.getText(locators.getProperty("basketCountInFooter")));
    }


    public String shouldSeeOverrideBasketHeader() {
        return commonUtils.getText(locators.getProperty("overrideBasketHeader"));
    }


    public String shouldSeeOverrideBasketMessage() {
        return commonUtils.getText(locators.getProperty("overrideBasketMessage"));
    }


    public boolean checkBoxIsVisible() {
        return commonUtils.elementIsDisplayed(locators.getProperty("overrideBasketCheckBox"));
    }

    public String shouldSeeOverrideCheckBoxMessage() {
        return commonUtils.getText(locators.getProperty("overrideBasketCheckBoxMsg"));
    }

    public boolean cancelButtonIsVisible() {
        return commonUtils.elementIsDisplayed(locators.getProperty("cancelButton"));
    }

    public boolean yesButtonIsVisible() {
        return commonUtils.elementIsDisplayed(locators.getProperty("overrideBasketYesButton"));
    }


    public void closesTheBrowser() {
        commonUtils.closesTheBrowser();
    }

    public void relaunchesTheBrowser() {
        log.info("Opens new browser");
    }


    public void clicksOnCancelIconOfBasketIdSearchBox() throws Exception {
        commonUtils.click(locators.getProperty("searchBoxCancelButton"));
    }

    public void clicksOnCancelIconOfOrderIdSearchBox() throws Exception {
        commonUtils.click(locators.getProperty("searchBoxCancelButton"));
    }

    public void clicksOnCancelIconOfCustomerIdSearchBox() throws Exception {
        commonUtils.click(locators.getProperty("searchBoxCancelButton"));
    }


    public int seesUniqueRecords() {
        return commonUtils.getWebElements(locators.getProperty("firstRowBasketRecord")).size();
    }


    public void shouldNotAbleToSelectExportStatus() {
        List<WebElement> checkBoxList = commonUtils.getWebElements(locators.getProperty("basketCheckBoxList"));
        log.info(String.valueOf(checkBoxList.size()));
        for (int i = 1; i <= checkBoxList.size(); i++) {
            //WebElement isCheckBoxDisplayed=commonUtils.getWebElement("(//tr//td[1]//div//div)[num]".replace("num", ""+i));
            Assert.assertFalse(commonUtils.elementIsDisplayed("(//tr//td[1]//div//div)[num]".replace("num", "" + i)));
        }
    }


    public void byDefaultBasketsIsInDescendingOrder(String moduleName, String columnName) throws InterruptedException {
        if(moduleName.equalsIgnoreCase("Audit Trail"))
        {
            commonPage.clickOnLinkOnMenu(CommonEnum.fromString("Basket"), "Basket");
            commonPage.verifiesPageOfCOMNxtIsDisplayed(PageValidationEnum.fromString("Basket"), "Basket");
            commonPage.clickOnLinkOnMenu(CommonEnum.fromString("Audit Trail"), "Audit Trail");
        }

        checkSortingOrder(0, columnName);
    }

    private boolean isSortedDescending(List<String> onlyNumbersListBeforeSorting) {
        if (onlyNumbersListBeforeSorting.size() < 2) {
            return true;
        }
        boolean isSorted = true;
        for (int i = 1; i < onlyNumbersListBeforeSorting.size(); i++) {
            //log.info("The iterations are: " + i);
            if (onlyNumbersListBeforeSorting.get(i - 1).compareTo(onlyNumbersListBeforeSorting.get(i)) < 0) {
                isSorted = false;
                break;
            }
        }
        return isSorted;
    }

    private void checkSortingOrder(int noOfTimesCalled, String columnName) {
        checkingBasketListFirstDate();
        indexOfColumn = commonUtils.getIndexOfRequiredColumn(columnName, locators.getProperty("tableColumnNamesListLoc"));
        String dateAndTimeListLoc = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";

        List<WebElement> dateAndTimeList = commonUtils.getWebElements(dateAndTimeListLoc);
        List<String> stringsListBeforeSorting = new ArrayList<>();
        List<String> onlyNumbersList = new ArrayList<>();

        for (WebElement dateAndTime : dateAndTimeList) {
            stringsListBeforeSorting.add(dateAndTime.getText());
        }
        int count = 0;
        for (int i = 0; i < stringsListBeforeSorting.size(); i++) {
            count++;
            onlyNumbersList.add(stringsListBeforeSorting.get(i).replaceAll("[^0-9]", ""));
            //log.info("Only Numbers got added: " + onlyNumbersList.get(i));
        }
        log.info("Count: " + count);

        if (noOfTimesCalled == 0) {
            boolean isInDescending = isSortedDescending(onlyNumbersList);
            log.info(String.valueOf(isInDescending));
            Assert.assertTrue(isInDescending);
        } else {
            boolean isInAscending = isSortedAscending(onlyNumbersList);
            log.info(String.valueOf(isInAscending));
            Assert.assertTrue(isInAscending);
        }
    }

    public void selectExportedExportStatus() {
        commonUtils.click(locators.getProperty("exportedExportStatus"));
    }

    public void changePreferenceFromDescToAsc(String columnName) {
        sorting(columnName);
    }

    public void sorting(String columnName) {
        commonUtils.waitTillElementIsVisible("//label[text()='"+columnName+"']", 10);
        WebElement sortButton = commonUtils.getWebElement("//label[text()='"+columnName+"']");
        Actions action = new Actions(this.getDriver());
        action.moveToElement(sortButton).click().perform();
    }

    private void checkingBasketListFirstDate() {
        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Last Modified", locators.getProperty("tableColumnNamesListLoc"));
        String defaultBasketListFirstDate = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";

        commonUtils.waitTillElementIsVisible(defaultBasketListFirstDate, 10);
        String basketListFirstDate = commonUtils.getText(defaultBasketListFirstDate);
        log.info("First Date from Table " + basketListFirstDate);
    }

    public void seesBasketListInAscOrder(String columnName) {
        checkSortingOrder(1, columnName);
    }

    private boolean isSortedAscending(List<String> onlyNumbersListAfterSorting) {

        if (onlyNumbersListAfterSorting.size() < 2) {
            return true;
        }
        boolean isSorted = true;
        for (int i = 1; i < onlyNumbersListAfterSorting.size(); i++) {
            //log.info("The iterations are: " + i);
            if (onlyNumbersListAfterSorting.get(i - 1).compareTo(onlyNumbersListAfterSorting.get(i)) > 0) {
                isSorted = false;
                break;
            }
        }
        return isSorted;
    }


    public void changesRegionFromCanadaToUsa() {
        commonUtils.click(locators.getProperty("canada"));
        commonUtils.click(locators.getProperty("us"));
    }

    public String isDisplayedWithErrorPopup() {
        return commonUtils.getText(locators.getProperty("errorMessage"));
    }


    public void closesErrorPopup() {
        commonUtils.click(locators.getProperty("closeErrorPopup"));
    }

    public boolean shouldNotSeeBasketAdminTabInLeftNavMenu() {
        return commonUtils.elementIsDisplayed("//label[text()='Basket Admin']");
    }


    public boolean shouldSeeDownloadButtonAtTop() throws InterruptedException {
        commonUtils.waitTillElementIsVisible(locators.getProperty("topRightSidePageDownloadButton"), 15);
        return commonUtils.elementIsDisplayed((locators.getProperty("topRightSidePageDownloadButton")));
    }


    public void clicksOnDownloadButtonOnTop() throws InterruptedException {
        commonUtils.waitTillElementIsClickable(locators.getProperty("topRightSidePageDownloadButton"), 60);
        commonUtils.click(locators.getProperty("topRightSidePageDownloadButton"));
        commonUtils.waits(3);
        commonUtils.waitTillElementIsClickable(locators.getProperty("topRightSidePageDownloadButton"), 90);
    }


    public void checkNoOfRecordsInDownloadedFileSameAsUI(String fileName) throws IOException {
        // Create an object of filereader
        // class with CSV file as a parameter.
        FileReader filereader = new FileReader("./src/test/resources/data/downloadedfiles/" + fileName);

        // create csvReader object passing
        // file reader as a parameter
        CSVReader csvReader = new CSVReader(filereader);

        int totalNumberOfRecordsFromDownloadedCsvFile = 0;

        while (csvReader.readNext() != null) {
            totalNumberOfRecordsFromDownloadedCsvFile++;
        }

        log.info("The number of records from downloaded bulk baskets file: " + totalNumberOfRecordsFromDownloadedCsvFile);

        String[] recordsArray = commonUtils.getText(locators.getProperty("totalNoOfRecordsLoc")).split(" ");
        int totalNoOfRecordsFromUI = Integer.parseInt(recordsArray[3].replace("(", "")) + 1;

        log.info("The number of records from UI(Pagination): " + totalNoOfRecordsFromUI);

        Assert.assertEquals(totalNumberOfRecordsFromDownloadedCsvFile, totalNoOfRecordsFromUI);

    }


    //Basket Admin definitions for "selecting override basket popup checkbox"
    public void selectsOverridePopupCheckbox_checkboxSelected() {
        try {
            commonUtils.click(locators.getProperty("overrideBasketCheckBox"));
        } catch (Exception e) {
            closesTheBrowser();
            Assert.fail("Error in override basket test cases while selecting checkbox of override basket popup");
            e.printStackTrace();
        }

    }


    public void clicksOnlyOnYesButton() {
        commonUtils.click(locators.getProperty("overrideBasketYesButton"));
    }


    public void remainsIdleForAMinute() throws InterruptedException {
        commonUtils.waits(80);
    }

    public String shouldSeeToDateInDisabledState() {
        return commonUtils.getAttribute(locators.getProperty("fromDateInputBox"), "disabled");
    }

    public void clickOnCloseButtonOfSingleReExportBasketPopup() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("singleBasketReExportCloseIcon"), 15);
        commonUtils.click(locators.getProperty("singleBasketReExportCloseIcon"));
        commonUtils.waitTillElementIsVisible(locators.getProperty("noOfRecordsLoc"), 20);
    }
}


package com.adidas.tpAdidasSerenity.fe.pageObjects;

import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import net.thucydides.core.pages.PageObject;
import org.junit.Assert;
import org.openqa.selenium.Cookie;
import org.openqa.selenium.WebElement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

public class BasketAdminPageCommon extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(BasketAdminPageCommon.class);

    CommonUtils commonUtils = new CommonUtils();
    BasketAdminPageCA basketAdminPageCA = new BasketAdminPageCA();
    BasketAdminPageUS basketAdminPageUS = new BasketAdminPageUS();
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");
    String selectedCheckbox, strLine, basketIdFromJsonPopup;


    public void shouldSeeDefaultColumnsOnDefLanding(String defaultOrderNoCol, String defaultChannelCol, String defaultSiteIdCol, String defaultExportStatusCol, String defaultPaymentStatus, String defaultInspectCol) {
        Assert.assertTrue(commonUtils.elementIsDisplayed("//table//thead//tr//th//label[@color='secondary' and text()='" + defaultOrderNoCol + "']"));
        Assert.assertTrue(commonUtils.elementIsDisplayed("//table//thead//tr//th//label[@color='secondary' and text()='" + defaultChannelCol + "']"));
        Assert.assertTrue(commonUtils.elementIsDisplayed("//table//thead//tr//th//label[@color='secondary' and text()='" + defaultSiteIdCol + "']"));
        Assert.assertTrue(commonUtils.elementIsDisplayed("//table//thead//tr//th//label[@color='secondary' and text()='" + defaultExportStatusCol + "']"));
        Assert.assertTrue(commonUtils.elementIsDisplayed("//table//thead//tr//th//label[@color='secondary' and text()='" + defaultPaymentStatus + "']"));
        Assert.assertTrue(commonUtils.elementIsDisplayed("//table//thead//tr//th//label[@color='secondary' and text()='" + defaultInspectCol + "']"));
    }


    public void shouldSeeAppliedAndDefColumnsAfterApplyingFilter(String defaultOrderNoCol, String defaultChannelCol, String defaultSiteIdCol, String defaultExportStatusCol, String defaultPaymentStatus, String defaultInspectCol, String selectedBasketIdCol, String selectedCustomerIdIdCol, String selectedLastModifiedCol) {
        shouldSeeDefaultColumnsOnDefLanding(defaultOrderNoCol, defaultChannelCol, defaultSiteIdCol, defaultExportStatusCol, defaultPaymentStatus, defaultInspectCol);
        Assert.assertTrue(commonUtils.elementIsDisplayed("//table//thead//tr//th//label[@color='secondary' and text()='" + selectedBasketIdCol + "']"));
        Assert.assertTrue(commonUtils.elementIsDisplayed("//table//thead//tr//th//label[@color='secondary' and text()='" + selectedCustomerIdIdCol + "']"));
        Assert.assertTrue(commonUtils.elementIsDisplayed("//table//thead//tr//th//label[@color='secondary' and text()='" + selectedLastModifiedCol + "']"));
    }


    public void verifiesOtherFieldsFromViewDropdownInDisabledState() {
        List<WebElement> viewDropdownFieldsList = commonUtils.getWebElements(locators.getProperty("viewDropdownFieldsListLoc"));
        log.info(String.valueOf(viewDropdownFieldsList.size()));

        for (int index = 1; index < viewDropdownFieldsList.size(); index++) {
            if(!(viewDropdownFieldsList.get(index).getText().equalsIgnoreCase("Basket ID") ||
                    viewDropdownFieldsList.get(index).getText().equalsIgnoreCase("Customer ID") ||
                    viewDropdownFieldsList.get(index).getText().equalsIgnoreCase("Last Modified") ||
                    viewDropdownFieldsList.get(index).getText().equalsIgnoreCase("Currency Code") ||
                    viewDropdownFieldsList.get(index).getText().equalsIgnoreCase("Taxation Policy"))  )
            {
                log.info(viewDropdownFieldsList.get(index).getText());
                Assert.assertEquals("true", viewDropdownFieldsList.get(index).getAttribute("disabled"));
            }
        }
    }

    public void clicksOnViewDropdown() {
        commonUtils.click(locators.getProperty("viewDropdown"));
    }


    public boolean checksWhetherSingleBasketIsSelected() {
        selectedCheckbox = "//tr//td//div//div//div//div";
        return commonUtils.elementIsDisplayed(selectedCheckbox);
    }


    public boolean checksWhetherMultipleBasketsIsSelected() {
        selectedCheckbox = "//tr//td//div//div//div//div";
        List<WebElement> selectedCheckBoxList = commonUtils.getWebElements(selectedCheckbox);
        for (int i = 1; i <= selectedCheckBoxList.size(); i++) {
            if (!commonUtils.elementIsDisplayed("(//tr//td//div//div//div//div)[" + i + "]")) {
                return false;
            }
        }
        return true;
    }

    public boolean checksWhetherMultipleBasketsIsDeSelected(int noOfBasketsDeSelected) {
        for (int i = 1; i <= noOfBasketsDeSelected; i++) {
            if (commonUtils.elementIsDisplayed("(//tr//td//div//div//div//div)[" + i + "]")) {
                return false;
            }
        }
        return true;
    }


    public void clickOnMarketSelectionDropdown() {
        commonUtils.click(locators.getProperty("regionDropdown"));
    }

    public void clickOnContinueButton() {
        commonUtils.click(locators.getProperty("continueButton"));
    }

    public String checkRegionInLeftCornerDropdown(String comNextModule) {
        return commonUtils.getAttribute(locators.getProperty("parentDropdownRegion"), "value");
    }

    static boolean flag = false;

    public void loggedInToChooseYourMarketToContinueDropdownPage() throws IOException {
        if (this.getDriver().toString().equals("Uninitialised WebDriverFacade")) {
            flag = false;
            log.info("Opened new browser");
        }
        String adidasUrl = PropertyFileReader.loadFile("config", "config.properties").getProperty("url");
        this.getDriver().manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
        //LOGIN THROUGH AUTHENTICATOR
        if (adidasUrl.equalsIgnoreCase("https://qa.api.3stripes.net/admin/ca/login?returnUrl=%2Fca")) {
            if (!flag) {
                basketAdminPageCA.openAndMaximize();
                log.info("**************");
                FileInputStream fstream = new FileInputStream("./src/test/resources/data/cookies/UsingAuthenticatorCookie.txt");
                BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

                this.getDriver().manage().deleteAllCookies();

                while ((strLine = br.readLine()) != null) {
                    // Format: ck.getName() + ";" + ck.getValue() + ";" + ck.getDomain() + ";" + ck.getPath() + ";"+ ck.getExpiry() + ";" + ck.isSecure();
                    String[] cookieValues = strLine.split(";");
                    Cookie cookie = new Cookie.Builder(cookieValues[0], cookieValues[1]).domain(cookieValues[2]).isHttpOnly(true)
                            .path(cookieValues[3]).isSecure(Boolean.getBoolean(cookieValues[5])).build();
                    this.getDriver().manage().addCookie(cookie);
                }

                this.getDriver().get("https://qa.api.3stripes.net/admin/ca/mf/commerce-next/order-fulfilment/configure?siteId=adidas-CA&comNextRegion=ca");
                //Close the input stream
                fstream.close();
                flag = true;

            } else {
                this.getDriver().get("https://qa.api.3stripes.net/admin/ca/mf/commerce-next/order-fulfilment/configure?siteId=adidas-CA&comNextRegion=ca");
            }
        }
        //LOGIN THROUGH OTP
        else {
            if (!flag) {
                basketAdminPageCA.openAndMaximize();
                log.info("**************");
                FileInputStream fstream = new FileInputStream("./src/test/resources/data/cookies/UsingOTPCookie.txt");
                BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

                this.getDriver().manage().deleteAllCookies();

                while ((strLine = br.readLine()) != null) {
                    // Format: ck.getName() + ";" + ck.getValue() + ";" + ck.getDomain() + ";" + ck.getPath() + ";"+ ck.getExpiry() + ";" + ck.isSecure();
                    String[] cookieValues = strLine.split(";");
                    Cookie cookie = new Cookie.Builder(cookieValues[0], cookieValues[1]).domain(cookieValues[2]).isHttpOnly(true)
                            .path(cookieValues[3]).isSecure(Boolean.getBoolean(cookieValues[5])).build();
                    this.getDriver().manage().addCookie(cookie);
                }

                this.getDriver().get("https://comn-stg.admin.deu01.k8s.anteater.dub.aws.k8s.3stripes.net/admin/ca/mf/commerce-next/checkout?comNextRegion=ca");

                //Close the input stream
                fstream.close();
                flag = true;

            } else {
                this.getDriver().get("https://comn-stg.admin.deu01.k8s.anteater.dub.aws.k8s.3stripes.net/admin/ca/mf/commerce-next/checkout?comNextRegion=ca");
            }
        }
    }

    public void selectAnotherRegion(String regionTwo) {
        commonUtils.click("//div[text()='" + regionTwo + "']");
    }

    public boolean filterButtonIsVisible() {
        return commonUtils.elementIsDisplayed(locators.getProperty("basketFilterIcon"));
    }

    public boolean shouldSeeDownloadButtonAtTop() {
        return commonUtils.elementIsDisplayed(locators.getProperty("topRightSidePageDownloadButton"));
    }


    public void clicksOnPassedInspectJsonPopupButton(String passedButton) {
        commonUtils.click("//button[text()='" + passedButton + "']");
    }

    public boolean verifiesJsonDataIsExpandedOrCollapsedForm() {
        return commonUtils.elementIsDisplayed(locators.getProperty("expandedStateCheckLoc"));
    }


    public String shouldSeePassedSnackBarMsgOnBasketJsonPopup(String snackBarMsg) {
        return commonUtils.getText("//div[text()='" + snackBarMsg + "']");
    }

    public String shouldSeeSnackBarMsgDismissButtonOnBasketJsonPopup(String dismiss) {
        return commonUtils.getText("//button[text()='" + dismiss + "']");
    }

    public boolean pastesCopiedJsonIntoPassedNotepadFile(String copyJsonTextFile) throws IOException, UnsupportedFlavorException {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        String actualCopiedText = (String) clipboard.getData(DataFlavor.stringFlavor);
        return commonUtils.writeDataToFile("./src/test/resources/data/notepadFiles/" + copyJsonTextFile, actualCopiedText);
    }

    public boolean checksWhetherJsonIsCopiedIntoPassedNotepadFile(String copyJsonTextFile) {
        basketIdFromJsonPopup = commonUtils.getText(locators.getProperty("basketIdFromJsonPopupLoc"));
        BufferedReader objReader;
        boolean flag = false;
        try {
            String strCurrentLine;
            objReader = new BufferedReader(new FileReader("./src/test/resources/data/notepadFiles/" + copyJsonTextFile));

            while ((strCurrentLine = objReader.readLine()) != null) {
                if (strCurrentLine.trim().contains(basketIdFromJsonPopup)) {
                    flag = true;
                    break;
                }
            }
            objReader.close();
            return flag;
        } catch (IOException e) {
            log.error("Error in reading data from file" + e);
            e.printStackTrace();
        }
        return flag;
    }

    public void shouldSeeAllExportStatusIsCheckBoxField() {
        List<WebElement> exportStatusList = commonUtils.getWebElements(locators.getProperty("exportStatus"));
        for (int i = 0; i < exportStatusList.size(); i++) {
            Assert.assertEquals("checkbox", exportStatusList.get(i).getAttribute("type"));
        }
    }

    public void selectsExportStatus(String allExportStatus) {
        commonUtils.click("//div[text()='" + allExportStatus + "']//preceding-sibling::div[@type='checkbox']");
    }

    public void shouldSeeAllTheExportStatusChecked() {
        List<WebElement> checkedExportStatusList = commonUtils.getWebElements(locators.getProperty("checkedExportStatus"));
        for (int i = 0; i < checkedExportStatusList.size(); i++) {
            checkedExportStatusList.get(i).isDisplayed();
        }
    }


    public void deSelectsPassedCheckbox(String passedExportStatus) {
        if (passedExportStatus.equalsIgnoreCase("EXPORT IN PROGRESS")) {
            commonUtils.click("//div[text()='IN PROGRESS']//preceding-sibling::div[@type='checkbox']");
        } else {
            commonUtils.click("//div[text()='" + passedExportStatus + "']//preceding-sibling::div[@type='checkbox']");
        }
    }

    public boolean validatesPassedExportStatus(String passedExportStatus) {
        return commonUtils.elementIsDisplayed("//label[text()='Export Status']//parent::div//div[@type='checkbox']//following::div[text()='" + passedExportStatus + "']//preceding-sibling::div[@type='checkbox']//div//div");
    }

    public boolean shouldSeePassedExportStatusBasketData(String firstExportStatus, String secondExportStatus) {
        int indexOfColumn = commonUtils.getIndexOfRequiredColumn("Export Status", locators.getProperty("tableColumnNamesListLoc"));
        String exportStatus = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
        commonUtils.waitTillElementIsVisible( "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]", 15);
        List<WebElement> exportStatusList = commonUtils.getWebElements(exportStatus);
        boolean flag = true;

        if (exportStatusList.size() <= 0) {
            Assert.fail("No data found or page still loading");
        } else {
            for (int i = 0; i < exportStatusList.size(); i++) {
                String actualExportStatus = exportStatusList.get(i).getText();
                if (!(actualExportStatus.equalsIgnoreCase(firstExportStatus) || (actualExportStatus.equalsIgnoreCase(secondExportStatus)))) {
                    log.error("There is mismatch in export status at " + (i + 1));
                    flag = false;
                }
            }
        }
        return flag;
    }

    public void selectsAllCommerceNextModulesAndChecksRightSideMarketDropdown() {
        List<String> commerceNextModulesList = getCommerceNextModules();

        for (String comNextModule: commerceNextModulesList) {
            if(comNextModule.equalsIgnoreCase("Fulfilment"))
            {
                commonUtils.waitTillElementIsVisible("//label[text()='" + comNextModule + "']//parent::div//div[@color]", 10);
                commonUtils.waitForElementClick("//label[text()='" + comNextModule + "']//parent::div//div[@color]");
            }else
            {
                commonUtils.waitTillElementIsVisible("//label[text()='" + comNextModule + "']//parent::a//div[@color]", 10);
                commonUtils.waitForElementClick("//label[text()='" + comNextModule + "']//parent::a//div[@color]");
            }
            Assert.assertFalse(commonUtils.elementIsDisplayed("//p[text()='" + comNextModule + "']//parent::div//input//following-sibling::div//input"));
        }

    }

    private List<String> getCommerceNextModules() {
        List<String> commerceNextModulesList = new ArrayList<>();
        commerceNextModulesList.add("Fulfilment");
        commerceNextModulesList.add("Checkout");
        commerceNextModulesList.add("Inventory");
        commerceNextModulesList.add("Basket");
        commerceNextModulesList.add("Tax Rates");
        commerceNextModulesList.add("Audit Trail");
        commerceNextModulesList.add("Product");
        commerceNextModulesList.add("Payment");

        return commerceNextModulesList;
    }

    public String verifiesBasketDownloadCsvToastPopupMsg() {
        return commonUtils.getText(locators.getProperty("basketCsvToastPopupMsg"));
    }

    public void hoversOnToastPopup() {
        commonUtils.moveToElement(locators.getProperty("basketCsvToastDismissButton"));
    }

    public boolean verifiesThatToastPopupVisibleUntilUserTakesOffHover() {
        return commonUtils.elementIsDisplayed(locators.getProperty("basketCsvToastDismissButton"));
    }

    public void takesOffHoveredMouseFromToastPopup() {
        commonUtils.click(locators.getProperty("basketText"));
    }

    public void verifiesToastPopupDisappearsAfterPassedSeconds(int noOfSecond) throws InterruptedException {
        commonUtils.waits(5);
        Assert.assertFalse(commonUtils.elementIsDisplayed(locators.getProperty("basketCsvToastPopupMsg")));
    }

    public void verifiesToastPopupDisappeared() {
        Assert.assertFalse(commonUtils.elementIsDisplayed(locators.getProperty("basketCsvToastPopupMsg")));
    }

    public void validatesAggregatedCountIsEqualToTotalBasketCountInPagination(String aggregatedCountOfField) throws InterruptedException {
        commonUtils.waitTillElementIsVisible("//label[text()='"+aggregatedCountOfField+"']//parent::div//p", 10);
        commonUtils.waits(2);
        String aggregatedFieldCount = commonUtils.getText("//label[text()='"+aggregatedCountOfField+"']//parent::div//p");
        if(aggregatedFieldCount.equalsIgnoreCase("0"))
            Assert.assertTrue(commonUtils.elementIsDisplayed(locators.getProperty("errorMessageAfterSearch")));
        else
        {
            String[] recordsArray = commonUtils.getText(locators.getProperty("totalNoOfRecordsLoc")).split(" ");
            Assert.assertEquals(recordsArray[3].replace("(", ""), aggregatedFieldCount);
        }
    }

    public String validatesFieldIsClear(String field, String state) {
        return commonUtils.getAttribute("//label[text()='"+field+"']//parent::div//parent::div//input[@placeholder='Please select']", "value");
    }

    public boolean validatesReExportBasketsCheckboxIsNotPresent() {
        List<WebElement> noOfRecordsList = commonUtils.getWebElements(locators.getProperty("noOfRecordsLoc"));
        int noOfReExportBasketsCheckboxDisplayed = 0;
        for (int record = 1; record <= noOfRecordsList.size(); record++)
        {
            if(commonUtils.elementIsDisplayed("(//tr//td[1])["+record+"]//div[@type='checkbox']"))
                noOfReExportBasketsCheckboxDisplayed++;
        }
        return noOfReExportBasketsCheckboxDisplayed == 0;
    }

    public void verifiesCorrectDataInViewDropdown() {
        List<String> viewDropdownList = Arrays.asList(new String[]
                { "Basket ID", "Basket Summary", "Billing Address", "BA Address Line1", "BA Address Line2", "BA City", "BA Country Code", "BA Phone Number", "BA Postal Code", "BA State Code", "Billing Address First Name", "Billing Address Id", "Billing Address Last Name", "Billing Address Origin", "Billing Address Validated", "Billing Address Vat Code", "Channel", "Coupons Data", "Coupon Code", "Coupon Code Campaign Id", "Coupon Code Discount Amount", "Coupon Code Rejection Reason", "Coupon Code rule Name",
                        "Coupon Code Ruleset Id", "Coupon Code Status", "Creation Date", "Currency Code", "Customer ID", "Customer Information", "Customer Is Logged In", "Customer Member Id", "Customer Membership Tier", "Customer Reward Identifier", "Email", "Event Id", "Expiration Time", "First Name", "Last Modified", "Last Name", "Locale", "Order Date", "Order Track Data", "Payment Instruments", "Amount", "Payment Instrument Id", "Payment Method Id", "Payment Method Name", "Payment Provider Authorization Code", "Payment Provider Id",
                        "Payment Provider Transaction Id", "Payment Status", "Pricing", "Basket Total", "Discounts", "Campaign Id", "Discount Amount", "Discount Name", "Rule Name", "Ruleset Id", "Product Tax", "Product Total", "Product Total Before Discounts", "Shipping Tax", "Shipping Total", "Shipping Total Before Discounts", "Tax Total", "Tax Rate Breakdown Items", "Tax", "Tax Type", "Product Items", "Channel Origin", "Sale Channels", "Pricing", "Default Tax Rate", "Discounts | Campaign Id", "Discounts | Campaign Name",
                        "Discounts | Discount Amount", "Discounts | Discount Id", "Discounts | Discount Name", "Discounts | Prorated Indicator", "Discounts | Ruleset Id", "Original Unit Price", "Point Value", "Price", "Price Before Discounts", "Pricing Tax", "Product Pricing Discount Percentage", "Product Pricing Original Price", "Tax Rate", "Unit Price", "Unit Price After Discounts", "Product Color", "Product ID", "Product Image", "Product Is Made To Be Remade", "Product Item Id", "Product Max Quantity", "Product Model Number",
                        "Product Name", "Product Personalizable", "Product Quantity", "Product Reservation Id", "Product Selected Options", "Product Shipment Id", "Product Size", "Product SKU", "Product Tax Class Id", "Product Type", "Promotions Exclusions", "Promotions Notifications", "Resource State", "Risk Processor Id", "Risk Transaction Id", "Shipment Pricing Product Tax", "Shipment Pricing Shipping Tax", "Shipment Pricing Shipping Total Before Discount", "Shipment Pricing Total", "Shipment Pricing Total Product", "Shipment Pricing Total Shipping",
                        "Shipment Pricing Total Tax", "Shipment Product Items", "Shipments", "Delivery Method", "Pricing", "Pricing Product Tax", "Pricing Product Total", "Pricing Shipment Total", "Pricing Shipping Tax", "Pricing Tax Total", "Pricing Total Before Discounts", "Product Lines", "Product Line sku", "Product Lines id", "Product Lines quantity", "Product Lines Type", "Shipment ID", "Shipping Address", "Shipping Address City", "Shipping Address Country Code", "Shipping Address First Name", "Shipping Address Id", "Shipping Address Last Name",
                        "Shipping Address Line1", "Shipping Address Line2", "Shipping Address Origin", "Shipping Address phone Number", "Shipping Address Postal Code", "Shipping Address State Code", "Shipping Address Validated", "Shipping Item", "Carrier Code", "Carrier Name", "Carrier Service Code", "Customer Id", "Delivery End Date", "Delivery Start Date", "Estimated Delivery Date", "Lead Time", "Pricing | Base Price", "Pricing | Default Tax Rate", "Pricing | Price", "Pricing | Tax", "Pricing | Tax Rate", "Pricing | Threshold", "Ship Node",
                        "Shipment End Date", "Shipment Start Date", "Shipping Item ID", "Shipping Method ID", "Shipping Method Name", "Shipping Tax Class Id", "Shipments Product Lines Id", "Shipments Product Lines Item Availability", "Shipments Product Lines LineType", "Shipments Product Lines Quantity", "Shipments Product Lines sku", "Site Id", "Status", "Status Order Confirmation Email Sent", "Status Order Status", "Tax Calculation Missing", "Taxation Policy", "Type"});

        commonUtils.checkDataFromUiAndStoredData(viewDropdownList, locators.getProperty("viewDropdownDataListLoc"));
    }
}


package com.adidas.tpAdidasSerenity.fe.pageObjects;

import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import net.thucydides.core.pages.PageObject;
import org.junit.Assert;
import org.openqa.selenium.WebElement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class BasketAdminPageUS extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(BasketAdminPageUS.class);

    CommonUtils commonUtils = new CommonUtils();
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");
    String storedData, dataFromUI;

    public void clicksOnChannel() {
        commonUtils.click(locators.getProperty("filterChannel"));
    }

    public void shouldSeeCorrectChannelsOnChannelDropdown() {
        List<String> channelsList = new ArrayList<>();

        channelsList.add("Hype Platform");
        channelsList.add("Adidas Consumer App");
        channelsList.add("Adidas Confirmed App");
        channelsList.add("Web");

        checkChannelsDataFromUIAndStoredChannelsData(channelsList);
    }

    public void checkChannelsDataFromUIAndStoredChannelsData(List<String> storedDataList) {
        for (int i = 0; i < storedDataList.size(); i++) {
            storedData = storedDataList.get(i);
            dataFromUI = commonUtils.getText("//div[text()='" + storedData + "']");
            Assert.assertEquals(dataFromUI.toUpperCase(), storedData.toUpperCase());
        }
    }


    public void selectsChannel(String channel) {
        WebElement channelRadioButton = commonUtils.getWebElement("//div[@overflow]//div[text()='" + channel + "']//parent::div//input");
        if (!channelRadioButton.isSelected()) {
            commonUtils.click("//div[@overflow]//div[text()='" + channel + "']");
        }
        commonUtils.click(locators.getProperty("filterText"));
    }


}


package com.adidas.tpAdidasSerenity.fe.pageObjects;


import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import com.adidas.tpAdidasSerenity.fe.utility.enums.DropdownEnum;
import net.thucydides.core.pages.PageObject;
import org.junit.Assert;
import org.openqa.selenium.WebElement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class BasketAdminPageWE extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(BasketAdminPageWE.class);

    CommonUtils commonUtils = new CommonUtils();
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");
    CommonPage commonPage = new CommonPage();

    public void verifiesCorrectMarketsOnMarketDropdown() {
        List<String> basketCountryList = getBasketCountryList();
        checkSiteIdsDataFromUIAndStoredSiteIdsData(basketCountryList);
    }

    private List<String> getBasketCountryList() {
        List<String> basketCountryList = commonPage.getCountryList();
        basketCountryList.add(0, "All");
        basketCountryList.add(1, "Canada");
        basketCountryList.add(2, "USA");
        return basketCountryList;
    }

    public List<String> getSiteIdList() {
        List<String> siteIdList = new ArrayList<>();

        siteIdList.add("All");
        siteIdList.add("adidas-CA");
        siteIdList.add("adidas-US");
        siteIdList.add("adidas-AT");
        siteIdList.add("adidas-BE");
        siteIdList.add("adidas-CZ");
        siteIdList.add("adidas-DK");
        siteIdList.add("adidas-FI");
        siteIdList.add("adidas-FR");
        siteIdList.add("adidas-DE");
        siteIdList.add("adidas-GR");
        siteIdList.add("adidas-IE");
        siteIdList.add("adidas-IT");
        siteIdList.add("adidas-NL");
        siteIdList.add("adidas-NO");
        siteIdList.add("adidas-PL");
        siteIdList.add("adidas-PT");
        siteIdList.add("adidas-SK");
        siteIdList.add("adidas-ES");
        siteIdList.add("adidas-SE");
        siteIdList.add("adidas-CH");
        siteIdList.add("adidas-GB");

        return siteIdList;
    }

    public void checkSiteIdsDataFromUIAndStoredSiteIdsData(List<String> storedDataList) {
        for (int i = 0; i < storedDataList.size(); i++) {
            String storedData = storedDataList.get(i);
            String dataFromUI = commonUtils.getText("//div[@overflow]//div[text()='" + storedData + "']");
            Assert.assertEquals(dataFromUI, storedData);
        }
    }


    public void selectsSiteId(String siteId) throws InterruptedException {
        WebElement siteIdRadioButton = commonUtils.getWebElement("//div[text()='" + siteId + "']//parent::div//input");
        if (!siteIdRadioButton.isSelected()) {
            commonUtils.click("//div[@overflow]//div[text()='" + siteId + "']");
        }
        commonPage.clickOnDropdown(DropdownEnum.fromString("market"), "market");

    }


    int indexOfColumn;

    public boolean shouldSeeAllSiteIdsRelatedToEUMarkets() {
        List<String> allSiteIdsListFromFilter = getSiteIdList();
        commonUtils.waitTillElementIsVisible(locators.getProperty("tableColumnNamesListLoc"), 15);
        indexOfColumn = commonUtils.getIndexOfRequiredColumn("Site ID", locators.getProperty("tableColumnNamesListLoc"));
        String allSiteIDs = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
        commonUtils.waitTillElementIsVisible(allSiteIDs, 10);
        List<WebElement> allSiteIdsListFromTable = commonUtils.getWebElements(allSiteIDs);
        boolean flag = true;
        for (int tableListIndex = 0; tableListIndex < allSiteIdsListFromTable.size(); tableListIndex++) {
            boolean found = false;
            String siteIdFromTable = allSiteIdsListFromTable.get(tableListIndex).getText();
            for (int filterListIndex = 1; filterListIndex <= allSiteIdsListFromFilter.size() - 1; filterListIndex++) {
                if (siteIdFromTable.equalsIgnoreCase(allSiteIdsListFromFilter.get(filterListIndex))) {
                    found = true;
                    break;
                }
            }

            if (found) {
                log.info(siteIdFromTable + " is present within given Site ID list");
            } else {
                flag = false;
                log.error(siteIdFromTable + " is not from the given Site ID list");
            }
        }
        return flag;
    }


    public void verifiesSelectedSiteIdBaskets() {
        List<String> basketFilterCountryList = getBasketCountryList();
        List<String> basketTableSiteIdList = getSiteIdList();
        log.info(String.valueOf(basketFilterCountryList.size()));

        for (int countryIndex = 1; countryIndex < basketFilterCountryList.size(); countryIndex++) {
            commonUtils.waitTillElementIsVisible("//div[@overflow]//div[text()='" + basketFilterCountryList.get(countryIndex) + "']", 10);
            commonUtils.click("//div[@overflow]//div[text()='" + basketFilterCountryList.get(countryIndex) + "']");
            commonUtils.click(locators.getProperty("filterText"));
            commonUtils.click(locators.getProperty("basketFilterApplyButton"));

            if (!commonUtils.elementIsDisplayed(locators.getProperty("errorMessageAfterSearch"))) {
                indexOfColumn = commonUtils.getIndexOfRequiredColumn("Site ID", locators.getProperty("tableColumnNamesListLoc"));
                String selectedSiteIdListLoc = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
                List<WebElement> selectedSiteIdList = commonUtils.getWebElements(selectedSiteIdListLoc);

                for (int tableSiteIdIndex = 0; tableSiteIdIndex < selectedSiteIdList.size(); tableSiteIdIndex++) {
                    log.info(selectedSiteIdList.get(tableSiteIdIndex).getText());
                    if(basketTableSiteIdList.get(countryIndex).equalsIgnoreCase("adidas-GB"))
                        Assert.assertEquals("adidas-UK".toUpperCase(), selectedSiteIdList.get(tableSiteIdIndex).getText().toUpperCase());
                    else
                        Assert.assertEquals(basketTableSiteIdList.get(countryIndex), selectedSiteIdList.get(tableSiteIdIndex).getText());
                }
            }
            commonUtils.click(locators.getProperty("basketFilterIcon"));
            commonUtils.waitTillElementIsClickable(locators.getProperty("filterMarket"), 10);
            commonUtils.waitUntilVisibleAndClick(locators.getProperty("filterMarket"));

        }
    }


}


package com.adidas.tpAdidasSerenity.fe.pageObjects;

import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import net.thucydides.core.pages.PageObject;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Properties;

public class CheckoutPage extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(CheckoutPage.class);

    OrderFulfilmentPage orderFulfilmentPage = new OrderFulfilmentPage();
    CommonUtils commonUtils = new CommonUtils();
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");
    HashMap<String, String> checkoutFields = new HashMap<>();
    HashMap<String, String> orderFulfilmentFields = new HashMap<>();
    HashMap<String, String> taxRatesFields = new HashMap<>();
    String fieldInputBox = "";


    public void shouldSeeHeaders() {
        Assert.assertEquals("CONFIGURATIONS", commonUtils.getText(locators.getProperty("configurationsHeader")).toUpperCase());
        Assert.assertEquals("TAXATION", commonUtils.getText(locators.getProperty("taxationHeader")).toUpperCase());
    }


    public boolean verifiesChannelDropdownInCheckoutPage() {
        return commonUtils.elementIsDisplayed(locators.getProperty("checkoutChannelsDropdown"));
    }

    public boolean verifiesSearchButtonInCheckoutPage() {
        return commonUtils.elementIsDisplayed(locators.getProperty("checkoutSearchButton"));
    }

    public boolean verifiesAddressManagementSection(String addressManagementSection) {
        return commonUtils.elementIsDisplayed("//div[text()='" + addressManagementSection + "']//parent::div//parent::div//parent::div//parent::div//label[text()='Default Locale']");
    }

    public String verifiesOnlyNumbersCanBeEntered(String field, String passedAddressManagtSection) {
        if (commonUtils.elementIsDisplayed("(//label[text()='" + passedAddressManagtSection + "']//ancestor::form//label[text()='" + field + "']//parent::div//following-sibling::div//input)[4]")) {
            fieldInputBox = "(//label[text()='" + passedAddressManagtSection + "']//ancestor::form//label[text()='" + field + "']//parent::div//following-sibling::div//input)[4]";
            commonUtils.moveToElement(fieldInputBox);
            commonUtils.waitTillElementIsVisible(fieldInputBox, 10);
            commonUtils.clickClearAndEnterText(fieldInputBox, commonUtils.getRandomCharacters(4));
            return commonUtils.getAttribute(fieldInputBox, "value");
        }
        return commonUtils.getAttribute(fieldInputBox, "value");
    }

    boolean isRequiredCheckBoxSelected = false;

    public void checksRequiredCheckBoxState(String requiredCheckbox) {
        isRequiredCheckBoxSelected = commonUtils.elementIsDisplayed("(//div[text()='" + requiredCheckbox + "'])[1]//preceding-sibling::div//div//div");
    }

    public void clickOnRequiredCheckBox(String requiredCheckbox) {
        commonUtils.moveToElement("(//div[text()='" + requiredCheckbox + "'])[4]//preceding-sibling::div");
        commonUtils.waitTillElementIsVisible("(//div[text()='" + requiredCheckbox + "'])[4]//preceding-sibling::div", 10);
        commonUtils.click("(//div[text()='" + requiredCheckbox + "'])[4]//preceding-sibling::div");
    }

    public void verifiesRequiredCheckBoxDeSelectedIfSelectedAndViceVersa(String requiredCheckBox) {
        if (isRequiredCheckBoxSelected) {
            Assert.assertFalse(commonUtils.elementIsDisplayed("(//div[text()='" + requiredCheckBox + "'])[4]//preceding-sibling::div//div//div"));
        } else {
            Assert.assertTrue(commonUtils.elementIsDisplayed("(//div[text()='" + requiredCheckBox + "'])[4]//preceding-sibling::div//div//div"));
        }
    }

    private void addDataToHashMap(HashMap<String, String> map, String key, String value) {
        commonUtils.waitTillElementIsClickable(locators.getProperty(value), 30);
        commonUtils.waitTillElementIsVisible(locators.getProperty(value), 30);
        map.put(key, commonUtils.getText(locators.getProperty(value)).toUpperCase());
    }


    public void changesCarrierNameCarrierStringAndCarrierService() throws InterruptedException {
        List<String> carrierNameList = orderFulfilmentPage.getCarrierNameDataList();
        orderFulfilmentPage.updatesDropdownData("Carrier Name", carrierNameList);

        orderFulfilmentPage.updateCarrierString();

        List<String> carrierServiceList = orderFulfilmentPage.getCarrierServiceDataList();
        orderFulfilmentPage.updatesDropdownData("Carrier Service", carrierServiceList);

        // Because Tax class, Carrier String will be empty from backend sometimes
        orderFulfilmentPage.selectTaxClassValueIfEmpty();
        orderFulfilmentPage.enterNewCustomId();
        orderFulfilmentPage.addSingleCarrierStringIfEmpty();
    }

    public void storesCheckoutOrTaxRatesOrFulfilmentFields(String fieldName) throws InterruptedException {
        switch (fieldName)
        {
            case "Checkout-Tax Class":
                addDataToHashMap(checkoutFields, "taxClass", "taxClassLoc");
                break;
            case "Checkout-Default Tax Rate":
                addDataToHashMap(checkoutFields, "defaultTaxRate", "defaultTaxRateLoc");
                break;
            case "Tax Rates-Tax Class":
                addDataToHashMap(taxRatesFields, "taxClass", "fullTaxColumnName");
                break;
            case "Tax Rates-Default Tax Rate":
                addDataToHashMap(taxRatesFields, "defaultTaxRate", "fullTaxValue");
                break;
            case "Checkout-Shipping method ID":
                commonUtils.waits(2);
                addDataToHashMap(checkoutFields, "id", "shippingMethodID");
                break;
            case "Checkout-Carrier Name":
                addDataToHashMap(checkoutFields, "carrierName", "checkoutCarrierNameLoc");
                break;
            case "Checkout-Carrier String":
                addDataToHashMap(checkoutFields, "carrierString", "checkoutCarrierStringLoc");
                break;
            case "Checkout-Carrier Service":
                addDataToHashMap(checkoutFields, "carrierService", "checkoutCarrierServiceLoc");
                break;
            case "Fulfilment-Shipping method ID":
                commonUtils.waits(5);
                addDataToHashMap(orderFulfilmentFields, "id", "uniqueID");
                break;
            case "Fulfilment-Carrier Name":
                commonUtils.waitTillElementIsVisible(locators.getProperty("orderFulfilmentCarrierNameLoc"), 20);
                orderFulfilmentFields.put("carrierName", commonUtils.getAttribute(locators.getProperty("orderFulfilmentCarrierNameLoc"), "value").toUpperCase());
                break;
            case "Fulfilment-Carrier String":
                commonUtils.waitTillElementIsVisible(locators.getProperty("orderFulfilmentCarrierStringLoc"), 20);
                String carrierStringInCheckout =  commonUtils.getText(locators.getProperty("orderFulfilmentCarrierStringLoc")).split(",")[0];
                log.info("Carrier String in checkout: " + carrierStringInCheckout);
                orderFulfilmentFields.put("carrierString", carrierStringInCheckout.toUpperCase());
                break;
            case "Fulfilment-Carrier Service":
                commonUtils.waitTillElementIsVisible(locators.getProperty("orderFulfilmentCarrierServiceLoc"), 20);
                orderFulfilmentFields.put("carrierService", commonUtils.getAttribute(locators.getProperty("orderFulfilmentCarrierServiceLoc"), "value").toUpperCase());
                break;
            default:
                throw new Error("Checkout or Tax Rates or Fulfilment field is not specified");
        }
    }




    public String checksDynamicTaxIsEnabled() {
        return commonUtils.getText(locators.getProperty("dynamicTaxLoc"));
    }

    public void verifiesTwoModulesFieldsAreSame(String moduleOne, String moduleTwo) {
        if(moduleOne.equalsIgnoreCase("Checkout") && moduleTwo.equalsIgnoreCase("Tax Rates"))
        {
            Assert.assertTrue(checkoutFields.equals(taxRatesFields));
            checkoutFields.clear();
            orderFulfilmentFields.clear();
        }
        else {
            log.info(String.valueOf("Orderfulfilment Map Values:" + orderFulfilmentFields));
            log.info(String.valueOf("Checkout Map Values:" + checkoutFields));
            Assert.assertTrue(orderFulfilmentFields.equals(checkoutFields));
            checkoutFields.clear();
            orderFulfilmentFields.clear();
        }

    }

    public void clickOnSaveButtonOfAddressManagementSection() {
        commonUtils.click(locators.getProperty("addressManagementSaveButton"));
    }

    public boolean validatesLiveOrNotLiveFlagIsDisplayed(String liveFlag, String notLiveFlag) {
        return commonUtils.elementIsDisplayed("//*[text()='" + liveFlag + "']") || commonUtils.elementIsDisplayed("//*[text()='" + notLiveFlag + "']");
    }

    public void updatesStatusFlag(String statusFlag) {
        if(!commonUtils.getText(locators.getProperty("editAddressManagementStatusFlagText")).equalsIgnoreCase(statusFlag))
            commonUtils.waitUntilVisibleAndClick(locators.getProperty("editAddressManagementStatusFlagCheckbox"));
    }

    public boolean validatesPassedFlagIsDisplayed(String statusFlag) {
        return commonUtils.elementIsDisplayed("//*[text()='" + statusFlag + "']");
    }
}



package com.adidas.tpAdidasSerenity.fe.pageObjects;

import au.com.bytecode.opencsv.CSVReader;
import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import com.adidas.tpAdidasSerenity.fe.utility.enums.CommonEnum;
import com.adidas.tpAdidasSerenity.fe.utility.enums.DropdownEnum;
import com.adidas.tpAdidasSerenity.fe.utility.enums.FieldVisibilityValidationEnum;
import com.adidas.tpAdidasSerenity.fe.utility.enums.PageValidationEnum;
import io.cucumber.datatable.DataTable;

import jxl.read.biff.BiffException;
import net.thucydides.core.annotations.DefaultUrl;
import net.thucydides.core.environment.SystemEnvironmentVariables;
import net.thucydides.core.pages.PageObject;
import net.thucydides.core.util.EnvironmentVariables;
import org.junit.Assert;
import org.openqa.selenium.*;
import org.openqa.selenium.interactions.Actions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Properties;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.concurrent.TimeUnit;

import static org.junit.Assert.assertTrue;

@DefaultUrl("https://qa.api.3stripes.net/admin/ca/login?returnUrl=%2Fca")
public class CommonPage extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(CommonPage.class);

    CommonUtils commonUtils = new CommonUtils();
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");
    Properties config = PropertyFileReader.loadFile("config", "config.properties");

    LocalDate currentDate = null, selectedDate;

    static boolean checkBrowserSession = false;
    String strLine, firstPaymentMethodStatus, currentPage;;
    String moduleName = locators.getProperty("moduleLinkLoc");
    String channelDropdown = locators.getProperty("channelDropdownLoc");
    String searchButton = locators.getProperty("searchButtonLoc");
    String moduleDropdownOnMenu = locators.getProperty("moduleDropdownLoc");
    String configureShippingMethodPageDropdown = locators.getProperty("configureShippingMethodPageDropdownLoc");
    String configureShippingMethodPageTextBox= locators.getProperty("configureShippingMethodPageTextBoxLoc");

    public static String customId, newlyCreatedCustomId, selectedCarrierService, basketTableColumnSearchedText, productTableColumnSearchedText;
    String onlyFromDate, onlyToDate, productAttributeDropdownValue;
    DateFormat dateFormat;

    int expectedPreviousPageNumber, expectedNextPageNumber, indexOfColumn,  dataMismatchCount = 0;

    public void doLogin() throws IOException {
        if (this.getDriver().toString().equals("Uninitialised WebDriverFacade")) {
            checkBrowserSession = false;
            log.info("Opened new browser");
        }
        String adidasUrl = PropertyFileReader.loadFile("config", "config.properties").getProperty("adidasUrl");
        this.getDriver().manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
        //LOGIN THROUGH AUTHENTICATOR
        if (adidasUrl.equalsIgnoreCase(config.getProperty("realStagLoginUrl"))) {
            if (!checkBrowserSession) {
                openAndMaximize();
                log.info("**************");
                FileInputStream fstream = new FileInputStream("./src/test/resources/data/cookies/UsingAuthenticatorCookie.txt");
                BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

                this.getDriver().manage().deleteAllCookies();

                while ((strLine = br.readLine()) != null) {
                    // Format: ck.getName() + ";" + ck.getValue() + ";" + ck.getDomain() + ";" + ck.getPath() + ";"+ ck.getExpiry() + ";" + ck.isSecure();
                    String[] cookieValues = strLine.split(";");
                    Cookie cookie = new Cookie.Builder(cookieValues[0], cookieValues[1]).domain(cookieValues[2]).isHttpOnly(true)
                            .path(cookieValues[3]).isSecure(Boolean.getBoolean(cookieValues[5])).build();
                    this.getDriver().manage().addCookie(cookie);
                }

                this.getDriver().get(config.getProperty("realStagHomePageUrl"));
                //Close the input stream
                fstream.close();
                checkBrowserSession = true;

            } else {
                this.getDriver().get(config.getProperty("realStagHomePageUrl"));
            }
        }
        //LOGIN THROUGH OTP
        else {
            if (!checkBrowserSession) {
                openAndMaximize();
                log.info("**************");
                FileInputStream fstream = new FileInputStream("./src/test/resources/data/cookies/UsingOTPCookie.txt");
                BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

                this.getDriver().manage().deleteAllCookies();

                while ((strLine = br.readLine()) != null) {
                    // Format: ck.getName() + ";" + ck.getValue() + ";" + ck.getDomain() + ";" + ck.getPath() + ";"+ ck.getExpiry() + ";" + ck.isSecure();
                    String[] cookieValues = strLine.split(";");
                    Cookie cookie = new Cookie.Builder(cookieValues[0], cookieValues[1]).domain(cookieValues[2]).isHttpOnly(true)
                            .path(cookieValues[3]).isSecure(Boolean.getBoolean(cookieValues[5])).build();
                    this.getDriver().manage().addCookie(cookie);
                }

                this.getDriver().get(config.getProperty("commonQaOrStagHomePageUrl"));
               /*
                BECAUSE NEW MARKET REGION SELECTION DROPDOWN IMPLEMENTATION IS OUT OF SCOPE FOR NOW, AND IT WILL BE USED IN FUTURE.
                commonUtils.click(locators.getProperty("regionDropdown"));
                commonUtils.click(canadaRegion);
                commonUtils.click(locators.getProperty("continueButton"));
                */

                //Close the input stream
                fstream.close();
                checkBrowserSession = true;

            } else {
                this.getDriver().get(config.getProperty("commonQaOrStagHomePageUrl"));
            }
        }
    }

    public void openAndMaximize() {

        //Code to maximize browser windows on all available platforms
        EnvironmentVariables environmentVariables = SystemEnvironmentVariables.createEnvironmentVariables();
        String executionPlatform = environmentVariables.getProperty("te.execution.platform");
        String userAgent = (String) ((JavascriptExecutor) this.getDriver()).executeScript("return navigator.userAgent;");

        //Logging INFO
        System.out.println("\n INFO (Open and Maximize)");
        System.out.println("\n ------------------------");
        System.out.println("\n EXECUTION PLATFORM: " + executionPlatform);
        System.out.println("\n USER AGENT: " + userAgent);

        if (!executionPlatform.isEmpty()) {
            if ("selenoid".equals(executionPlatform)) {
                //Reading resolution properties
                int selenoidWidth = Integer.parseInt(environmentVariables.getProperty("browser.width"));
                int selenoidHeight = Integer.parseInt(environmentVariables.getProperty("browser.height"));
                this.getDriver().manage().window().setSize(new Dimension(selenoidWidth, selenoidHeight));
            } else {
                this.getDriver().manage().window().maximize();
            }
        } else {
            this.getDriver().manage().window().maximize();
        }
        open();
    }

    public void selectRegion(String region) throws InterruptedException {
        boolean isParentCountryDropdownClicked = clicksOnParentCountryDropdown(region);
        if(!isParentCountryDropdownClicked)
        {
            commonUtils.waitTillElementIsClickable("//div[@overflow]//div[text()='" + region + "']", 20);
            commonUtils.waitTillElementIsVisible("//div[@overflow]//div[text()='" + region + "']", 20);
            commonUtils.waits(2);
            commonUtils.click("//div[@overflow]//div[text()='" + region + "']");
        }
    }

    public boolean clicksOnParentCountryDropdown(String region) throws InterruptedException {
        commonUtils.waitTillElementIsClickable(locators.getProperty("comNextCountryParentDropdownLoc"), 20);
        commonUtils.waitTillElementIsVisible(locators.getProperty("comNextCountryParentDropdownLoc"), 20);
        if(commonUtils.getAttribute(locators.getProperty("comNextParentDropdownCountryValue"), "value").equalsIgnoreCase(region))
            return true;
        else
        {
            commonUtils.waits(2);
            commonUtils.waitForElementClick(locators.getProperty("comNextCountryParentDropdownLoc"));
            return false;
        }
    }

    public void clickOnLinkOnMenu(CommonEnum linkOnMenuEnum, String linkOnMenu) throws InterruptedException {
        switch (linkOnMenuEnum)
        {
            case MODULE_LINK_MENU:
                commonUtils.waitTillElementIsClickable(moduleName.replace("ModuleName", linkOnMenu),20);
                commonUtils.waitTillElementIsVisible(moduleName.replace("ModuleName", linkOnMenu),20);
                commonUtils.waits(3);
                commonUtils.waitForElementClick(moduleName.replace("ModuleName", linkOnMenu));
                break;
            default:
                throw new Error("Link on menu is not specified");
        }
    }

    public void clickOnDropdown(DropdownEnum dropdownEnum, String dropdownName) throws InterruptedException {
        switch (dropdownEnum)
        {
            case CHANNEL_DROPDOWN:
                commonUtils.click(channelDropdown.replace("Channel", dropdownName));
                break;
            case AUDIT_TRAIL_DROPDOWN:
                commonUtils.click(locators.getProperty("randomElement"));
                commonUtils.click("//p[text()='Refine results']//parent::div//parent::div//label[text()='" + dropdownName + "']//parent::div//following::div//input//following-sibling::div");
                break;
            case MARKET_DROPDOWN:
                if (commonUtils.elementIsDisplayed(locators.getProperty("marketsDropdown"))) {
                    commonUtils.click(locators.getProperty("marketsDropdown"));
                }
                break;
            case FIND_SITE_ID_DROPDOWN:
                commonUtils.click(locators.getProperty("taxRateCountryDropdown"));
                break;
            case ADDRESS_MANAGEMENT_DROPDOWN:
                commonUtils.moveToElement("//div[text()='" + dropdownName + "']//parent::div//parent::div//div[@rotate]");
                commonUtils.waitTillElementIsVisible("//div[text()='" + dropdownName + "']//parent::div//parent::div//div[@rotate]", 10);
                commonUtils.click("//div[text()='" + dropdownName + "']//parent::div//parent::div//div[@rotate]");
                break;
            case PAGINATION_DROPDOWN:
                commonUtils.click(locators.getProperty("pageNumberDropdownButton"));
                break;
            case STANDARD_SHIPPING_DROPDOWN:
            case SHIPPING_METHOD_DROPDOWN:
                commonUtils.waitTillElementIsClickable(configureShippingMethodPageDropdown.replace("ConfigureShippingMethodPageDropdown", dropdownName), 15);
                commonUtils.scrollAndClick(configureShippingMethodPageDropdown.replace("ConfigureShippingMethodPageDropdown", dropdownName));
                break;
            case SHIPPING_METHOD_THREE_DOTS_DROPDOWN:
                commonUtils.click(locators.getProperty("threeDotsLoc"));
                break;
            case FILTER_CHANNEL_DROPDOWN:
                commonUtils.waitTillElementIsClickable(locators.getProperty("basketAdminChannelDropdownLoc"), 10);
                commonUtils.click(locators.getProperty("basketAdminChannelDropdownLoc"));
                break;
            case AVAILABILITY_QUANTITY_PER_NODE_DROPDOWN:
                commonUtils.click("//div[text()='"+dropdownName+"']//parent::div//div[@rotate]");
                break;
            case SELECT_THE_ORDER_FULFILMENT_METHOD_DROPDOWN:
                commonUtils.click(locators.getProperty("orderFulfilmentMethodDropdown"));
                break;
            case WHEN_DROPDOWN:
            case BULK_SHIPPING_METHOD_DROPDOWN:
            case FULFILMENT_METHOD_DROPDOWN:
            case STATUS_DROPDOWN:
                commonUtils.click("//label[text()='"+dropdownName+"']//parent::div//parent::div//input//following-sibling::div");
                break;
            case VIEW_DROPDOWN:
                commonUtils.click(locators.getProperty("viewDropdown"));
                break;
            case FROM_DATE_DROPDOWN:
            case TO_DATE_DROPDOWN:
                commonUtils.click("//label[text()='"+dropdownName+"']//parent::div//parent::div//input[@placeholder='Please select']//parent::div");
                commonUtils.click(locators.getProperty("randomElement"));
                break;
            case ALLOW_OR_BLOCK_ITEMS_DROPDOWN:
                commonUtils.click("//label[text()='"+dropdownName+"']//parent::div//parent::div//input[@placeholder='Please select']//parent::div");
                break;
            case DATE_AND_TIME_DROPDOWN:
                commonUtils.click("//*[text()='"+dropdownName+"']//parent::div//parent::div//following-sibling::div");
                break;
            case SERVICE_PROVIDER_DROPDOWN:
                commonUtils.waits(6);
                commonUtils.click(locators.getProperty("checkoutServiceProviderDropdown"));
                break;
            case PRODUCT_RESULTS_COLUMN_DROPDOWN:
                commonUtils.waitTillElementIsVisible(locators.getProperty("tableColumnNamesListLoc"), 10);
                indexOfColumn = commonUtils.getIndexOfRequiredColumn(dropdownName, locators.getProperty("tableColumnNamesListLoc"));
                String columnDataLoc = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
                productAttributeDropdownValue = commonUtils.getText(columnDataLoc);
                commonUtils.click("(//table//thead//tr)[2]//th[" + (indexOfColumn + 2) + "]//div[contains(@class,'select-component')]");
                break;
            default:
                throw new Error("Dropdown is not specified");
        }
    }

    public void selectsValueInDropdown(String dropdownValue, DropdownEnum dropdownFieldNameEnum) throws InterruptedException {
        switch (dropdownFieldNameEnum)
        {
            case CHANNEL_DROPDOWN:
                selectDataInDropdownByAttribute(dropdownValue);
                break;
            case WHEN_DROPDOWN:
            case SERVICE_PROVIDER_DROPDOWN:
            case ALLOW_OR_BLOCK_ITEMS_DROPDOWN:
            case STATUS_DROPDOWN:
            case FULFILMENT_METHOD_DROPDOWN:
            case SELECT_THE_ORDER_FULFILMENT_METHOD_DROPDOWN:
            case PAGINATION_DROPDOWN:
            case FIND_SITE_ID_DROPDOWN:
                selectDataInDropdownByText(dropdownValue);
                break;
            case MARKET_DROPDOWN:
                if (commonUtils.elementIsDisplayed(locators.getProperty("marketsDropdown"))) {
                    selectDataInDropdownByText(dropdownValue);
                }
                break;
            case SHIPPING_METHOD_DROPDOWN:
                selectDataInDropdownByText(selectedCarrierService);
                break;
            case BULK_SHIPPING_METHOD_DROPDOWN:
                selectDataInDropdownByText(newlyCreatedCustomId);
                break;
            case STANDARD_SHIPPING_DROPDOWN:
                commonUtils.click("//div[text()='"+newlyCreatedCustomId+"']//preceding-sibling::div[@type='checkbox']");
                clickOnDropdown(DropdownEnum.fromString("Standard Shipping"), "Standard Shipping");
                break;
            case PRODUCT_RESULTS_COLUMN_DROPDOWN:
                if(dropdownValue.isEmpty())
                    selectDataInDropdownByText(productAttributeDropdownValue);
                else
                    selectDataInDropdownByText(dropdownValue);
                break;
            default:
                throw new Error("Dropdown "+dropdownValue+" is not specified");

        }
    }

    private void selectDataInDropdownByAttribute(String dropdownValue) {
        List<String> attributesStringsList = new ArrayList<>();
        List<WebElement> attributesWebElementList = commonUtils.getWebElements(locators.getProperty("dropdownValuesLoc"));
        commonUtils.addWebElementListWithAttributeToStringsList(attributesStringsList, attributesWebElementList, "value");
        commonUtils.selectDataInDropdown(dropdownValue, attributesStringsList, attributesWebElementList);
    }

    private void selectDataInDropdownByText(String dropdownValue) {
        List<String> dataStringsList = new ArrayList<>();
        List<WebElement> dataWebElementList = commonUtils.getWebElements(locators.getProperty("dropdownValuesLoc"));
        commonUtils.addWebElementListToStringsList(dataStringsList, dataWebElementList);
        commonUtils.selectDataInDropdown(dropdownValue, dataStringsList, dataWebElementList);
    }

    public void clickOnButton(CommonEnum buttonEnum, String buttonName) {
        switch (buttonEnum)
        {
            case SEARCH_BUTTON:
                if(commonUtils.elementIsDisplayed(searchButton.replace("search", buttonName)))
                {
                    commonUtils.waitTillElementIsVisible(searchButton.replace("search", buttonName), 10);
                    commonUtils.click(searchButton.replace("search", buttonName));
                }
                break;
            case EXPORT_JSON_BUTTON:
                commonUtils.click(locators.getProperty("productExportJsonButton"));
                break;
            case SAVE_BUTTON:
                commonUtils.waitTillElementIsClickable(locators.getProperty("saveButton"), 20);
                commonUtils.waitTillElementIsVisible(locators.getProperty("saveButton"), 20);
                commonUtils.click(locators.getProperty("saveButton"));
                break;
            case CLOSE_BUTTON:
                commonUtils.waitTillElementIsVisible(locators.getProperty("closeButton"), 15);
                commonUtils.click(locators.getProperty("closeButton"));
                break;
            case BACK_BUTTON:
                commonUtils.waitTillElementIsClickable(locators.getProperty("backButton"), 20);
                commonUtils.click(locators.getProperty("backButton"));
                break;
            case PAGINATION_PREVIOUS_ARROW_BUTTON:
                commonUtils.waitTillElementIsVisible(locators.getProperty("paginationNextArrow"), 10);
                commonUtils.scrollAndClick(locators.getProperty("paginationPreviousArrow"));
                break;
            case PAGINATION_NEXT_ARROW_BUTTON:
                commonUtils.waitTillElementIsVisible(locators.getProperty("paginationNextArrow"), 10);
                commonUtils.scrollAndClick(locators.getProperty("paginationNextArrow"));
                break;
            case CHECKOUT_TAXATION_DETAIL_PAGE_BUTTON:
            case CANCEL_BUTTON_IN_POPUP:
            case CONTINUE_BUTTON_IN_POPUP:
            case EXPORT_BUTTON:
                commonUtils.click("//*[text()='" + buttonName + "']");
                break;
            case VIEW_BUTTON:
                if(buttonName.equalsIgnoreCase("Inspect-VIEW"))
                {
                    indexOfColumn = commonUtils.getIndexOfRequiredColumn("Inspect", locators.getProperty("tableColumnNamesListLoc"));
                }
                else {
                    indexOfColumn = commonUtils.getIndexOfRequiredColumn(buttonName, locators.getProperty("tableColumnNamesListLoc"));
                }
                String firstProductEyeIcon = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]//button";
                commonUtils.waitForElementClick(firstProductEyeIcon);
                break;
            case MORE_INFO_BUTTON:
                commonUtils.waitTillElementIsClickable(locators.getProperty("errorPopup"), 15);
                commonUtils.waitTillElementIsVisible(locators.getProperty("errorPopup"), 15);
                if (commonUtils.elementIsDisplayed(locators.getProperty("errorPopup"))) {
                    commonUtils.click(locators.getProperty("closeErrorPopup"));
                }
                commonUtils.waitTillElementIsClickable(locators.getProperty("moreInfoButton"), 15);
                commonUtils.click(locators.getProperty("moreInfoButton"));
                break;
            case MORE_INFO_CLOSE_BUTTON:
                commonUtils.click(locators.getProperty("moreInfoPopupCloseIcon"));
                break;
            case INVENTORY_SEARCH_BUTTON:
                commonUtils.click(locators.getProperty("inventorySearchButton"));
                if (commonUtils.elementIsDisplayed(locators.getProperty("errorPopup"))) {
                    commonUtils.click(locators.getProperty("closeErrorPopup"));
                }
                break;
            case ADD_SHIPPING_METHOD_BUTTON:
                commonUtils.waitTillElementIsClickable(locators.getProperty("addShippingMethodButton"), 15);
                commonUtils.scrollAndClick(locators.getProperty("addShippingMethodButton"));
                break;
            case DISMISS_BUTTON:
                commonUtils.scrollAndClick("//button[text()='"+buttonName+"']");
                break;
            case UPLOAD_CARRIER_STRING_BUTTON:
                commonUtils.scrollAndClick(locators.getProperty("uploadCarrierString"));
                break;
            case YES_BUTTON:
                commonUtils.click(locators.getProperty("yesButton"));
                break;
            case ADD_ITEMS_BUTTON:
                commonUtils.click(locators.getProperty("addButton").replace("AddButton", buttonName));
                break;
            case FILTER_BUTTON:
                commonUtils.click(locators.getProperty("filterButton"));
                break;
            case APPLY_BUTTON:
                if(commonUtils.elementIsDisplayed(locators.getProperty("randomElement")))
                    commonUtils.click(locators.getProperty("randomElement"));
                commonUtils.click(locators.getProperty("applyButton"));
                break;
            case DOWNLOAD_BUTTON:
                commonUtils.waitTillElementIsVisible(locators.getProperty("downloadButton"), 10);
                commonUtils.click(locators.getProperty("downloadButton"));
                break;
            case CHECK_AVAILABILITY_BUTTON:
                commonUtils.waitTillElementIsClickable(locators.getProperty("checkAvailabilityButton"), 15);
                commonUtils.click(locators.getProperty("checkAvailabilityButton"));
                if (commonUtils.elementIsDisplayed(locators.getProperty("errorPopup"))) {
                    commonUtils.click(locators.getProperty("closeErrorPopup"));
                }
                break;
            case PAYMENT_METHOD_POPUP_CLOSE_BUTTON:
            case ALLOW_OR_BLOCK_VIEW_POPUP_CLOSE_BUTTON:
            case FULFILMENT_CLOSE_BUTTON:
                commonUtils.click("//p[text()='" + buttonName.split("->")[0] + "']//parent::div//button");
                break;
            case BASKET_TABLE_SEARCH_FIELDS_CLOSE_BUTTONS:
            case BASKET_TABLE_SEARCH_FIELDS_SEARCH_BUTTONS:
                indexOfColumn = commonUtils.getIndexOfRequiredColumn(buttonName.split("->")[0], locators.getProperty("tableColumnNamesListLoc"));
                // Since getting count of box without search button[blank box] is taking long time, manually adding blank box count as 6[if required need to update]
                //commonUtils.click("(//table//thead//tr//th//input[@placeholder='Search']//parent::div//following-sibling::div)[" + (  (indexOfColumn + 2) - getCountOfBoxWithoutSearchField(indexOfColumn) ) + "]");
                commonUtils.click("(//table//thead//tr//th//input[@placeholder='Search']//parent::div//following-sibling::div)[" + (  (indexOfColumn + 2) - 6 ) + "]");
                break;
            case DATE_CLOSE_BUTTON:
                commonUtils.click("//label[text()='"+buttonName.split("->")[0]+"']//parent::div//parent::div//button");
                break;
            case ALLOW_OR_BLOCK_SAVE_BUTTON:
                commonUtils.click(locators.getProperty("allowOrBlockSaveButton"));
                break;
            case MEMBERSHIP_PRICE_ADD_MORE_BUTTON:
            case SET_MEMBERSHIP_PRICE_BUTTON:
                commonUtils.waitTillElementIsVisible("//*[text()='"+buttonName+"']//parent::button", 15);
                commonUtils.moveToElement("//*[text()='"+buttonName+"']//parent::button");
                commonUtils.click("//*[text()='"+buttonName+"']//parent::button");
                break;
            case ALLOW_OR_BLOCK_POPUP_DELETE_BUTTON:
                commonUtils.click(locators.getProperty("allowOrBlockDeleteButton"));
                break;
            case CARRIER_STRINGS_DELETE_ITEM_POPUP_DELETE_BUTTON:
                commonUtils.click("//label[text()='"+buttonName.split("->")[1]+"']//ancestor::button");
                break;
            case RESET_BUTTON:
                commonUtils.waitTillElementIsClickable(locators.getProperty("resetButton"), 15);
                commonUtils.click(locators.getProperty("resetButton"));
                break;
            case PRODUCT_TABLE_SEARCH_FIELDS_CLOSE_BUTTONS:
            case PRODUCT_TABLE_SEARCH_FIELDS_SEARCH_BUTTONS:
                commonUtils.click(locators.getProperty("nameTableColumnSearchButton"));
                break;
            default:
                throw new Error("button is not specified");
        }
    }


    public void clickOnLink(CommonEnum linkEnum, String field, String link) {
        switch (linkEnum)
        {
            case EDIT_ADDRESS_MANAGEMENT_LINK:
                commonUtils.moveToElement("//p[text()='" + field + "']//parent::div//parent::div//button");
                commonUtils.waitTillElementIsClickable("//p[text()='" + field + "']//parent::div//parent::div//button", 15);
                commonUtils.click("//p[text()='" + field + "']//parent::div//parent::div//button");
                break;
            case ADDRESS_MANAGEMENT_TABS:
                commonUtils.waitTillElementIsVisible("//label[text()='" + link + "']//parent::div", 10);
                commonUtils.click("//label[text()='" + link + "']//parent::div");
                break;
            case FULFILMENT_SITE_ID:
                if (commonUtils.elementIsDisplayed("//div[text()='" + link + "']")) {
                    commonUtils.click("//div[text()='" + link + "']");
                }
                break;
            case SHIPPING_METHOD_EDIT_LINK:
                commonUtils.click(locators.getProperty("editLinkLoc"));
                break;
            case SHIPPING_METHOD_DELETE_LINK:
                commonUtils.click(locators.getProperty("deleteLinkLoc"));
                break;
            default:
                throw new Error("Link is not specified");
        }
    }

    public boolean verifiesPageOfCOMNxtIsDisplayed(PageValidationEnum pageLevelValidatorEnum, String pageLevelValidater) {
        switch (pageLevelValidatorEnum)
        {
            case TAX_RATES_HEADER_VALIDATION:
            case AUDIT_TRAIL_HEADER_VALIDATION:
            case BASKET_ADMIN_HEADER_VALIDATION:
            case INVENTORY_HEADER_VALIDATION:
            case FULFILMENT_HEADER_VALIDATION:
            case PAYMENT_PAGE_VALIDATION:
                commonUtils.waitTillElementIsVisible("//p[text()='" + pageLevelValidater + "']", 20);
                return commonUtils.elementIsDisplayed("//p[text()='" + pageLevelValidater + "']");
            case PRODUCT_PAGE_HEADER_VALIDATION:
                commonUtils.waitTillElementIsClickable(locators.getProperty("errorPopup"), 20);
                if (commonUtils.elementIsDisplayed(locators.getProperty("errorPopup"))) {
                    commonUtils.click(locators.getProperty("closeErrorPopup"));
                }
                commonUtils.waitTillElementIsVisible(locators.getProperty("productsHeader"), 15);
                return commonUtils.elementIsDisplayed(locators.getProperty("productsHeader"));
            case SINGLE_PRODUCT_TAB_VALIDATION:
                commonUtils.waitTillElementIsClickable("//a[@aria-current='page']//label[text()='" + pageLevelValidater + "']", 30);
                commonUtils.waitTillElementIsVisible("//a[@aria-current='page']//label[text()='" + pageLevelValidater + "']", 30);
                commonUtils.moveToElement("//a[@aria-current='page']//label[text()='" + pageLevelValidater + "']");
                return commonUtils.elementIsDisplayed("//a[@aria-current='page']//label[text()='" + pageLevelValidater + "']");
            case CHECKOUT_PAGE_HEADER_VALIDATION:
                return commonUtils.elementIsDisplayed(locators.getProperty("checkoutPageHeadersLoc"));
            default:
                throw new Error("Page level validation is not specified");
        }
    }


    public void entersValueInField(String value, CommonEnum fieldNameEnum, String fieldName) {
        switch (fieldNameEnum)
        {
            case PAYMENT_FIELDS:
                commonUtils.clickClearAndEnterText("//*[text()='Payment Edit']//parent::div//parent::div//label[text()='" + fieldName + "']//parent::div//following::div//input", value);
                break;
            case PRODUCT_ID_SINGLE:
                commonUtils.enterText(locators.getProperty("productIdSearchBox"), value);
                break;
            case PRODUCT_ID_MULTIPLE:
                enterMultipleIdsInTextBox("./src/test/resources/data/csvFiles/", value, locators.getProperty("productIdSearchBox"), 20);
                break;
            case PAGINATION_TEXT_BOX:
                commonUtils.waitTillElementIsVisible(locators.getProperty("pageNumberTextBox"), 15);
                commonUtils.enterTextByKeys(locators.getProperty("pageNumberTextBox"), value);
                commonUtils.getWebElement(locators.getProperty("pageNumberTextBox")).sendKeys(Keys.ENTER);
                break;
            case INVENTORY_SEARCH_BOX:
                if(fieldName.equalsIgnoreCase("Inventory Id(Single)"))
                    commonUtils.enterText(locators.getProperty("productIdLoc"), value);
                else if (fieldName.equalsIgnoreCase("Inventory Id(Multiple)")) {
                    if(value.endsWith(".csv"))
                        enterMultipleIdsInTextBox("./src/test/resources/data/uploadingFiles/", value, locators.getProperty("productIdLoc"), 20);
                    else
                        commonUtils.enterText(locators.getProperty("productIdLoc"), value);
                }
                break;
            case SHIPPING_METHOD_CUSTOM_ID:
                if(value.equalsIgnoreCase("New Custom ID"))
                {
                    value = "Automation_" +  commonUtils.getLocalDateAndTime("dd_MM_yyyy_HH_mm_ss");
                    newlyCreatedCustomId = value;
                    commonUtils.moveToElement(locators.getProperty("customIdLoc"));
                    commonUtils.clickClearAndEnterText(locators.getProperty("customIdLoc"), value);
                }
                else
                {
                    customId = OrderFulfilmentPage.existingCustomerId;
                    commonUtils.enterText(locators.getProperty("customIdLoc"), customId);
                }
                break;
            case SHIPPING_METHOD_TEXTBOXES:
                commonUtils.clickClearAndEnterText(configureShippingMethodPageTextBox.replace("ConfigureShippingMethodPageTextBox", fieldName), value);
                break;
            case SHIPPING_METHOD_LOCALE_NAME:
                commonUtils.waitTillElementIsVisible(locators.getProperty("name"), 10);
                List<WebElement> nameList = commonUtils.getWebElements(locators.getProperty("name"));
                log.info("Name list size is: " + nameList.size());
                for (int i = 1; i <= nameList.size(); i++) {
                    log.info("The local name is: " + commonUtils.getAttribute("(//input[@placeholder='Enter name'])[" + i + "]", "value"));
                    if (!commonUtils.getAttribute("(//input[@placeholder='Enter name'])[" + i + "]", "value").equalsIgnoreCase("")) {
                        commonUtils.deleteTextByKeys("(//input[@placeholder='Enter name'])[" + i + "]");
                    }
                    commonUtils.enterText("(//input[@placeholder='Enter name'])[" + i + "]", "Test");
                }
                break;
            case ADD_CARRIER_STRINGS_RADIO_BUTTON:
                commonUtils.enterText(locators.getProperty("carrierStringLoc"), value);
                break;
            case BASKET_TABLE_FIELDS:
                indexOfColumn = commonUtils.getIndexOfRequiredColumn(fieldName.split("->")[0], locators.getProperty("tableColumnNamesListLoc"));
                if(value.isEmpty())
                {
                    basketTableColumnSearchedText = commonUtils.getText("//table//tbody//tr//td[" + (indexOfColumn + 2) + "]//div");
                    // Since getting count of box without search button[blank box] is taking long time, manually adding blank box count as 6[if required need to update]
                    // commonUtils.clickEnterText("(//table//thead//tr//th//input[@placeholder='Search'])[" + (  (indexOfColumn + 2) - getCountOfBoxWithoutSearchField(indexOfColumn) ) + "]", basketTableColumnSearchedText);
                    commonUtils.clickEnterText("(//table//thead//tr//th//input[@placeholder='Search'])[" + (  (indexOfColumn + 2) - 6 ) + "]", basketTableColumnSearchedText);
                }else
                    // Since getting count of box without search button[blank box] is taking long time, manually adding blank box count as 6[if required need to update]
                    // commonUtils.clickEnterText("(//table//thead//tr//th//input[@placeholder='Search'])[" + (  (indexOfColumn + 2) - getCountOfBoxWithoutSearchField(indexOfColumn) ) + "]", value);
                    commonUtils.clickEnterText("(//table//thead//tr//th//input[@placeholder='Search'])[" + (  (indexOfColumn + 2) - 6 ) + "]", value);
                break;
            case TAXRATES_PROVINCECODE_FIELD:
                commonUtils.waitTillElementIsVisible(locators.getProperty("provinceCode"), 15);
                commonUtils.enterText(locators.getProperty("provinceCode"),value);
                break;
            case ALLOW_OR_BLOCK_VALUE_FIELD:
                commonUtils.clickClearAndEnterText(locators.getProperty("value"), value);
                break;
            case MEMBER_FIXED_PRICE_FIELDS:
                commonUtils.enterText("(//label[text()='Member Fixed Price']//parent::div//parent::div//input)[" + fieldName.split("->")[0] + "]", value);
                break;
            case PRODUCT_TABLE_FIELDS:
                indexOfColumn = commonUtils.getIndexOfRequiredColumn(fieldName.split("->")[0], locators.getProperty("tableColumnNamesListLoc"));
                if(value.isEmpty())
                {
                    productTableColumnSearchedText = commonUtils.getText("//table//tbody//tr//td[" + (indexOfColumn + 2) + "]//div");
                    System.out.println("Text: " + productTableColumnSearchedText);
                    commonUtils.doubleClick("//table//tbody//tr//td[" + (indexOfColumn + 2) + "]//div");
                    commonUtils.click("//table//tbody//tr//td[" + (indexOfColumn + 2) + "]//div");
                    //commonUtils.click("//table//tbody//tr//td[" + (indexOfColumn + 2) + "]//div");

                    commonUtils.enterText(locators.getProperty("nameTableColumnSearchBox"), productTableColumnSearchedText);
                } else
                    commonUtils.enterText(locators.getProperty("nameTableColumnSearchBox"), value);
                break;
            default:
                throw new Error("FieldName is not specified to enter text");
        }
    }

    private void enterMultipleIdsInTextBox(String path, String fileName, String locator, int timeOut) {
        try {
            FileReader filereader = new FileReader(path + fileName);

            CSVReader csvReader = new CSVReader(filereader);
            String[] nextRecord;

            while ((nextRecord = csvReader.readNext()) != null) {
                for (String multipleProductId : nextRecord) {
                    log.info("Data from file: " + multipleProductId);
                    commonUtils.waitTillElementIsClickable(locator, timeOut);
                    commonUtils.enterText(locator, multipleProductId);
                }
            }

        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }

    public void updatesValueInField(String value, CommonEnum fieldNameEnum, String fieldName) {
        switch (fieldNameEnum)
        {
            case PAYMENT_FIELDS:
                if(commonUtils.elementIsDisplayed("//*[text()='Payment Edit']//parent::div//parent::div//label[text()='" + fieldName + "']//parent::div//following::div//input[not(@disabled) and @type='number']"))
                {
                    commonUtils.waitUntilVisibleAndClick("//*[text()='Payment Edit']//parent::div//parent::div//label[text()='" + fieldName + "']//parent::div//following::div//input");
                    if(fieldName.equalsIgnoreCase("Min Order"))
                        value = Integer.toString(commonUtils.getRandomNoBetweenTwoNumbers(1, 4));
                    else
                        value = Integer.toString(commonUtils.getRandomNoBetweenTwoNumbers(5, 9));
                    commonUtils.clickClearAndEnterText("//*[text()='Payment Edit']//parent::div//parent::div//label[text()='" + fieldName + "']//parent::div//following::div//input", value);
                }
                break;
            case FULFILMENT_METHOD_STATUS_CHECKBOX:
                switch (value)
                {
                    case "Active":
                        if(!commonUtils.getText(locators.getProperty("fulfilmentMethodStatusCheckboxTextLoc")).equalsIgnoreCase(value))
                        {
                            commonUtils.waitForElementClick(locators.getProperty("status"));
                            commonUtils.waitTillElementIsVisible(locators.getProperty("fulfilmentMethodPopUpCloseButton"), 10);
                            commonUtils.click(locators.getProperty("fulfilmentMethodPopUpCloseButton"));
                        }
                        break;
                    case "Inactive":
                        if(!commonUtils.getText(locators.getProperty("fulfilmentMethodStatusCheckboxTextLoc")).equalsIgnoreCase(value))
                        {
                            commonUtils.waitForElementClick(locators.getProperty("status"));
                            if(commonUtils.elementIsDisplayed(locators.getProperty("yesButton")))
                            {
                                commonUtils.click(locators.getProperty("yesButton"));
                                commonUtils.waitTillElementIsVisible(locators.getProperty("configureFulfilmentMethodPopUpCloseButton"), 10);
                                commonUtils.click(locators.getProperty("configureFulfilmentMethodPopUpCloseButton"));
                            }else {
                                commonUtils.waitTillElementIsVisible(locators.getProperty("fulfilmentMethodPopUpCloseButton"), 10);
                                commonUtils.click(locators.getProperty("fulfilmentMethodPopUpCloseButton"));
                            }
                        }
                        break;
                }
                break;
            case PAYMENT_METHOD_STATUS_CHECKBOX:
                commonUtils.waitTillElementIsVisible(locators.getProperty("firstPaymentMethodStatusCheckboxTextLoc"), 15);
                if(value.equalsIgnoreCase("Inactive"))
                {
                    firstPaymentMethodStatus = commonUtils.getText(locators.getProperty("firstPaymentMethodStatusCheckboxTextLoc"));
                    if (firstPaymentMethodStatus.equalsIgnoreCase("Active")) {
                        commonUtils.waitTillElementIsClickable(locators.getProperty("firstPaymentMethodStatusCheckboxLoc"), 15);
                        commonUtils.click(locators.getProperty("firstPaymentMethodStatusCheckboxLoc"));
                    }
                }
                else
                {
                    firstPaymentMethodStatus = commonUtils.getText(locators.getProperty("firstPaymentMethodStatusCheckboxTextLoc"));
                    if (firstPaymentMethodStatus.equalsIgnoreCase("Inactive")) {
                        commonUtils.waitTillElementIsClickable(locators.getProperty("firstPaymentMethodStatusCheckboxLoc"), 15);
                        commonUtils.click(locators.getProperty("firstPaymentMethodStatusCheckboxLoc"));
                    }
                }
                break;
            case GIFT_CARD_CHECKBOX:
                commonUtils.waitTillElementIsVisible(locators.getProperty("giftCardCheckboxLoc"), 15);
                if(value.equalsIgnoreCase("Inactive"))
                {
                    if (commonUtils.elementIsDisplayed(locators.getProperty("giftCardCheckboxStatusLoc"))) {
                        commonUtils.waitTillElementIsClickable(locators.getProperty("giftCardCheckboxLoc"), 15);
                        commonUtils.click(locators.getProperty("giftCardCheckboxLoc"));
                    }
                }
                else
                {
                    if (!commonUtils.elementIsDisplayed(locators.getProperty("giftCardCheckboxStatusLoc"))) {
                        commonUtils.waitTillElementIsClickable(locators.getProperty("giftCardCheckboxLoc"), 15);
                        commonUtils.click(locators.getProperty("giftCardCheckboxLoc"));
                    }
                }
                break;
            default:
                throw new Error("FieldName is not specified to update text");
        }

    }

    public boolean validatesPopupIsDisplayed(CommonEnum popupEnum, String popUpHeader) {
        switch (popupEnum)
        {
            case ALLOW_OR_BLOCK_POPUP:
            case YES_BUTTON:
            case CANCEL_BUTTON_IN_POPUP:
            case CONTINUE_BUTTON_IN_POPUP:
            case SKU_POPUP:
            case VALIDATION_HEADER_POPUP:
            case FAILURE_HEADER_POPUP:
            case SUCCESS_HEADER_POPUP_OR_SUCCESS_BUTTON:
                commonUtils.waitTillElementIsVisible("//*[text()='" + popUpHeader + "']", 15);
                return commonUtils.elementIsDisplayed("//*[text()='" + popUpHeader + "']");
            case FULFILMENT_METHOD_ERROR_POPUP:
                commonUtils.waitTillElementIsVisible(locators.getProperty("fulfilmentMethodPopupErrorHeader"), 10);
                return commonUtils.elementIsDisplayed(locators.getProperty("fulfilmentMethodPopupErrorHeader"));
            default:
                throw new Error(popUpHeader+ " popup is not specified");
        }
    }

    public boolean validatesPopupMessageIsDisplayed(CommonEnum popupMsgEnum, String popupMessage) {
        switch (popupMsgEnum)
        {
            case VALIDATION_HEADER_POPUP_MESSAGE:
            case SUCCESS_HEADER_POPUP_MSG:
            case FAILURE_HEADER_POPUP_MSG:
                return commonUtils.elementIsDisplayed("//*[text()='" + popupMessage + "']");
            case INVENTORY_FAILURE_HEADER_POPUP_MSG:
                return commonUtils.elementIsDisplayed("//button//parent::div//div//div//div//div[contains(@class,'Text') and contains(.,'"+popupMessage+"')]");
            case FULFILMENT_METHOD_ERROR_POPUP_MESSAGE:
                return commonUtils.elementIsDisplayed(locators.getProperty("fulfilmentMethodPopupErrorMsg"));
            default:
                throw new Error(popupMessage+ " popup message is not specified");
        }
    }

    public String verifiesElementState(CommonEnum fieldEnum, String field, String state) {
        switch (fieldEnum){
            case CHECKOUT_SEARCH_BUTTON:
                if(commonUtils.elementIsDisplayed(locators.getProperty("checkoutSearchButton")))
                    return commonUtils.getAttribute(locators.getProperty("checkoutSearchButton"), "disabled");
                else
                    if(state.equalsIgnoreCase("enabled"))
                        return null;
                    else
                        return "true";
            case ADDRESS_MANAGEMENT_PLACEHOLDER_FIELDS:
                return commonUtils.getAttribute(locators.getProperty("addressManagementPlaceholderFieldLoc").replace("fieldName", field), "disabled");
            case INVENTORY_SEARCH_BUTTON:
                return commonUtils.getAttribute(locators.getProperty("inventorySearchButton"), "disabled");
            case CHECK_AVAILABILITY_BUTTON:
                return commonUtils.getAttribute(locators.getProperty("checkAvailabilityButton"), "disabled");
            case SAVE_BUTTON:
                return commonUtils.getAttribute(locators.getProperty("saveButton"), "disabled");
            case SHIPPING_METHOD_DEFAULT_CHECKBOX:
                return commonUtils.getAttribute(locators.getProperty("defaultCheckBox"), "disabled");
            case SEARCH_BUTTON:
                return commonUtils.getAttribute(searchButton.replace("search", field), "disabled");
            case PREVIOUS_DATE_BUTTON:
                currentDate = commonUtils.getCurrentDate();
                int dayOfCurrentDate = commonUtils.getDayOfMonth(currentDate);

                List<WebElement> previousDisabledDatesList = commonUtils.getWebElements("//table//tbody//tr//td//button[not(@disabled) and text()='"+dayOfCurrentDate+"']//ancestor::tbody//button[@disabled]");
                return commonUtils.getAttribute("//table//tbody//tr//td//button[not(@disabled) and text()='"+dayOfCurrentDate+"']//ancestor::tbody//button[@disabled and text()='"+ previousDisabledDatesList.get(previousDisabledDatesList.size() - 1).getText()+"']", "disabled");
            case NEXT_DATE_AFTER_SPECIFIC_MONTHS_BUTTON:
                currentDate = commonUtils.getCurrentDate();
                long noOfDays = commonUtils.convertMinutesToDays(262800);
                LocalDate dateAfterSpecificMonth = commonUtils.addDaysToDate(currentDate, noOfDays);

                long monthsBetween = commonUtils.findMonthsBetweenDates(currentDate, dateAfterSpecificMonth);
                commonUtils.clickCalendarPreviousOrNextButtonBasedOnMonths(monthsBetween, locators.getProperty("calenderNextIcon"));

                int dayOfDateAfterSpecificMonth = commonUtils.getDayOfMonth(dateAfterSpecificMonth);
                List<WebElement> nextDisabledDatesList = commonUtils.getWebElements("//table//tbody//tr//td//button[not(@disabled) and text()='"+dayOfDateAfterSpecificMonth+"']//ancestor::tbody//button[@disabled]");
                return commonUtils.getAttribute("//table//tbody//tr//td//button[not(@disabled) and text()='"+dayOfDateAfterSpecificMonth+"']//ancestor::tbody//button[@disabled and text()='"+ nextDisabledDatesList.get(0).getText()+"']", "disabled");
            case PREVIOUS_DATE_BEFORE_SPECIFIC_DAYS:
                currentDate = commonUtils.getCurrentDate();
                int dayOfMonth = commonUtils.getDayOfMonth(currentDate);
                if(dayOfMonth <= 8)
                    commonUtils.click(locators.getProperty("calenderPreviousIcon"));

                log.info("Current Day of month: "+dayOfMonth);
                LocalDate dateBeforeEightDays = commonUtils.subtractDaysToDate(currentDate, 8);
                log.info("Date Before 8 days: "+dateBeforeEightDays);

                List<WebElement> previousDisabledDatesListBeforeEightDays = commonUtils.getWebElements("//table//tbody//tr//td//button[@disabled and text()='"+commonUtils.getDayOfMonth(dateBeforeEightDays)+"']");
                List<WebElement> previousDisabledDateList = commonUtils.getWebElements("//table//tbody//tr//td//button[@disabled and text()='"+previousDisabledDatesListBeforeEightDays.get(previousDisabledDatesListBeforeEightDays.size() - 1).getText()+"']");
                if(previousDisabledDateList.size() > 1)
                    return commonUtils.getAttribute("(//table//tbody//tr//td//button[@disabled and text()='"+previousDisabledDatesListBeforeEightDays.get(previousDisabledDatesListBeforeEightDays.size() - 1).getText()+"'])[2]", "disabled");
                else
                    return commonUtils.getAttribute("//table//tbody//tr//td//button[@disabled and text()='"+previousDisabledDatesListBeforeEightDays.get(previousDisabledDatesListBeforeEightDays.size() - 1).getText()+"']", "disabled");
            case SHIPPING_METHOD_DELETE_LINK:
                String deleteShippingLinkState = commonUtils.getAttribute(locators.getProperty("deleteLinkLoc"), "itemprop");
                if(deleteShippingLinkState.equalsIgnoreCase("true"))
                    return "true";
                else
                    return null;
            case EDIT_SHIPPING_METHOD_DELETE_LINK:
                commonUtils.waitTillElementIsVisible("//*[text()='"+field.split("->")[0]+"']", 15);
                return commonUtils.getAttribute("//*[text()='"+field.split("->")[0]+"']", "disabled");
            case SET_MEMBERSHIP_PRICE_BUTTON:
            case MEMBERSHIP_PRICE_ADD_MORE_BUTTON:
                return commonUtils.getAttribute("//*[text()='"+field+"']//parent::label","disabled");
            case ADD_SHIPPING_METHOD_BUTTON:
                return commonUtils.getAttribute(locators.getProperty("addShippingMethodButton"),"disabled");
            case SHIPPING_METHOD_STATUS_CHECKBOX:
                if(commonUtils.elementIsDisplayed(locators.getProperty("shippingMethodStatusToggleButtonEnabledLoc")))
                    return null;
                else
                    return "true";
            default:
                throw new Error("Field is not specified");
        }
    }

    public boolean verifiesFieldIsDisplayed(FieldVisibilityValidationEnum fieldEnum, String field) throws ParseException {
        WebElement pageNumber;
        switch (fieldEnum) {
            case PRODUCT_ID_FIELD:
                commonUtils.waitTillElementIsClickable(locators.getProperty("errorPopup"), 10);
                if (commonUtils.elementIsDisplayed(locators.getProperty("errorPopup"))) {
                    commonUtils.click(locators.getProperty("closeErrorPopup"));
                }
                commonUtils.waitTillElementIsVisible(locators.getProperty("productId"), 10);
                return commonUtils.elementIsDisplayed(locators.getProperty("productId"));
            case PAGINATION_PREVIOUS_PAGE:
                pageNumber = commonUtils.getWebElement(locators.getProperty("pageNumberTextBox"));
                log.info("The input value: " + pageNumber.getAttribute("value"));
                Assert.assertEquals(expectedPreviousPageNumber, Integer.parseInt(pageNumber.getAttribute("value")));
                return true;
            case PAGINATION_NEXT_PAGE:
                pageNumber = commonUtils.getWebElement(locators.getProperty("pageNumberTextBox"));
                log.info("The input value: " + pageNumber.getAttribute("value"));
                Assert.assertEquals(expectedNextPageNumber, Integer.parseInt(pageNumber.getAttribute("value")));
                return true;
            case CARRIER_SERVICES:
            case FULFILMENT_METHODS:
            case ORDER_FULFILMENT_METHODS:
            case STATUS_FIELD:
            case BASKET_TABLE_ERROR_MESSAGE:
            case INVENTORY_MULTIPLE_PRODUCTS_VALIDATION:
            case INVENTORY_RESULTS_PAGE_HEADERS:
            case MEMBERSHIP_PRICE_HEADER_MESSAGE:
                commonUtils.waitTillElementIsVisible("//*[text()='"+field+"']", 10);
                return commonUtils.elementIsDisplayed("//*[text()='"+field+"']");
            case CUSTOM_ID_POPUP_DISMISS_BUTTON:
                return commonUtils.elementIsDisplayed(locators.getProperty("customIdPopupDismissButton"));
            case FILTER_WINDOW_HEADER:
                return commonUtils.elementIsDisplayed(locators.getProperty("filterHeader"));
            case CHECKOUT_CHANNEL:
                return commonUtils.elementIsDisplayed("//label[text()='Channel']//parent::div//div[text()='"+field+"']");
            case CHECKOUT_MARKET:
                return commonUtils.elementIsDisplayed("//label[text()='market']//parent::div//div[text()='"+field+"']");
            case PROVINCE_NAME_AND_CODE_TABLE_FIELDS:
            case TAXRATES_PROVINCECODE_FIELD:
            case DATE_AND_TIME_FIELD:
            case CHECKOUT_TAXATION_DETAIL_PAGE_BUTTON:
            case CHECKOUT_INFORMATION_FIELD:
            case ADDRESS_MANAGEMENT_TABS:
            case SHIPPING_METHOD_HEADER_TABS:
            case ALLOW_BLOCK_VALIDATION_MESSAGE:
                return commonUtils.elementIsDisplayed("//*[text()='"+field.split("->")[0]+"']");
            case ADDRESS_MANAGEMENT_TEXTBOXES:
                return commonUtils.elementIsDisplayed("//input[@value='"+field.split("->")[0]+"']//parent::div//parent::div//parent::div//parent::div//label[text()='"+field.split("->")[1]+"']//parent::div//parent::div//input[@color]");
            case ADDRESS_MANAGEMENT_MULTILINE_TEXTBOXES:
                return commonUtils.elementIsDisplayed("//input[@value='"+field.split("->")[0]+"']//parent::div//parent::div//parent::div//parent::div//parent::div//label[text()='"+field.split("->")[1]+"']//parent::div//parent::div//textarea[@color]");
            case ADDRESS_MANAGEMENT_REQUIRED_CHECKBOXES:
                return commonUtils.elementIsDisplayed("//input[@value='"+field.split("->")[0]+"']//parent::div//parent::div//parent::div//parent::div//parent::div//div[text()='Required']//parent::div//following-sibling::div[@type='checkbox']");
            case INVENTORY_RESULTS_PAGE_CHANNEL:
                return commonUtils.elementIsDisplayed("//div[text()='CHANNEL']//following-sibling::div[text()='"+field+"']");
            case INVENTORY_RESULTS_PAGE_MORE_INFO_BUTTON:
                return commonUtils.elementIsDisplayed(locators.getProperty("moreInfoButton"));
            case INVENTORY_RESULTS_PAGE_DISMISS_BUTTON:
                return commonUtils.elementIsDisplayed("//button[text()='"+field.split("->")[0]+"']");
            case INVENTORY_RESULTS_PAGE_FAILURE_MESSAGE:
                return commonUtils.elementIsDisplayed("//div[contains(.,'" + field + "') and @color='red']");
            case BASKET_TABLE_FIELDS:
                return commonUtils.elementIsDisplayed("//table//thead//tr//th//label[@color='secondary' and text()='"+field.split("->")[0]+"']");
            case BASKET_TABLE_SEARCH_ICONS:
                indexOfColumn = commonUtils.getIndexOfRequiredColumn(field.split("->")[0], locators.getProperty("tableColumnNamesListLoc"));
                // Since getting count of box without search button[blank box] is taking long time, manually adding blank box count as 6[if required need to update]
                //return commonUtils.elementIsDisplayed("(//table//thead//tr//th//input[@placeholder='Search']//parent::div//following-sibling::div)[" + (  (indexOfColumn + 2) - getCountOfBoxWithoutSearchField(indexOfColumn) ) + "]");
                return commonUtils.elementIsDisplayed("(//table//thead//tr//th//input[@placeholder='Search']//parent::div//following-sibling::div)[" + (  (indexOfColumn + 2) - 6 ) + "]");
            case COMMERCE_NEXT_DROPDOWN_COUNTRY:
                return commonUtils.elementIsDisplayed("//div[contains(@class,'select-component')]//input[@value='"+field.split("->")[0]+"']");
            case DATE_CLOSE_BUTTON:
                return commonUtils.elementIsDisplayed("//label[text()='"+field.split("->")[0]+"']//parent::div//parent::div//button");
            case ORDER_FULFILMENT_METHOD_PLACEHOLDER:
                return commonUtils.elementIsDisplayed("//input[@placeholder='"+field.split("->")[0]+"']");
            case ORDER_FULFILMENT_BULK_UPDATE_PLACEHOLDER:
                return commonUtils.elementIsDisplayed("//label[text()='"+field.split("->")[1]+"']//parent::div//parent::div//input[@placeholder='"+field.split("->")[0]+"']");
            case STORED_DATE_VARIABLE:
                String selectedDateFromUI = commonUtils.getText(locators.getProperty("selectedDateLoc"));
                selectedDateFromUI = commonUtils.convertOneDateFormatToAnother("dd/MM/yyyy - hh:mm", "yyyy-MM-dd", selectedDateFromUI);

                DateTimeFormatter selectedDateFromUIFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                LocalDate selectedDateFromUILocalDate = LocalDate.parse(selectedDateFromUI, selectedDateFromUIFormatter);
                return selectedDate.equals(selectedDateFromUILocalDate);
            case MARKET_OR_REGION_SELECTION_DROPDOWN:
                return commonUtils.elementIsDisplayed(locators.getProperty("regionDropdown"));
            case SHIPPING_METHOD_HEADER_TABS_VALUES:
                if(field.equalsIgnoreCase("N/A->Unique Id"))
                    return commonUtils.elementIsDisplayed("//label[text()='"+field.split("->")[1]+"']//parent::div//parent::div//div[text()='"+field.split("->")[0]+"']");
                return commonUtils.elementIsDisplayed("//label[text()='"+field.split("->")[1]+"']//parent::div//div[text()='"+field.split("->")[0]+"']");
            case PRODUCT_NAME_TABLE_COLUMN_VALUES:
                return commonUtils.elementIsDisplayed("//div[text()='"+field+"']");
            case BASKET_DATE_RANGE_EMPTY:
                return commonUtils.elementIsDisplayed(locators.getProperty("basketDateRangeMsgLoc"));
            default:
                throw new Error("Field level validation is not specified");
        }
    }

    private int getCountOfBoxWithoutSearchField(int indexOfColumn) {
        int blankCount = 0;
        for(int columnHeader = 1 ; columnHeader <= indexOfColumn + 2 ; columnHeader++)
        {
            if(!(commonUtils.elementIsDisplayed("((//table//thead//tr)[2]//th)["+columnHeader+"]//input[@placeholder='Search']//parent::div//following-sibling::div")))
            {
                blankCount++;
            }
        }
        return blankCount;
    }

    public boolean validatesFieldIsEnabled(CommonEnum checkFieldEnabledEnum, String field) {
        switch (checkFieldEnabledEnum) {
            case PAGINATION_PREVIOUS_ARROW_BUTTON:
                capturesCurrentPageNumber();
                expectedPreviousPageNumber = Integer.parseInt(currentPage) - 1;
                WebElement previousArrow = commonUtils.getWebElement(locators.getProperty("paginationPreviousArrow"));
                return previousArrow.isEnabled();
            case PAGINATION_NEXT_ARROW_BUTTON:
                capturesCurrentPageNumber();
                expectedNextPageNumber = Integer.parseInt(currentPage) + 1;
                WebElement nextArrow = commonUtils.getWebElement(locators.getProperty("paginationNextArrow"));
                return nextArrow.isEnabled();
            case SEARCH_BUTTON:
                return commonUtils.checkEnabled(searchButton.replace("search", field));
            default:
                throw new Error("Field level validation is not specified");
        }
    }

    public void capturesCurrentPageNumber() {
        WebElement pageNumber = commonUtils.getWebElement(locators.getProperty("pageNumberTextBox"));
        currentPage = pageNumber.getAttribute("value");
    }

    public void clickOnTab(CommonEnum tabEnum, String tab) throws InterruptedException {
        switch (tabEnum)
        {
            case SINGLE_PRODUCT_DETAIL_TAB:
                commonUtils.waitTillElementIsClickable("//p[text()='Products']//parent::div//parent::div//label[text()='" + tab + "']//parent::div", 30);
                commonUtils.waitTillElementIsVisible("//p[text()='Products']//parent::div//parent::div//label[text()='" + tab + "']//parent::div", 30);
                commonUtils.waitForElementClick("//p[text()='Products']//parent::div//parent::div//label[text()='" + tab + "']//parent::div");
                break;
            case ADDRESS_MANAGEMENT_TABS:
                commonUtils.click(locators.getProperty("addressManagementTabsLoc").replace("AddressManagementTab", tab));
                break;
            case SHIPPING_METHOD_TABS:
            case FULFILMENT_METHODS:
                commonUtils.waits(2);
                commonUtils.waitTillElementIsClickable("//label[text()='"+tab+"']//parent::div", 15);
                commonUtils.waitUntilVisibleAndClick("//label[text()='"+tab+"']//parent::div");
                break;
            default:
                throw new Error("tab is not specified"+ tab);
        }
    }

    public void clickOnDropdownOnMenu(DropdownEnum dropdownEnumOnMenu, String dropdownOnMenu) {
        switch (dropdownEnumOnMenu)
        {
            case MODULE_DROPDOWN_MENU:
                commonUtils.waitTillElementIsClickable(moduleDropdownOnMenu.replace("ModuleDropdown", dropdownOnMenu), 15);
                commonUtils.click(moduleDropdownOnMenu.replace("ModuleDropdown", dropdownOnMenu));
                break;
            default:
                throw new Error("Dropdown on menu is not specified");
        }
    }

    public boolean validatesFieldIsSelected(CommonEnum fieldNameEnum, String fieldName) {
        switch (fieldNameEnum)
        {
            case FULFILMENT_METHODS:
                return commonUtils.elementIsDisplayed("//label[text()='"+fieldName+"']//ancestor::a[@aria-current='page']");
            default:
                throw new Error("Dropdown on menu is not specified");
        }
    }

    public String checksStatusOfCheckBox(CommonEnum fieldNameEnum, String fieldName) {
        switch (fieldNameEnum)
        {
            case FULFILMENT_METHOD_STATUS_CHECKBOX:
                return commonUtils.getAttribute(locators.getProperty("fulfilmentMethodStatus"), "checked");
            case PAYMENT_METHOD_STATUS_CHECKBOX:
                if(commonUtils.elementIsDisplayed(locators.getProperty("firstPaymentMethodStatusCheckboxStatusLoc")))
                    return "true";
                else
                    return null;
            case GIFT_CARD_CHECKBOX:
                if(commonUtils.elementIsDisplayed(locators.getProperty("giftCardCheckboxStatusLoc")))
                    return "true";
                else
                    return null;
            default:
                throw new Error("Dropdown on menu is not specified");
        }
    }

    public void selectRandomValueFromDropdown(DropdownEnum dropdownFieldEnum, String dropdownField) {
        switch (dropdownFieldEnum)
        {
            case SHIPPING_METHOD_DROPDOWN:
                selectDataInDropdownByIndex(commonUtils.getRandomNoBetweenTwoNumbers(1,4), locators.getProperty("shippingMethodThreeDropdownDataListLoc"));
                if(dropdownField.equalsIgnoreCase("Carrier Service"))
                    selectedCarrierService = commonUtils.getAttribute("//label[text()='"+dropdownField+"']//parent::div//parent::div//input[@placeholder]//parent::div//input", "value");
                break;
            default:
                throw new Error("Dropdown "+dropdownField+" is not specified");
        }
    }

    private void selectDataInDropdownByIndex(int randomIndex, String dropdownValuesLoc) {
        List<WebElement> dataWebElementList = commonUtils.getWebElements(dropdownValuesLoc);
        commonUtils.selectDataInDropdownByIndex(dataWebElementList, randomIndex);
    }

    public void selectRandomCheckBox(CommonEnum checkBoxFieldEnum, String checkBoxField) {
        switch (checkBoxFieldEnum)
        {
            case SHIPPING_METHOD_CHANNEL_CHECKBOX:
                selectDataInChannelByIndex(commonUtils.getRandomNoBetweenTwoNumbers(1,7), "(//label[text()='"+checkBoxField+"']//parent::div//parent::div//following::div//div[@type='checkbox'])[index]");
                break;
            default:
                throw new Error("checkbox "+checkBoxField+" is not specified");
        }
    }

    private void selectDataInChannelByIndex(int randomIndex, String checkBoxListLoc) {
        commonUtils.scrollAndClick(checkBoxListLoc.replace("index", ""+randomIndex));
    }

    public void clickOnRadioButton(CommonEnum radioButtonEnum, String radioButton) {
        switch (radioButtonEnum)
        {
            case ADD_CARRIER_STRINGS_RADIO_BUTTON:
                commonUtils.click("//div[text()='"+radioButton+"']//preceding-sibling::div");
                break;
            case SUCCESS_HEADER_POPUP_OR_SUCCESS_BUTTON:
                commonUtils.click(locators.getProperty("randomElement"));
                commonUtils.click("//label//div[text()='" + radioButton + "']//preceding-sibling::div");
                break;
            default:
                throw new Error("Radio button " +radioButton+ "is not specified");
        }
    }

    public void clickOnIcon(CommonEnum fieldEnum, String field) {
        switch (fieldEnum)
        {
            case NEWLY_CREATED_SHIPPING_METHOD:
                commonUtils.waitTillElementIsVisible("//div[text()='"+newlyCreatedCustomId+"']//parent::div//parent::div//parent::div//div[@rotate]//parent::div", 10);
                commonUtils.scrollAndClick("//div[text()='"+newlyCreatedCustomId+"']//parent::div//parent::div//parent::div//div[@rotate]//parent::div");
                break;
            case DEFAULT_SHIPPING_METHOD:
                commonUtils.waitTillElementIsVisible(locators.getProperty("defaultEnabledSm"), 10);
                commonUtils.scrollAndClick(locators.getProperty("defaultEnabledSm"));
                break;
            case NON_DEFAULT_SHIPPING_METHOD:
                List<WebElement> shippingMethodDropdownList = commonUtils.getWebElements(locators.getProperty("shippingMethodDropdownListLoc"));
                for(WebElement shippingMethodDropdown : shippingMethodDropdownList)
                {
                    if(!commonUtils.elementIsDisplayed(locators.getProperty("defaultEnabledSm")))
                    {
                        shippingMethodDropdown.click();
                    } else {
                        commonUtils.click("(//div[@title]//parent::div//parent::div//parent::div//div[@rotate])[2]");
                    }
                    break;
                }
                break;
            case FIRST_PAYMENT_METHOD:
                commonUtils.waitTillElementIsClickable(locators.getProperty("firstPaymentMethodPenIconLoc"), 10);
                commonUtils.scrollAndClick(locators.getProperty("firstPaymentMethodPenIconLoc"));
                break;
            default:
                throw new Error("Method "+field+" is not specified");
        }
    }

    public void clickOnCheckBox(CommonEnum checkBoxEnum, String checkbox) {
        switch (checkBoxEnum)
        {
            case DEFAULT_SEARCH_CHECKBOX:
                commonUtils.scrollAndClick(locators.getProperty("defaultSearchCheckbox"));
                break;
            case EXPORT_STATUS_CHECKBOX:
                if (checkbox.equalsIgnoreCase("EXPORT IN PROGRESS"))
                    commonUtils.click(locators.getProperty("filterCheckbox").replace("CheckBoxName", "IN PROGRESS"));
                else if(checkbox.equals("ALL"))
                    commonUtils.click("//label[text()='Channel']//parent::div//parent::div//parent::div//div[contains(@class,'Text') and text()='"+checkbox+"']");
                else
                    commonUtils.click(locators.getProperty("filterCheckbox").replace("CheckBoxName", checkbox));
                break;
            case AUDIT_TRAIL_DOMAIN_ACTIONS_CHECKBOX:
            case BASKET_ADMIN_CHANNEL_CHECKBOX:
                if(checkbox.equalsIgnoreCase("All->Channel"))
                    commonUtils.click("//div[@overflow]//label//div[text()='" + checkbox.split("->")[0] + "']//preceding-sibling::div[@type='checkbox']");
                else
                    commonUtils.click(locators.getProperty("filterCheckbox").replace("CheckBoxName", checkbox));
                break;
            case SHIPPING_METHOD_STATUS_CHECKBOX:
            case FULFILMENT_METHOD_STATUS_CHECKBOX:
                commonUtils.scrollAndClick(locators.getProperty("status"));
                break;
            case FULFILMENT_SITE_ID:
                commonUtils.waitForElementClick("//div[text()='"+checkbox+"']//ancestor::td//preceding-sibling::td//div[@type='checkbox']");
                break;
            case ADDRESS_MANAGEMENT_PLACEHOLDER_FIELDS:
            case VIEW_DROPDOWN_CHECKBOX:
                commonUtils.click("//div[text()='" + checkbox + "']");
                break;
            case MEMBERSHIP_PRICE_TIERS_CHECKBOX:
                if(checkbox.equalsIgnoreCase("ALL->Tier"))
                    commonUtils.click("//div[text()='" + checkbox.split("->")[0] + "']//preceding-sibling::div");
                else
                    commonUtils.click("//div[text()='" + checkbox + "']//preceding-sibling::div");
                break;
            case PRODUCT_ATTRIBUTES_CHECKBOX:
                commonUtils.click("//div[text()='" + checkbox.split("->")[1] + "']//preceding-sibling::div");
                break;
            case SHIPPING_METHOD_DEFAULT_CHECKBOX:
                commonUtils.click(locators.getProperty("defaultCheckBox"));
                break;
            default:
                throw new Error("checkbox is not specified"+ checkbox);
        }
    }

    public void userClickOnOutsideAreaOfPopup(String text) {
        commonUtils.doubleClick("//*[text()='"+text+"']");
    }

    public boolean validatesDropdownValuesIsDisplayedOrNot(DropdownEnum dropdownFieldEnum, String dropdownName, DataTable dropdownValues) {
        switch (dropdownFieldEnum)
        {
            case CHANNEL_DROPDOWN:
                int channelNotDisplayedCount = 0;
                List<List<String>> basketAdminChannelsDataTableFromUI = dropdownValues.asLists(String.class);

                for(List<String> dropdownValuesList: basketAdminChannelsDataTableFromUI)
                {
                    for (String dropdownValue : dropdownValuesList) {
                        if (!commonUtils.elementIsDisplayed("//div[@overflow]//div[text()='" + dropdownValue + "']//preceding-sibling::div[@type='checkbox']"))
                            channelNotDisplayedCount++;
                    }
                }
                return channelNotDisplayedCount < 1;
            default:
                throw new Error("Dropdown "+dropdownName+" is not specified");
        }
    }


    public void validatesDataIsDisplayedInTableColumn(CommonEnum dataEnum, String expectedColumnData, String tableColumn) {
        List<WebElement> columnDataList;
        switch (dataEnum)
        {
            case PRODUCT_TABLE_FIELDS:
                if(expectedColumnData.equalsIgnoreCase("Searched Name"))
                {
                    expectedColumnData = productTableColumnSearchedText;
                }else {
                    expectedColumnData = productAttributeDropdownValue;
                }
                validateDataIsDisplayedInTableColumn(tableColumn, expectedColumnData);
                break;
            case BASKET_TABLE_FIELDS:
                if(expectedColumnData.equalsIgnoreCase("Searched Email") || expectedColumnData.equalsIgnoreCase("Searched First Name") || expectedColumnData.equalsIgnoreCase("Searched Last Name"))
                {
                    expectedColumnData = basketTableColumnSearchedText;
                }
                validateDataIsDisplayedInTableColumn(tableColumn, expectedColumnData);
                break;
            case EXPORT_STATUS_CHECKBOX:
            case BASKET_ADMIN_CHANNEL_CHECKBOX:
                validateDataIsDisplayedInTableColumn(tableColumn, expectedColumnData);
                break;
            case INVENTORY_RESULTS_SIZE_COLUMN_COUNTRY_CODES:
                columnDataList = getColumnDataFromColumnName(tableColumn);
                log.info(String.valueOf(columnDataList.size()));
                for (int index = 1; index <= columnDataList.size() - 1; index++) {
                    Assert.assertEquals(expectedColumnData, columnDataList.get(index).getText().substring(0,2));
                }
                break;
            default:
                throw new Error("Data in table is not specified"+ expectedColumnData);
        }
    }

    private void validateDataIsDisplayedInTableColumn(String tableColumn, String expectedColumnData) {
        List<WebElement> columnDataList = getColumnDataFromColumnName(tableColumn);

        if (columnDataList.size() <= 0) {
            Assert.fail("No data found or page still loading");
        } else {
            log.info(String.valueOf(columnDataList.size()));
            for (int index = 1; index <= columnDataList.size() - 1; index++) {
                Assert.assertEquals(expectedColumnData, columnDataList.get(index).getText());
            }
        }
    }

    public List<WebElement> getColumnDataFromColumnName(String tableColumn) {
        commonUtils.waitTillElementIsVisible(locators.getProperty("tableColumnNamesListLoc"), 10);
        indexOfColumn = commonUtils.getIndexOfRequiredColumn(tableColumn, locators.getProperty("tableColumnNamesListLoc"));
        String columnDataLoc = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
        commonUtils.waitTillElementIsVisible(columnDataLoc, 15);
        List<WebElement> columnDataList = commonUtils.getWebElements(columnDataLoc);
        return columnDataList;
    }

    public void uploadsRequiredFile(String file) throws InterruptedException {
        commonUtils.waits(3);
        commonUtils.uploadFile(file, locators.getProperty("fileUploadLoc"), "src/test/resources/data/uploadingFiles/");
    }

    public void validatesFileDownloadedOrExportedSuccessfully(String fileName) throws IOException {
        JavascriptExecutor jse = (JavascriptExecutor) this.getDriver();

        // Check if file exists
        System.out.println(jse.executeScript("browserstack_executor: {\"action\": \"fileExists\"}"));

        // Get file properties
        System.out.println(jse.executeScript("browserstack_executor: {\"action\": \"getFileProperties\"}"));

        // Get file content. The content is Base64 encoded
        String base64EncodedFile = (String) jse.executeScript("browserstack_executor: {\"action\": \"getFileContent\"}");

        // Decode the content to Base64
        byte[] data = Base64.getDecoder().decode(base64EncodedFile);
        //Copying downloaded csv file in browserstack into BatchReexportDownloadedFile.csv file in local machine
        OutputStream stream = new FileOutputStream("./src/test/resources/data/downloadedfiles/" + fileName);
        stream.write(data);
        stream.close();
    }


    public boolean verifiesRecordsIsDisplayedInTableColumn(String expectedColumnRecord, String tableColumn) {
        indexOfColumn = commonUtils.getIndexOfRequiredColumn(tableColumn, locators.getProperty("tableColumnNamesListLoc"));
        String actualColumnRecordsLoc = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";
        List<WebElement> actualColumnRecordsWebElementList = commonUtils.getWebElements(actualColumnRecordsLoc);
        List<String> actualColumnRecordsStringsList = new ArrayList<>();

        commonUtils.addWebElementListToStringsList(actualColumnRecordsStringsList, actualColumnRecordsWebElementList);

        if (actualColumnRecordsStringsList.size() <= 0) {
            Assert.fail("No data found or page still loading");
        } else {
            for(String actualColumnRecord : actualColumnRecordsStringsList)
            {
                if(!actualColumnRecord.equalsIgnoreCase(expectedColumnRecord))
                {
                    dataMismatchCount++;
                    log.info("Actual Record: "+actualColumnRecord+ " ,Expected record:"+expectedColumnRecord);
                }
            }
        }
        return dataMismatchCount <= 0;
    }

    public void selectsFromAndToDateWithinGivenRange(Integer noOfDays) throws InterruptedException {
        selectionOfFromAndToDateForGivenRange(noOfDays);
    }

    public void selectionOfFromAndToDateForGivenRange(Integer noOfDays) throws InterruptedException {
        commonUtils.click(locators.getProperty("randomElement"));
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        Calendar calendar = Calendar.getInstance();
        Date toDate = calendar.getTime();
        log.info(String.valueOf(toDate));
        // Decrementing days by "noOfDays"
        calendar.add(Calendar.DATE, -(noOfDays - 1));
        Date fromDate = calendar.getTime();
        log.info(String.valueOf(fromDate));


        onlyFromDate = dateFormat.format(fromDate);
        onlyToDate = dateFormat.format(toDate);

        log.info(onlyFromDate);
        log.info(onlyToDate);

        long monthsBetween = ChronoUnit.MONTHS.between(LocalDate.parse(onlyFromDate).withDayOfMonth(1),
                LocalDate.parse(onlyToDate).withDayOfMonth(1));
        log.info(String.valueOf(monthsBetween));

        log.info("From Date after date formatter: " + onlyFromDate);
        log.info("To Date after date formatter: " + onlyToDate);


        commonUtils.waitTillElementIsClickable(locators.getProperty("basketFromDate"), 20);
        commonUtils.click(locators.getProperty("basketFromDate"));
        for (int index = 0; index < monthsBetween; index++) {
            commonUtils.click(locators.getProperty("calenderPreviousIcon"));
        }


        String trimmedFromDate = onlyFromDate.substring(8, 10);
        trimmedFromDate = trimmedDateLessThanTen(trimmedFromDate);
        String trimmedToDate = onlyToDate.substring(8, 10);
        trimmedToDate = trimmedDateLessThanTen(trimmedToDate);

        String calenderFromDateList = "//*[text()='Su']//ancestor::table//*[text()='" + trimmedFromDate + "']";
        String calenderToDateList = "//*[text()='Su']//ancestor::table//*[text()='" + trimmedToDate + "']";

        log.info("Trimmed FROM date to select: " + trimmedFromDate);
        log.info("Trimmed TO date to select: " + trimmedToDate);

        List<WebElement> fromDateList = commonUtils.getWebElements(calenderFromDateList);
        selectDate(fromDateList, trimmedFromDate);

        commonUtils.click(locators.getProperty("randomElement"));
        commonUtils.waitTillElementIsClickable(locators.getProperty("basketToDate"), 20);
        commonUtils.click(locators.getProperty("basketToDate"));

        List<WebElement> toDateList = commonUtils.getWebElements(calenderToDateList);
        selectDate(toDateList, trimmedToDate);

    }

    private String trimmedDateLessThanTen(String trimmedDate) {
        if (Integer.parseInt(trimmedDate) < 10) {
            return trimmedDate.substring(1);
        } else {
            return trimmedDate;
        }
    }

    public void selectDate(List<WebElement> fromOrToDateList, String trimmedDate) throws InterruptedException {
        log.info("FROM or TO date size:" + fromOrToDateList.size());
        String selectFirstTrimmedDate = "//*[text()='Su']//ancestor::table//*[text()='" + trimmedDate + "']";
        String selectSecondTrimmedDate = "(//*[text()='Su']//ancestor::table//*[text()='" + trimmedDate + "'])[2]";

        if (fromOrToDateList.size() == 1) {
            commonUtils.waitTillElementIsClickable(selectFirstTrimmedDate, 20);
            log.info("Clicked first number of size 1");
            commonUtils.click(selectFirstTrimmedDate);
        } else {
            WebElement firstNumber = commonUtils.getWebElement("//*[text()='Su']//ancestor::table//*[text()='" + trimmedDate + "']");
            boolean result = firstNumber.isEnabled();
            log.info(String.valueOf(result));
            if (result) {
                commonUtils.waitTillElementIsClickable(selectFirstTrimmedDate, 20);
                log.info("Clicked first number of size 2");
                commonUtils.click(selectFirstTrimmedDate);
            } else {
                commonUtils.waitTillElementIsClickable(selectSecondTrimmedDate, 20);
                log.info("Clicked second number of size 2");
                commonUtils.click(selectSecondTrimmedDate);
            }

        }

    }

    public void verifiesRecordsIsDisplayedWithinSelectedDateRangeInTable(String tableColumn) throws ParseException {
        WebElement sortButton = commonUtils.getWebElement("//label[text()='"+tableColumn+"']");

        indexOfColumn = commonUtils.getIndexOfRequiredColumn(tableColumn, PropertyFileReader.loadFile("locators", "ComnLocators.properties").getProperty("tableColumnNamesListLoc"));
        String defaultBasketListFirstDate = "//table//tbody//tr//td[" + (indexOfColumn + 2) + "]";

        String basketListFirstDate = commonUtils.getText(defaultBasketListFirstDate);
        log.info("To Date: " + onlyToDate);
        log.info("Date from Table before sorting: " + basketListFirstDate);


        log.info(String.valueOf(dateFormat.parse(onlyFromDate).before(dateFormat.parse(basketListFirstDate))));
        assertTrue(dateFormat.parse(onlyFromDate).before(dateFormat.parse(basketListFirstDate)));

        Actions action = new Actions(this.getDriver());
        action.moveToElement(sortButton).click().perform();


        basketListFirstDate = commonUtils.getText(defaultBasketListFirstDate);
        log.info("Date from Table after sorting: " + basketListFirstDate);
        log.info("From Date: " + onlyFromDate);
        log.info(String.valueOf(dateFormat.parse(onlyToDate).after(dateFormat.parse(basketListFirstDate))));
        assertTrue(dateFormat.parse(onlyToDate).after(dateFormat.parse(basketListFirstDate)));
    }

    public void clicksOnLink(String link) {
        switch (link)
        {
            case "Fulfilment Method Edit":
                commonUtils.waitTillElementIsVisible(locators.getProperty("fulfilmentMethodEditButton"), 15);
                commonUtils.click(locators.getProperty("fulfilmentMethodEditButton"));
                break;
            default:
                throw new Error("Link is not specified " + link);
        }
    }
    public boolean verifiesElementIsCheckedOrNot(CommonEnum fieldEnum, String field, String state) {
        switch (fieldEnum){
            case SHIPPING_METHOD_DEFAULT_CHECKBOX:
                return commonUtils.elementIsDisplayed("//div[text()='"+field+"']//preceding-sibling::div//div[@color='secondary']");
            default:
                throw new Error("Field is not specified");
        }
    }
    public void scrollsToSection(CommonEnum sectionEnum, String section) {
        switch (sectionEnum)
        {
            case ADDRESS_MANAGEMENT_SECTION:
                commonUtils.moveToElement("//*[text()='"+section+"']");
                break;
            default:
                throw new Error("Move to element " + section + " is not specified");
        }
    }

    public boolean verifiesCOMNxtIsDisplayedForRegion(String pageHeader, String region) {
        Assert.assertEquals(region.toUpperCase(), commonUtils.getAttribute("//input[@value='"+region+"']", "value"));
        commonUtils.waitTillElementIsVisible("//p[text()='" + pageHeader + "']", 15);
        return commonUtils.elementIsDisplayed("//p[text()='" + pageHeader + "']");
    }

    public void selectsDateAndTime(CommonEnum dateAndTimeEnum, String dateAndTimeValue) {
        switch (dateAndTimeEnum)
        {
            case CURRENT_DATE:
                currentDate = commonUtils.getCurrentDate();
                int dayOfCurrentDate = commonUtils.getDayOfMonth(currentDate);
                commonUtils.click("//table//tbody//tr//td//button[not(@disabled) and text()='"+dayOfCurrentDate+"']");
                break;
            default:
                throw new Error("Date and time " + dateAndTimeValue + " is not specified");
        }
    }


    public void storesSelectedDataInLocalVariable(CommonEnum fieldEnum, String field, String varName) {
        switch (fieldEnum)
        {
            case DATE_AND_TIME_FIELD:
                selectedDate = currentDate;
                break;
            default:
                throw new Error("Selected Date and time " + field + " is not specified");
        }
    }

    public void validatesFieldsIsDisplayedOnFile(CommonEnum fieldEnum, String field, String file, DataTable fieldsDataTable) throws BiffException, IOException {
        switch (fieldEnum)
        {
            case INVENTORY_DOWNLOADED_FILE_FIELDS:
                FileReader filereader = new FileReader("./src/test/resources/data/downloadedfiles/" + file);

                CSVReader csvReader = new CSVReader(filereader);
                String[] nextRecord;

                List<List<String>> fieldsDataTableFromUI = fieldsDataTable.asLists(String.class);
                for(List<String> fieldsList: fieldsDataTableFromUI)
                {
                    while ((nextRecord = csvReader.readNext()) != null) {
                        for (int listIndex = 0; listIndex < nextRecord.length; listIndex++) {
                            log.info("From UI : " + fieldsList.get(listIndex));
                            log.info("From file: "+ nextRecord[listIndex]);
                            Assert.assertEquals(fieldsList.get(listIndex), nextRecord[listIndex]);
                        }
                        break;
                    }
                }
                break;
            default:
                throw new Error("Fields of file " + field + " is not specified");
        }
    }

    public List<String> getCountryList() {
        List<String> countryList = new ArrayList<>();

        countryList.add("Austria");
        countryList.add("Belgium");
        countryList.add("Czechia");
        countryList.add("Denmark");
        countryList.add("Finland");
        countryList.add("France");
        countryList.add("Germany");
        countryList.add("Greece");
        countryList.add("Ireland");
        countryList.add("Italy");
        countryList.add("Netherlands");
        countryList.add("Norway");
        countryList.add("Poland");
        countryList.add("Portugal");
        countryList.add("Slovakia");
        countryList.add("Spain");
        countryList.add("Sweden");
        countryList.add("Switzerland");
        countryList.add("United Kingdom");

        return countryList;
    }
}


package com.adidas.tpAdidasSerenity.fe.pageObjects;

import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import net.thucydides.core.pages.PageObject;
import org.junit.Assert;
import org.openqa.selenium.WebElement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class InventoryPage extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(InventoryPage.class);

    CommonUtils commonUtils = new CommonUtils();
    BasketAdminPageUS basketAdminPageUS = new BasketAdminPageUS();
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");
    CommonPage commonPage = new CommonPage();


    public void validatesInventorySearchResult() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("noOfSKUIDRecordsLoc"), 15);
        List<WebElement> noOfSKUIDRecords = commonUtils.getWebElements(locators.getProperty("noOfSKUIDRecordsLoc"));
        Assert.assertTrue(noOfSKUIDRecords.size() >= 1);
    }


    public void validatesCountriesInMarketDropdownIsDisplayed() {
        if(commonUtils.elementIsDisplayed(locators.getProperty("inventoryMarketsDropdown")))
        {
            commonUtils.checkDataFromUiAndStoredData(commonPage.getCountryList(), locators.getProperty("marketListFromUI"));
        }
        if(commonUtils.elementIsDisplayed(locators.getProperty("checkoutMarketsDropdown")))
        {
            List<String> checkoutMarketList = commonPage.getCountryList();
            checkoutMarketList.add("adidas-XX");
            commonUtils.checkDataFromUiAndStoredData(checkoutMarketList, locators.getProperty("marketListFromUI"));
        }
        if(commonUtils.elementIsDisplayed(locators.getProperty("paymentMarketsDropdown")))
        {
            List<String> paymentMarketList = commonPage.getCountryList();
            paymentMarketList.add(0, "Adidas-XX");
            commonUtils.checkDataFromUiAndStoredData(paymentMarketList, locators.getProperty("marketListFromUI"));
        }

    }

    public int validatesProductDetailsPage() {
        return commonUtils.getWebElements(locators.getProperty("productIdRecords")).size();
    }

    public String shouldSeeInventoryAtTop(String inventory) {
        return commonUtils.getText("//*[text()='" + inventory + "']");
    }

    public boolean shouldSeeSamePassedRegion(String region) {
        return commonUtils.elementIsDisplayed("//input[@value='" + region + "']//parent::div");
    }


    public void verifiesValidChannelsInChannelsDropdown() {
        List<String> inventoryChannelsList = new ArrayList<>();

        inventoryChannelsList.add("DSS");
        inventoryChannelsList.add("Skava");
        inventoryChannelsList.add("Adidas Consumer App");
        inventoryChannelsList.add("Adidas Confirmed App");
        inventoryChannelsList.add("Yeezy Supply");
        inventoryChannelsList.add("Hype Platform");
        inventoryChannelsList.add("Web");

        basketAdminPageUS.checkChannelsDataFromUIAndStoredChannelsData(inventoryChannelsList);
    }


    public void verifiesCorrectCountOfUnSuccessProductIdOnMoreInfoPopup() {
        String countOfUnSuccessfulProductIdsFromHeader = commonUtils.getText(locators.getProperty("moreInfoPopupErrorHeader"));
        List<WebElement> countOfUnSuccessfulProductIdsFromTable = commonUtils.getWebElements(locators.getProperty("noOfUnSuccessfulProductIds"));
        if(countOfUnSuccessfulProductIdsFromTable.size() > 9)
            Assert.assertEquals(countOfUnSuccessfulProductIdsFromHeader.substring(0, 2), "" + countOfUnSuccessfulProductIdsFromTable.size());
        else
            Assert.assertEquals(countOfUnSuccessfulProductIdsFromHeader.substring(0, 1), "" + countOfUnSuccessfulProductIdsFromTable.size());
    }


    public boolean validatesAvailabilityQuantityPerNodeTableColumnHeaders(String columnHeader, String tableColumn) {
        return commonUtils.elementIsDisplayed("//div[text()='"+tableColumn+"']//parent::div//label[text()='"+columnHeader+"']");
    }


    public boolean validatesFieldsDataOnInventoryResultsPage(String inventoryData) {
        switch (inventoryData){
            case "First Product":
                return commonUtils.elementIsDisplayed(locators.getProperty("inventoryFirstHighlightedProduct"));
            case "Search ID":
                return commonUtils.elementIsDisplayed(locators.getProperty("inventoryProductIdTableSearchIdPlaceholder"));
            case "Search Icon":
                return commonUtils.elementIsDisplayed(locators.getProperty("inventoryProductIdTableSearchButton"));
            default:
                throw new Error("Inventory Results Page field is not specified");
        }
    }

}


package com.adidas.tpAdidasSerenity.fe.pageObjects;

import au.com.bytecode.opencsv.CSVReader;
import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import com.adidas.tpAdidasSerenity.fe.utility.enums.CommonEnum;
import com.adidas.tpAdidasSerenity.fe.utility.enums.DropdownEnum;
import io.cucumber.datatable.DataTable;
import net.thucydides.core.pages.PageObject;
import org.apache.commons.collections.CollectionUtils;
import org.json.JSONException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.junit.Assert;
import org.openqa.selenium.ElementClickInterceptedException;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;
import java.util.stream.Collectors;

public class OrderFulfilmentPage extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(OrderFulfilmentPage.class);

    CommonUtils commonUtils = new CommonUtils();
    CommonPage commonPage = new CommonPage();

    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");

    List<String> uISortedList = new ArrayList<>();
    List<String> bESortedList = new ArrayList<>();
    HashMap<String, String> fulfilmentMethodFieldMap = new HashMap<>();

    List<String> carrierStringsList = new ArrayList<>();
    int noOfAllowOrBlockedItems, indexOfColumn;

    String firstCarrierString = null, expectedSiteId, homeDeliveryPosition, clickAndCollectPosition, pickUpAndDropOffPosition, positionValue,
            statusFromUI, editedSingleCarrierStringText, carrierStringText;
    public static String existingCustomerId;

    public void clickOnFulfilmentTab() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("orderFulfilmentTab"), 20);
        commonUtils.waitForElementClick(locators.getProperty("orderFulfilmentTab"));
    }

    public void goToPassedPageUnderFulfilmentTab() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("configureFulfilmentMethodsPage"), 20);
        commonUtils.waitForElementClick(locators.getProperty("configureFulfilmentMethodsPage"));
    }


    public void clicksOnSpecifiedSiteID(Integer siteID) {
        String siteIdFromLandingPage = "//table//tbody//tr//td[" + siteID + "]//div//div";
        expectedSiteId = commonUtils.getText(siteIdFromLandingPage);
        commonUtils.click(siteIdFromLandingPage);
    }

    public void redirectedToFulfilmentPage() {
        Assert.assertEquals(expectedSiteId, commonUtils.getText("//div[text()='"+expectedSiteId+"']"));
    }


    public void clicksOnEditLinkOfFulfilmentMethod(String fulfilmentMethod) throws InterruptedException {
        Actions builder = new Actions(this.getDriver());
        WebElement fulfilmentMethodEditLink = commonUtils.getWebElement("//p[text()='" + fulfilmentMethod + "']//parent::div//div[text()='Edit']");
        builder.moveToElement(fulfilmentMethodEditLink).build().perform();
        commonUtils.waitTillElementIsClickable("//p[text()='" + fulfilmentMethod + "']//parent::div//div[text()='Edit']", 15);
        commonUtils.waits(3);
        commonUtils.waitUntilVisibleAndClick("//p[text()='" + fulfilmentMethod + "']//parent::div//div[text()='Edit']");
    }

    public void selectsStatusAndEntersLocalDesc() throws InterruptedException {
        clicksOnStatus();
        List<WebElement> descriptionList = commonUtils.getWebElements(locators.getProperty("description"));
        for (int i = 1; i <= descriptionList.size(); i++) {
            log.info("Pre-populated description: " + commonUtils.getText("(//textarea)[" + i + "]"));
            if (commonUtils.getText("(//textarea)[" + i + "]").equalsIgnoreCase("")) {
                commonUtils.enterText("(//textarea)[" + i + "]", "HomeDelivery");
            }
        }

    }

    public void clicksOnStatus() throws InterruptedException {
        commonUtils.waits(2);
        commonUtils.waitUntilVisibleAndClick(locators.getProperty("status"));
    }

    public void doNotEnterPositionAndLocalName() {
        positionValue = commonUtils.getAttribute(locators.getProperty("positionPlaceholder"), "value");
        log.info("Position is: " + positionValue);
        if (!positionValue.equalsIgnoreCase("")) {
            List<WebElement> nameList = commonUtils.getWebElements(locators.getProperty("name"));
            log.info("Name list size is: " + nameList.size());
            for (int i = 1; i <= nameList.size(); i++) {
                log.info("The local name is: " + commonUtils.getAttribute("(//input[@placeholder='Enter name'])[" + i + "]", "value"));
                if (!commonUtils.getAttribute("(//input[@placeholder='Enter name'])[" + i + "]", "value").equalsIgnoreCase("")) {
                    commonUtils.deleteTextByKeys("(//input[@placeholder='Enter name'])[" + i + "]");
                }
            }
        }


    }

    public boolean checksSaveButtonBehavior() {
        log.info("check save button behavior: "+ commonUtils.checkEnabled(locators.getProperty("orderFulfilmentSaveButton")));
        return commonUtils.checkEnabled(locators.getProperty("orderFulfilmentSaveButton"));
    }


    public void clicksOnPrePopulatedSiteId(String siteId) {
        if (commonUtils.elementIsDisplayed("//div[text()='" + siteId + "']")) {
            commonUtils.click("//div[text()='" + siteId + "']");
        }
    }


    public void redirectedToConfigureFulfilmentMethod() {
        homeDeliveryPosition = commonUtils.getText(locators.getProperty("homeDeliveryPositionLoc"));
        clickAndCollectPosition = commonUtils.getText(locators.getProperty("clickAndCollectPositionLoc"));
        pickUpAndDropOffPosition = commonUtils.getText(locators.getProperty("pickUpAndDropOffPositionLoc"));
        log.info("homeDelivery Position is: " + homeDeliveryPosition);
        log.info("clickAndCollect Position is: " + clickAndCollectPosition);
        log.info("pickUpAndDropOff Position is: " + pickUpAndDropOffPosition);
    }

    public void clicksOnSmPositionDropdown() throws InterruptedException {
        commonUtils.waits(3);
        commonUtils.click(locators.getProperty("smPosition"));
    }

    public void clicksOnFmPositionDropdown() throws InterruptedException {
        commonUtils.waits(3);
        commonUtils.click(locators.getProperty("fmPosition"));
    }

    public void clicksOnCloseButtonOfFulfilmentOrShipmentMethod() throws InterruptedException {
        commonUtils.waits(2);
        commonUtils.click(locators.getProperty("fulfilmentOrShippingMethodCloseButton"));
    }

    public boolean checkIfPositionsAreRepeated(String firstMethod, String secondMethod, String firstMethodText, String secondMethodText) {
        boolean flag = false;
        List<WebElement> positionValuesList = commonUtils.getWebElements(locators.getProperty("positionValuesListLoc"));
        for (int i = 1; i <= positionValuesList.size(); i++) {
            positionValue = commonUtils.getText("(//div[@overflow]//div)[" + i + "]");
            log.info("Position value from UI: " + positionValue);
            if (positionValue.equalsIgnoreCase(firstMethod)) {
                log.info("Position value in dropdown is same as " + firstMethodText + "Method");
                flag = true;
            }
            if (positionValue.equalsIgnoreCase(secondMethod)) {
                log.info("Position value in dropdown is same as " + secondMethodText + "Method");
                flag = true;
            }
        }
        return flag;
    }

    public boolean shouldNotSeePositionOfCLCAndPUDO() {
        return checkIfPositionsAreRepeated(clickAndCollectPosition, pickUpAndDropOffPosition, "clickAndCollectPosition", "pickUpAndDropOffPosition");
    }


    public boolean shouldNotSeePositionOfHDAndPUDO() {
        return checkIfPositionsAreRepeated(homeDeliveryPosition, pickUpAndDropOffPosition, "homeDeliveryPosition", "pickUpAndDropOffPosition");
    }

    public boolean shouldNotSeePositionOfHDAndCLC() {
        return checkIfPositionsAreRepeated(homeDeliveryPosition, clickAndCollectPosition, "homeDeliveryPosition", "clickAndCollectPosition");

    }

    public String checksFulfilmentMethodStatus(String fulfilmentMethod) {
        commonUtils.waitTillElementIsVisible("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//label[text()='Status']//parent::div//div//following::div" , 30);
        statusFromUI = commonUtils.getText("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//label[text()='Status']//parent::div//div//following::div");
        log.info(statusFromUI);
        return statusFromUI;
    }


    /*public void enablesFmIfDisabledElseDisableAllSmsUnderPassedFm(String fulfilmentMethod, String passedStatus) throws InterruptedException {
        statusFromUI= checksFulfilmentMethodStatus(fulfilmentMethod);
        if (statusFromUI.equalsIgnoreCase(passedStatus)) {
            log.info("status: " + statusFromUI);
            clicksOnEditLinkOfFulfilmentMethod(fulfilmentMethod);
            clicksOnToggleButton();
            log.info(String.valueOf(commonUtils.checkSelected(locators.getProperty("orderFulfilmentSaveButton"))));
            clicksOnSaveButtonOfConfigureFulfilmentMethod();
            clicksOnCloseButtonOfFmOrSmPopup();
        } else {
            disableAllShippingMethods(fulfilmentMethod);
        }
    }*/


    public void disableAllShippingMethods(String fulfilmentMethod) throws InterruptedException {
        List<WebElement> smsEnabledStatusList = commonUtils.getWebElements("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']/..//div[text()='ENABLED']");
        log.info("No of shipping methods: " + smsEnabledStatusList.size());
        for (int i = 0; i < smsEnabledStatusList.size(); i++) {
            disableSingleSm(fulfilmentMethod);
        }
    }

    public void disableSingleSm(String fulfilmentMethod) throws InterruptedException {
        Actions builder = new Actions(this.getDriver());
        WebElement smsEnabledStatusEditLink = commonUtils.getWebElement("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']/..//div[text()='ENABLED']//..//..//..//div[@rotate='0']");
        builder.moveToElement(smsEnabledStatusEditLink).build().perform();

        commonUtils.waits(2);
        commonUtils.click("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']/..//div[text()='ENABLED']//..//..//..//div[@rotate='0']");
        commonUtils.click("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']/..//div[text()='ENABLED']//..//..//..//..//div[text()='Edit']");
        clicksOnStatus();
        clicksOnSaveButtonOfConfigureShippingMethod();
        if (commonUtils.elementIsDisplayed("//div[text()='Switching default shipping method']")) {
            commonUtils.click(locators.getProperty("yesButton"));
            clicksOnCloseButtonOfFmOrSmPopup();
        }
        if (commonUtils.elementIsDisplayed(locators.getProperty("shippingMethodPopupErrorHeader"))) {
            clicksOnCloseButtonOfSmErrorPopup();
            clicksOnCloseButtonOfFulfilmentOrShipmentMethod();
            commonUtils.click(locators.getProperty("yesButton"));
            List<String> fms = new ArrayList<>();
            fms.add("Home Delivery");
            fms.add("Click and Collect");
            fms.add("Pick up, drop off");
            String nextFm = null;
            for (int j = 0; j < fms.size(); j++) {
                if (!fms.get(j).equalsIgnoreCase(fulfilmentMethod)) {
                    nextFm = fms.get(j);
                    break;
                }
            }
            enablesFulfilmentMethod(nextFm, "DISABLED");
            enableFirstSmIfNoSmIsEnabled(nextFm);
            disableSingleSm(fulfilmentMethod);
        }
        if (commonUtils.elementIsDisplayed(locators.getProperty("fulfilmentMethodPopUpCloseButton"))) {
            commonUtils.click(locators.getProperty("fulfilmentMethodPopUpCloseButton"));
        }
    }

    public void clicksOnToggleButton() throws InterruptedException {
        clicksOnStatus();
    }

    public void clicksOnSaveButtonOfConfigureFulfilmentMethod() {
        commonUtils.click(locators.getProperty("orderFulfilmentSaveButton"));
    }

    public String shouldSeeFulfilmentMethodPopupHeader() {
        return commonUtils.getText(locators.getProperty("fulfilmentMethodSuccessPopUpHeader"));
    }

    public String shouldSeeSuccessMessage(String successMsg) {
        return commonUtils.getText("//div[text()='" + successMsg + "']");
    }

    public void clicksOnCloseButtonOfFmOrSmPopup() throws InterruptedException {
        commonUtils.waits(2);
        commonUtils.click(locators.getProperty("fulfilmentMethodPopUpCloseButton"));
    }

    public boolean checksToggleButtonBehavior() {
        return commonUtils.elementIsDisplayed(locators.getProperty("checkToggleButton"));
    }

    public boolean checksStatusAndAddShippingMethodButtonIsDisabled(String fulfilmentMethod) throws InterruptedException {
        WebElement statusInCFMSPage = commonUtils.getWebElement("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//label[text()='Status']//parent::div//div//following::div");
        WebElement addShippingMethodButton = commonUtils.getWebElement("//span[text()='Add Shipping Method']//ancestor::button");

        if (statusInCFMSPage.getText().equalsIgnoreCase("DISABLED")) {
            return addShippingMethodButton.isEnabled();
        }
        return true;
    }


    /*public boolean checksStatusAndAddShippingMethodButtonIsEnabled(String fulfilmentMethod) throws InterruptedException {
        WebElement statusInCFMSPage = commonUtils.getWebElement("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//label[text()='Status']//parent::div//div//following::div");
        WebElement addShippingMethodButton = commonUtils.getWebElement("(//span[text()='Add Shipping Method']//ancestor::button)[2]");

        if (statusInCFMSPage.getText().equalsIgnoreCase("ENABLED")) {
            return addShippingMethodButton.isEnabled();
        }
        return false;
    }*/


    public void entersLocalName() {
        List<WebElement> nameList = commonUtils.getWebElements(locators.getProperty("name"));
        log.info("Name list size is: " + nameList.size());
        for (int i = 1; i <= nameList.size(); i++) {
            log.info("The local name is: " + commonUtils.getAttribute("(//input[@placeholder='Enter name'])[" + i + "]", "value"));
            if (!commonUtils.getAttribute("(//input[@placeholder='Enter name'])[" + i + "]", "value").equalsIgnoreCase("")) {
                commonUtils.deleteTextByKeys("(//input[@placeholder='Enter name'])[" + i + "]");
            }
            commonUtils.enterText("(//input[@placeholder='Enter name'])[" + i + "]", "Test");
        }
    }


    public boolean verifiesFulfilmentMethodWithPrefilledDetails() throws InterruptedException {
        commonUtils.waits(2);
        if (!commonUtils.getText(locators.getProperty("uniqueId")).equalsIgnoreCase("")) {
            if (!commonUtils.getAttribute(locators.getProperty("positionPlaceholder"), "value").equalsIgnoreCase("")) {
                return !commonUtils.getAttribute(locators.getProperty("name"), "value").equalsIgnoreCase("");
            }
        }
        return false;
    }


    public String goesToConfigureFulfilmentMethodsScreen(String fulfilmentMethodsPageHeader) {
        return commonUtils.getText("//p[text()='" + fulfilmentMethodsPageHeader + "']").toUpperCase();
    }

    public void clicksOnBackButton() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("backButton"), 15);
        commonUtils.click(locators.getProperty("backButton"));
    }

    public String redirectedToLandingPage(String landingPageHeader) {
        return commonUtils.getText("//p[text()='" + landingPageHeader + "']").toUpperCase();
    }


    public String validatesConfigureFmOrSmPageHeader(String configureFmOrSmPageHeader) {
        return commonUtils.getText("//p[text()='" + configureFmOrSmPageHeader + "']").toUpperCase();
    }


    public void clicksOnEditLinkOrAddShippingMethodButton(String fulfilmentMethod) throws InterruptedException {
        if (commonUtils.elementIsDisplayed("//p[text()='Shipping Methods']//parent::div//div[text()='Edit']")) {
            commonUtils.click("//p[text()='Shipping Methods']//parent::div//div[text()='Edit']");
        } else {
            if (!checksStatusAndAddShippingMethodButtonIsDisabled(fulfilmentMethod)) {
                clicksOnEditLinkOfFulfilmentMethod(fulfilmentMethod);
                clicksOnToggleButton();
                log.info(String.valueOf(commonUtils.checkSelected(locators.getProperty("orderFulfilmentSaveButton"))));
                clicksOnSaveButtonOfConfigureFulfilmentMethod();
                clicksOnCloseButtonOfFmOrSmPopup();
            }
            clicksOnPassedAddShippingMethodButton(fulfilmentMethod);

        }
    }

    public void clicksOnPassedAddShippingMethodButton(String fulfilmentMethod) throws InterruptedException {
        commonUtils.waitTillElementIsVisible("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//button", 15);
        commonUtils.waitForElementClick("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//button");
    }

    public void clicksOnCarrierNameDropdown() throws InterruptedException {
        commonUtils.waitTillElementIsVisible(locators.getProperty("carrierNameDropdown"), 15);
        commonUtils.moveToElement(locators.getProperty("carrierNameDropdown"));
        commonUtils.waitForElementClick(locators.getProperty("carrierNameDropdown"));
    }

    public void verifiesCorrectDataInCarrierNameDropdown() {
        List<String> carrierNameList = getCarrierNameDataList();
        //Collections.sort(carrierNameList, Collator.getInstance(Locale.ENGLISH));
        placeNoneNotApplicableAtTopOfList(carrierNameList);
        Assert.assertEquals(carrierNameList.get(0), commonUtils.getText(locators.getProperty("shippingMethodThreeDropdownDataListLoc")));
        commonUtils.checkDataFromUiAndStoredData(carrierNameList, locators.getProperty("shippingMethodThreeDropdownDataListLoc"));
    }

    public void placeNoneNotApplicableAtTopOfList(List<String> carrierNameList) {
        String removedString = "";
        for (int i = 0; i < carrierNameList.size(); i++) {
            if (carrierNameList.get(i).equals("NONE(Not applicable)")) {
                removedString = carrierNameList.remove(i);
                carrierNameList.add(0, removedString);
            }
        }
    }

    public List<String> getCarrierNameDataList() {
        List<String> carrierNameList = new ArrayList<>();

        carrierNameList.add("NONE(Not applicable)");
        carrierNameList.add("Chronopost");
        carrierNameList.add("Colissimo");
        carrierNameList.add("CORREOS");
        carrierNameList.add("DHL");
        carrierNameList.add("DPD");
        carrierNameList.add("EVRI");
        carrierNameList.add("InPost");
        carrierNameList.add("NDP-DPD");
        carrierNameList.add("Post NL");
        carrierNameList.add("PostNord");
        carrierNameList.add("Royal Mail");
        carrierNameList.add("Swiss Post");
        carrierNameList.add("UPS");

        return carrierNameList;
    }


    public void clicksOnCarrierServiceDropdown() throws InterruptedException {
        commonUtils.waits(2);
        commonUtils.moveToElement(locators.getProperty("carrierServiceDropdown"));
        commonUtils.scrollAndClick(locators.getProperty("carrierServiceDropdown"));
    }


    public void verifiesCorrectDataInCarrierServiceDropdown() {
        List<String> carrierServiceList = getCarrierServiceDataList();
        commonUtils.checkDataFromUiAndStoredData(carrierServiceList, locators.getProperty("shippingMethodThreeDropdownDataListLoc"));
    }

    public List<String> getCarrierServiceDataList() {
        List<String> carrierServiceList = new ArrayList<>();

        carrierServiceList.add("Not applicable");
        carrierServiceList.add("Standard");
        carrierServiceList.add("Express");
        carrierServiceList.add("Sameday");
        carrierServiceList.add("GRND_INLINE");
        carrierServiceList.add("2NDDAY_INLINE");
        carrierServiceList.add("NXTDAY_INLINE");
        return carrierServiceList;
    }


    public void clicksOnTaxClassDropdown() throws InterruptedException {
        commonUtils.waitUntilVisibleAndClick(locators.getProperty("taxClassDropdown"));
    }

    public void verifiesCorrectDataInTaxClassDropdown() {
        List<String> taxClassList = getTaxClassDataList();
        commonUtils.checkDataFromUiAndStoredData(taxClassList, locators.getProperty("shippingMethodThreeDropdownDataListLoc"));
    }

    private List<String> getTaxClassDataList() {
        List<String> taxClassList = new ArrayList<>();

        taxClassList.add("NoTax");
        taxClassList.add("FullTax");
        taxClassList.add("KidsTax");
        taxClassList.add("ReducedTax");
        taxClassList.add("ReducedTax(New)");
        return taxClassList;
    }


    public void verifiesCorrectChannelsOnCreateSMScreen() {
        List<String> channelsList = new ArrayList<>();

        channelsList.add("DSS");
        channelsList.add("AdidasConsumerApp");
        channelsList.add("Skava");
        channelsList.add("Adidasconfirmedapp");
        channelsList.add("YeezySupply");
        channelsList.add("HypePlatform");
        channelsList.add("Web");


        checkChannelsORProductTypesData(channelsList);

    }

    public void checkChannelsORProductTypesData(List<String> storedDataList) {
        for (int i = 0; i < storedDataList.size(); i++) {
            String storedData = storedDataList.get(i);
            String dataFromUI = commonUtils.getText("//div[text()='" + storedData + "']");
            Assert.assertEquals(dataFromUI, storedData);
        }
    }


    public void verifiesCorrectProductTypesOnCreateSMScreen() {

        List<String> ProductTypesList = new ArrayList<>();

        ProductTypesList.add("Inline");
        ProductTypesList.add("Preorder");
        ProductTypesList.add("Personalized");
        ProductTypesList.add("Backorder");
        ProductTypesList.add("Preorderpersonalized");
        ProductTypesList.add("Egiftcard");
        ProductTypesList.add("Backorderpersonalized");

        checkChannelsORProductTypesData(ProductTypesList);
    }


    public void enablesFulfilmentMethod(String fulfilmentMethod, String status) throws InterruptedException {
        statusFromUI= checksFulfilmentMethodStatus(fulfilmentMethod);
        if (statusFromUI.equalsIgnoreCase(status)) {
            log.info("status: " + statusFromUI);
            clicksOnEditLinkOfFulfilmentMethod(fulfilmentMethod);
            clicksOnToggleButton();
            log.info(String.valueOf(commonUtils.checkSelected(locators.getProperty("orderFulfilmentSaveButton"))));
            clicksOnSaveButtonOfConfigureFulfilmentMethod();
            clicksOnCloseButtonOfFmOrSmPopup();
        }
    }

    public void clicksOnAddShippingMethodButton(String fulfilmentMethod) throws InterruptedException {
        clicksOnPassedAddShippingMethodButton(fulfilmentMethod);
    }


    public void addsAllDetailsExceptCarrierNameField() throws InterruptedException {
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
        /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }

    public void addsLocalNames() {
        List<WebElement> nameList = commonUtils.getWebElements(locators.getProperty("name"));
        log.info("Name list size is: " + nameList.size());
        for (int i = 1; i <= nameList.size(); i++) {
            log.info("The local name is: " + commonUtils.getAttribute("(//input[@placeholder='Enter name'])[" + i + "]", "value"));
            if (commonUtils.getAttribute("(//input[@placeholder='Enter name'])[" + i + "]", "value").equalsIgnoreCase("")) {
                commonUtils.enterText("(//input[@placeholder='Enter name'])[" + i + "]", "Home Delivery");
            }
        }
    }

    public void selectsProductTypes() {
        commonUtils.scrollAndClick(locators.getProperty("inlineProductTypeCheckBox"));
    }

    public void selectsChannels() {
        commonUtils.scrollAndClick(locators.getProperty("dssChannelCheckBox"));
    }

    public void selectsTaxClassFromDropdown() throws InterruptedException {
        clicksOnTaxClassDropdown();
        commonUtils.click(locators.getProperty("shippingMethodThreeDropdownDataListLoc"));
    }

    public void addsMaximumDeliveryDays(String max) {
        commonUtils.enterTextByKeys(locators.getProperty("maxDeliveryDays"), max);

    }

    public void addsMinimumDeliveryDays(String min) {
        commonUtils.enterTextByKeys(locators.getProperty("minDeliveryDays"), min);
    }

    public void addsShipmentUpSellPrice() {
        commonUtils.enterText(locators.getProperty("shipmentUpSellPrice"), "55.50");
    }

    public void addsThresholdPrice() {
        commonUtils.enterText(locators.getProperty("thresholdPrice"), "175.50");
    }

    public void addsBasedFixedPrice() {
        commonUtils.enterText(locators.getProperty("baseFixedPrice"), "160");
    }

    public void clicksOnCreateShippingMethodPositionDropdown() throws InterruptedException {
        commonUtils.waits(3);
        commonUtils.moveToElement(locators.getProperty("shippingMethodPositionDropdown"));
        commonUtils.scrollAndClick(locators.getProperty("shippingMethodPositionDropdown"));
    }

    public void selectsPosition() throws InterruptedException {
        clicksOnCreateShippingMethodPositionDropdown();
        commonUtils.click(locators.getProperty("shippingMethodThreeDropdownDataListLoc"));
    }

    public void selectsCarrierService() throws InterruptedException {
        clicksOnCarrierServiceDropdown();
        commonUtils.click(locators.getProperty("shippingMethodThreeDropdownDataListLoc"));
    }

    /*
    OUT OF SCOPE BECAUSE OF NEW CARRIER STRING FIELD IMPLEMENTATION
    public void addsCarrierStringField() {
        String randomCarrierString=getSaltString();
        commonUtils.enterText(locators.getProperty("carrierStringLoc"), randomCarrierString);
    }*/

    public String getSaltString(int size) {
        String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < size) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        return salt.toString();
    }

    public boolean checksCreateSMMethodSaveButtonBehavior() {
        log.info(String.valueOf(commonUtils.checkEnabled(locators.getProperty("shippingMethodSaveButton"))));
        return commonUtils.checkEnabled(locators.getProperty("shippingMethodSaveButton"));
    }

    public void selectsCarrierName() throws InterruptedException {
        clicksOnCarrierNameDropdown();
        commonUtils.click(locators.getProperty("shippingMethodThreeDropdownDataListLoc"));
    }


    public void addsAllDetailsExceptCarrierStringField() throws InterruptedException {
        selectsCarrierName();
        selectsCarrierService();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }


    public void addsAllDetailsExceptCarrierServiceField() throws InterruptedException {
        selectsCarrierName();
        //It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
        /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }


    public void addsAllDetailsExceptLocaleNameField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
    }


    public void addsAllDetailsExceptBaseFixedPriceField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId();
        selectsPosition();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }

    public void addsAllDetailsExceptThresholdField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
        addsShipmentUpSellPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }

    public void addsAllDetailsExceptShipmentUpSellField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }

    public void addsAllDetailsExceptThresholdAndShipmentUpSellField() throws InterruptedException {
        selectsCarrierService();
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }

    public void entersShipmentUpSellGreaterThanThresholdField(String shipmentUpSellValue, String thresholdValue) {
        commonUtils.deleteTextByKeys(locators.getProperty("shipmentUpSellPrice"));
        commonUtils.deleteTextByKeys(locators.getProperty("thresholdPrice"));
        commonUtils.enterText(locators.getProperty("shipmentUpSellPrice"), shipmentUpSellValue);
        commonUtils.enterText(locators.getProperty("thresholdPrice"), thresholdValue);
    }

    public void entersThresholdAndShipmentUpSellField(String thresholdValue, String shipmentUpSellValue) {
        commonUtils.deleteTextByKeys(locators.getProperty("shipmentUpSellPrice"));
        commonUtils.deleteTextByKeys(locators.getProperty("thresholdPrice"));

        commonUtils.enterText(locators.getProperty("thresholdPrice"), thresholdValue);
        commonUtils.enterText(locators.getProperty("shipmentUpSellPrice"), shipmentUpSellValue);
    }

    public String shouldSeeErrorMessageBelowField(String errorMessage, String field) {
        return commonUtils.getText("//label[text()='" + field + "']//parent::div//parent::div//div[text()='" + errorMessage + "']");
    }

    public void clicksOnYesButtonOfConfigureSMClosePopup() {
        commonUtils.click(locators.getProperty("yesButtonOfConfigureSMClosePopup"));
    }


    public void addsAllDetailsExceptPositionField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }


    public void addsAllDetailsExceptChannelsField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsProductTypes();
        addsLocalNames();
    }


    public void addsAllDetailsExceptProductTypesField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        addsLocalNames();
    }


    public void addsAllDetailsExceptMinimumField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }


    public void addsAllDetailsExceptMaximumField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId();
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }

    public void clicksOnEditLinkOfShippingMethod(String fulfilmentMethod) {
        commonUtils.scrollAndClick("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']//..//div[@rotate='0']");
        commonUtils.click("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Edit']");
    }

    public void clicksOnSaveButtonOfConfigureShippingMethod() {
        commonUtils.click(locators.getProperty("orderFulfilmentSaveButton"));
    }

    /*public String minValueFromConfigureFmsScreen(String fulfilmentMethod) {
        commonUtils.click("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']//..//div[@rotate='0']");
        return commonUtils.getText(locators.getProperty("minValueFromConfigureFmsScreen"));
    }

    public String maxValueFromConfigureFmsScreen(String fulfilmentMethod) {
        String maxValue = commonUtils.getText(locators.getProperty("maxValueFromConfigureFmsScreen"));
        commonUtils.click("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']//..//div[@rotate='180']");
        return maxValue;
    }*/

    public String checksPassedFieldValueAndUpdatedFieldValueInConfigureFmsScreen(String field) {
        switch(field)
        {
            case "min":
                return commonUtils.getText("(//div[text()='"+field+"']//parent::div//parent::div//parent::div//following-sibling::div//div//div)[1]");
            case "max":
                return commonUtils.getText("(//div[text()='"+field+"']//parent::div//parent::div//parent::div//following-sibling::div//div//div)[2]");
            default:
                throw new Error("Failed to get text from " + field +" field");
        }
    }

    
    
   /*
        It is commented because of new carrier string implementation and carrier string is not a mandatory field   public void updatesCarrierString() {
        commonUtils.deleteTextByKeys(locators.getProperty("carrierStringLoc"));
        addsCarrierStringField();
    }*/


    /*public void updatesThresholdAndShipmentUpSell(String thresholdValue,String shipmentUpSellValue) {
        commonUtils.deleteTextByKeys(locators.getProperty("shipmentUpSellPrice"));
        commonUtils.deleteTextByKeys(locators.getProperty("thresholdPrice"));
        commonUtils.enterText(locators.getProperty("thresholdPrice"), thresholdValue);
        commonUtils.enterText(locators.getProperty("shipmentUpSellPrice"), shipmentUpSellValue);

    }*/

    /*public void updatesTaxClass() throws InterruptedException {
        selectsTaxClassFromDropdown();
    }*/


    public void selectsRandomPosition() throws InterruptedException {
        clicksOnFmPositionDropdown();
        commonUtils.click("(//div[@overflow]//div)[2]");
    }

    public void entersDescription() {
        List<WebElement> descriptionList = commonUtils.getWebElements(locators.getProperty("description"));
        for (int i = 1; i <= descriptionList.size(); i++) {
            log.info("Pre-populated description: " + commonUtils.getText("(//textarea)[" + i + "]"));
            if (!commonUtils.getText("(//textarea)[" + i + "]").equalsIgnoreCase("")) {
                commonUtils.deleteTextByKeys("(//textarea)[" + i + "]");
            }
            commonUtils.enterText("(//textarea)[" + i + "]", "test");
        }
    }


    public boolean checksLocalesForSiteIdsBasedOnRegion(String country) throws InterruptedException {

        /*By checkIfConfigureFmHeaderIsVisible=By.xpath(configureFulfilmentMethodsHeader);
        if(commonUtils.elementIsDisplayed(checkIfConfigureFmHeaderIsVisible))
        {

        }
        else
        {
            if(region.equalsIgnoreCase("WESTERN EUROPE"))
            {
                List<String> weSiteIdsList=new ArrayList<>();

                weSiteIdsList.add("adidas-AT");
                *//*weSiteIdsList.add("adidas-IT");
                weSiteIdsList.add("adidas-BE");
                weSiteIdsList.add("adidas-NL");
                weSiteIdsList.add("adidas-CZ");
                weSiteIdsList.add("adidas-NO");
                weSiteIdsList.add("adidas-DK");
                weSiteIdsList.add("adidas-PL");
                weSiteIdsList.add("adidas-FI");
                weSiteIdsList.add("adidas-PT");
                weSiteIdsList.add("adidas-FR");
                weSiteIdsList.add("adidas-SK");
                weSiteIdsList.add("adidas-DE");
                weSiteIdsList.add("adidas-ES");
                weSiteIdsList.add("adidas-GR");
                weSiteIdsList.add("adidas-SE");
                weSiteIdsList.add("adidas-IE");*//*
                weSiteIdsList.add("adidas-CH");
                //weSiteIdsList.add("adidas-UK");

                Map<String, List<String>> map = new HashMap<>();
                log.info("Size is: " +weSiteIdsList.size());
                for(int i=0;i<weSiteIdsList.size();i++)
                {
                    commonUtils.click("//div[text()='"+weSiteIdsList.get(i)+"']");
                    commonUtils.waits(2);
                    if(commonUtils.getText("//div[text()='"+weSiteIdsList.get(i)+"']").equalsIgnoreCase("adidas-AT"))
                    {
                        List<String> adidasAtLocales = new ArrayList<>();
                        adidasAtLocales.add("de-AT");
                        map.put(commonUtils.getText("//div[text()='"+weSiteIdsList.get(i)+"']"), adidasAtLocales);

                        for (Map.Entry<String, List<String>> entry : map.entrySet()) {
                            String key = entry.getKey();
                            log.info("Key = " + key);
                            List<String> values = entry.getValue();
                            for(int j=0;j<values.size();j++)
                            {
                                log.info("Values = " + values.get(j));
                            }
                        }
                        clicksOnBackButton();
                    }
                    else if(commonUtils.getText("//div[text()='"+weSiteIdsList.get(i)+"']").equalsIgnoreCase("adidas-CH"))
                    {
                        List<String> adidasChLocales = new ArrayList<>();
                        adidasChLocales.add("en-CH");
                        adidasChLocales.add("fr-CH");
                        adidasChLocales.add("de-CH");
                        adidasChLocales.add("it-CH");
                        map.put(commonUtils.getText("//div[text()='"+weSiteIdsList.get(i)+"']"), adidasChLocales);

                        for (Map.Entry<String, List<String>> entry : map.entrySet()) {
                            String key = entry.getKey();
                            log.info("Key = " + key);
                            List<String> values = entry.getValue();
                            for(int j=0;j<values.size();j++)
                            {
                                log.info("Values = " + values.get(j));
                            }
                        }
                        clicksOnBackButton();
                    }
                }

            }
        }*/

        boolean flag = true, checkMultipleSiteId = false;
        int multipleSiteIdCount = 0;
        List<WebElement> multipleSiteIdList = null;
        JSONParser parser = new JSONParser();
        try {
            Object obj = parser.parse(new FileReader("./src/test/resources/data/jsonFiles/Locales.json"));
            JSONArray regions = (JSONArray) obj;
            log.info("Number of countries:" + regions.size());

            for (int i = 0; i < regions.size(); i++) {
                JSONObject region = (JSONObject) regions.get(i);
                if (country.equalsIgnoreCase((String) region.get("region"))) {
                    JSONArray markets = (JSONArray) region.get("market");
                    log.info("Number of site-Id's under " + country + " is " + markets.size());

                    for (int j = 0; j < markets.size(); j++) {
                        JSONObject market = (JSONObject) markets.get(j);
                        log.info("Site Id- " + market.get("marketName"));
                        if (markets.size() == 1) {
                            checkLocales(market);
                        } else {
                            checkMultipleSiteId = true;
                            multipleSiteIdList = commonUtils.getWebElements(locators.getProperty("multipleSiteIdListLoc"));
                            commonUtils.waitUntilVisibleAndClick("//div[text()='" + market.get("marketName") + "']");
                            commonUtils.waits(2);
                            checkLocales(market);
                            commonUtils.waits(2);
                            clicksOnBackButton();
                            multipleSiteIdCount++;
                        }
                    }
                    if (checkMultipleSiteId) {
                        Assert.assertEquals(multipleSiteIdList.size(), multipleSiteIdCount);
                        checkMultipleSiteId = false;
                    }
                }
            }
        } catch (NoSuchElementException | AssertionError e2) {
            flag = false;
            log.error(e2.getMessage());
        } catch (ElementClickInterceptedException e3) {
            flag = false;
            log.error("Element click intercepted exception(Element is not clickable):" + e3.getMessage());
        } catch (IOException | ParseException e4) {
            flag = false;
            log.error("Input file is missing:" + e4.getMessage());
        }
        return flag;
    }

    public void checkLocales(JSONObject market) {
        JSONArray locales = (JSONArray) market.get("locale");
        log.info(String.valueOf(locales.size()));

        for (int k = 0; k < locales.size(); k++) {
            commonUtils.waitTillElementIsVisible("//div[text()='" + locales.get(k) + "']", 15);
            log.info("Locale from backend :" + locales.get(k) + " Locale from UI :" + commonUtils.getText("//div[text()='" + locales.get(k) + "']"));
            Assert.assertEquals(locales.get(k), commonUtils.getText("//div[text()='" + locales.get(k) + "']"));
        }
    }


    public void enableFirstSmIfNoSmIsEnabled(String fulfilmentMethod) throws InterruptedException {
        List<WebElement> smsEnabledStatusList = commonUtils.getWebElements("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']/..//div[text()='ENABLED']");
        log.info("No of shipping methods: " + smsEnabledStatusList.size());
        if (smsEnabledStatusList.size() < 1) {
            clicksOnEditLinkOfShippingMethod(fulfilmentMethod);
            clicksOnStatus();
            if (commonUtils.elementIsDisplayed(locators.getProperty("selectedCheckbox"))) {
                deselectDefaultFlag();
            }
            clicksOnSaveButtonOfConfigureShippingMethod();
            clicksOnCloseButtonOfFmOrSmPopup();
        }
    }


    /*public void fmsStatusIsEnabledDisableAllSmsAndFm(String fulfilmentMethod, String fulfilmentStatus) throws InterruptedException {
        statusFromUI= checksFulfilmentMethodStatus(fulfilmentMethod);
        if (statusFromUI.equalsIgnoreCase(fulfilmentStatus)) {
            disableAllShippingMethods(fulfilmentMethod);
            clicksOnEditLinkOfFulfilmentMethod(fulfilmentMethod);
            clicksOnToggleButton();
            log.info(String.valueOf(commonUtils.checkSelected(locators.getProperty("orderFulfilmentSaveButton"))));
            clicksOnSaveButtonOfConfigureFulfilmentMethod();
            clicksOnCloseButtonOfFmOrSmPopup();
        }
    }*/

    public void verifiesEditButtonOfShippingMethodInDisabledState(String fulfilmentMethod, String fulfilmentStatus) throws InterruptedException {
        List<WebElement> shippingMethodExpandIconList = commonUtils.getWebElements(locators.getProperty("shippingMethodDropdownListLoc"));
        log.info("No of shipping methods: " + shippingMethodExpandIconList.size());
        for (int index = 0; index < shippingMethodExpandIconList.size(); index++) {
            commonUtils.waits(1);
            shippingMethodExpandIconList.get(index).click();
            commonUtils.click(locators.getProperty("threeDotsLoc"));
            Assert.assertEquals("true", commonUtils.getAttribute(locators.getProperty("editLinkLoc"), "disabled"));
            shippingMethodExpandIconList.get(index).click();
        }
    }


    public void disableAllSmsExceptDefaultEnabledSm() throws InterruptedException {
        boolean check = true;
        int i = 1;
        while (check) {
            if (commonUtils.elementIsDisplayed("(//p[text()='Shipping Methods']//parent::div//div[text()='ENABLED'])[num]".replace("num", "" + i))) {
                commonUtils.click("(//p[text()='Shipping Methods']//parent::div//div[text()='ENABLED'])[num]".replace("num", "" + i));
                commonUtils.click("//p[text()='Shipping Methods']//parent::div//div[text()='Edit']");
                if (i == 1 && commonUtils.elementIsDisplayed(locators.getProperty("selectedCheckbox"))) {
                    i = 2;
                    clicksOnCloseButtonOfFulfilmentOrShipmentMethod();
                } else {
                    clicksOnStatus();
                    clicksOnSaveButtonOfConfigureShippingMethod();
                    clicksOnCloseButtonOfFmOrSmPopup();
                }
            } else {
                check = false;
                log.info(String.valueOf(check));
            }
        }


    }

    public void clicksOnEditLinkOfDefaultEnabledSm() {
        commonUtils.click(locators.getProperty("defaultEnabledSm"));
        commonUtils.click("//p[text()='Shipping Methods']//parent::div//div[text()='Edit']");
    }

    public void deselectDefaultFlag() throws InterruptedException {
        commonUtils.waits(2);
        commonUtils.waitUntilVisibleAndClick(locators.getProperty("defaultCheckBox"));
    }

    public String shouldSeeShippingMethodPopupErrorHeader() {
        return commonUtils.getText(locators.getProperty("shippingMethodPopupErrorHeader"));
    }

    public String shouldSeeShippingMethodPopupErrorMsg(String errorMsg) {
        return commonUtils.getText("//div[text()='" + errorMsg + "']");
    }

    public void clicksOnCloseButtonOfSmErrorPopup() {
        commonUtils.click(locators.getProperty("smErrorPopupCloseButton"));
    }

    public void refreshesTheBrowser() {
        this.getDriver().navigate().refresh();
    }


    JSONArray sortedJsonEnabledFmArrayBasedOnPos = new JSONArray();
    JSONObject nextEnabledDefJsonObject = new JSONObject();
    boolean checkNextDefault = false;
    JSONArray sortedJsonEnabledFmArrayWithoutDefEnabledSm = new JSONArray();

    public void storesNextHigherPosEnabledSmDetailsInJSONObject() {

        JSONParser parser = new JSONParser();
        try {
            Object obj = parser.parse(new FileReader("./src/test/resources/data/jsonFiles/DefaultEnabled.json"));
            JSONArray fms_JSONArray = (JSONArray) obj;

            Object specObj = parser.parse(new FileReader("./src/test/resources/data/jsonFiles/OrderFulfilmentSpec.json"));
            JSONArray orderFulfilmentSpec_JSONArray = (JSONArray) specObj;

            log.info("Number of fulfilment method's:" + fms_JSONArray.size());

            convertFmsUIDataintoJsonFormat(fms_JSONArray);

            writeJsonDataToFile("./DefaultEnabled.json", fms_JSONArray);

            String defaultEnabledFm = "//div[text()='ENABLED']//parent::div//parent::div//parent::div//div[text()='Default']//parent::div//parent::div//parent::div//parent::div//parent::div//parent::div//p";

            obj = parser.parse(new FileReader("./DefaultEnabled.json"));
            fms_JSONArray = (JSONArray) obj;

            //sm inside default enabled
            checkNextDefault = getJsonObjectIfAnySmPresentUnderDefaultEnabledFm(fms_JSONArray, defaultEnabledFm);

            //sm outside default enabled
            if (!checkNextDefault) {
                getJsonObjectIfAnySmPresentUnderOtherFmElseCreateOneSm(fms_JSONArray, defaultEnabledFm);
            }

            log.info("Final Json Array: " + fms_JSONArray);
            writeJsonDataToFile("./DefaultEnabled.json", orderFulfilmentSpec_JSONArray); //COPIED SPEC FILE DATA TO DEFAULTENABLED.JSON FILE TO MAKE SURE DEFAULTENABLED.JSON DOESN'T HAVE OLD CONTENTS WHILE EXECUTING AGAIN

        } catch (IOException | ParseException | InterruptedException e4) {
            log.info("Input file is missing:" + e4.getMessage());
        }


    }

    public void getJsonObjectIfAnySmPresentUnderOtherFmElseCreateOneSm(JSONArray fms_JSONArray, String defaultEnabledFm) throws InterruptedException {
        for (int m = 0; m < fms_JSONArray.size(); m++) {
            JSONObject fm_JSONObject = (JSONObject) fms_JSONArray.get(m);

            if ((!((String) fm_JSONObject.get("fm")).equalsIgnoreCase(commonUtils.getText(defaultEnabledFm))) && ((String) fm_JSONObject.get("fmStatus")).equalsIgnoreCase("ENABLED")) {
                log.info("Fulfilment Method Other than default fulfilment method - " + fm_JSONObject.get("fm"));
                sortedJsonEnabledFmArrayWithoutDefEnabledSm.add(fm_JSONObject);
            }
        }

        log.info("Not Sorted fulfilment methods based on position(ENABLED): " + sortedJsonEnabledFmArrayWithoutDefEnabledSm);
        sortBasedOnPosition();

        for (int i = 0; i < sortedJsonEnabledFmArrayBasedOnPos.size(); i++) {
            JSONObject fm_JSONObject = (JSONObject) sortedJsonEnabledFmArrayBasedOnPos.get(i);
            checkNextDefault = checkEnabledSm(fm_JSONObject);
            if (checkNextDefault) {
                break;
            } else {
                if (i == sortedJsonEnabledFmArrayBasedOnPos.size() - 1) {
                    log.info("Do something");
                    checkErrorScenario();

                    for (int j = 0; j < fms_JSONArray.size(); j++) {
                        fm_JSONObject = (JSONObject) fms_JSONArray.get(j);
                        log.info("Fulfilment Method- " + fm_JSONObject.get("fm"));

                        if (((String) fm_JSONObject.get("fm")).equalsIgnoreCase("Home Delivery") && ((String) fm_JSONObject.get("fmStatus")).equalsIgnoreCase("DISABLED")) {
                            log.info("Enabling " + fm_JSONObject.get("fm") + "fulfilment method.....");
                            clicksOnEditLinkOfFulfilmentMethod((String) fm_JSONObject.get("fm"));
                            clicksOnToggleButton();
                            log.info(String.valueOf(commonUtils.checkSelected(locators.getProperty("orderFulfilmentSaveButton"))));
                            clicksOnSaveButtonOfConfigureFulfilmentMethod();
                            clicksOnCloseButtonOfFmOrSmPopup();
                        }
                        JSONArray sms_JSONArray = (JSONArray) fm_JSONObject.get("sms");
                        if (sms_JSONArray.size() > 1) {
                            for (int k = 0; k < sms_JSONArray.size(); k++) {
                                JSONObject sm_JSONObject = (JSONObject) sms_JSONArray.get(k);
                                if (((String) sm_JSONObject.get("smStatus")).equalsIgnoreCase("DISABLED") && ((String) sm_JSONObject.get("default")).equalsIgnoreCase("false")) {
                                    commonUtils.click("(//p[text()='" + fm_JSONObject.get("fm") + "']//parent::div//parent::div//p[text()='Shipping Methods']//..//div[@rotate='0'])[" + (k + 1) + "]");
                                    commonUtils.click("//p[text()='" + fm_JSONObject.get("fm") + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Edit']");

                                    if (commonUtils.elementIsDisplayed(locators.getProperty("selectedCheckbox"))) {
                                        deselectDefaultFlag();
                                    }
                                    clicksOnToggleButton();
                                    clicksOnSaveButtonOfConfigureShippingMethod();
                                    clicksOnCloseButtonOfFmOrSmPopup();
                                    nextEnabledDefJsonObject.put("fm", fm_JSONObject.get("fm"));
                                    nextEnabledDefJsonObject.put("smPosition", sm_JSONObject.get("smPosition"));
                                    log.info("Final Json Object is: " + nextEnabledDefJsonObject);
                                    log.info("Position of next default Sm is: " + sm_JSONObject.get("smPosition"));
                                    break;
                                }
                            }
                        }

                        break;
                    }

                }

            }
        }


    }

    public void checkErrorScenario() throws InterruptedException {
        clicksOnEditLinkOfDefaultEnabledSm();
        deselectDefaultFlag();
        clicksOnSaveButtonOfConfigureShippingMethod();
        Assert.assertEquals("Can't disable the only shipping method", shouldSeeShippingMethodPopupErrorHeader());
        Assert.assertEquals("The default status cannot be disabled as there is only one shipping method available", shouldSeeShippingMethodPopupErrorMsg("The default status cannot be disabled as there is only one shipping method available"));
        clicksOnCloseButtonOfSmErrorPopup();
        clicksOnCloseButtonOfFulfilmentOrShipmentMethod();
        clicksOnYesButtonOfConfigureSMClosePopup();
        log.info("Error Scenario Checked");
    }


    public void sortBasedOnPosition() {
        List<JSONObject> jsonList = new ArrayList<>();
        for (int i = 0; i < sortedJsonEnabledFmArrayWithoutDefEnabledSm.size(); i++) {
            jsonList.add((JSONObject) sortedJsonEnabledFmArrayWithoutDefEnabledSm.get(i));
        }

        Collections.sort(jsonList, (a, b) -> {
            String valA = "";
            String valB = "";

            try {
                valA = (String) a.get("fmPosition");
                valB = (String) b.get("fmPosition");
            } catch (JSONException e) {
                //do something
            }

            return valA.compareTo(valB);
        });

        for (int i = 0; i < sortedJsonEnabledFmArrayWithoutDefEnabledSm.size(); i++) {
            sortedJsonEnabledFmArrayBasedOnPos.add(jsonList.get(i));
        }
        log.info("Sorted fulfilment methods based on position(ENABLED): " + sortedJsonEnabledFmArrayBasedOnPos);

    }


    public boolean getJsonObjectIfAnySmPresentUnderDefaultEnabledFm(JSONArray fms_JSONArray, String defaultEnabledFm) {
        for (int p = 0; p < fms_JSONArray.size(); p++) {
            JSONObject fm_JSONObject = (JSONObject) fms_JSONArray.get(p);

            if (commonUtils.getText(defaultEnabledFm).equalsIgnoreCase((String) fm_JSONObject.get("fm"))) {
                log.info("Default Enabled Fulfilment Method- " + fm_JSONObject.get("fm"));
                checkNextDefault = checkEnabledSm(fm_JSONObject);
            }

        }
        return checkNextDefault;
    }

    public void convertFmsUIDataintoJsonFormat(JSONArray fms_JSONArray) {
        String defaultEnabled = "false";
        for (int i = 0; i < fms_JSONArray.size(); i++) {
            JSONObject fm_JSONObject = (JSONObject) fms_JSONArray.get(i);
            log.info("Fulfilment Method- " + fm_JSONObject.get("fm"));

            String fulfilmentMethod = (String) fm_JSONObject.get("fm");

            fm_JSONObject.put("fmPosition", commonUtils.getText("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//label[text()='Position']//parent::div//following::div//div"));
            fm_JSONObject.put("fmStatus", commonUtils.getText("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//label[text()='Status']//parent::div//div//following::div"));

            JSONArray sms_JSONArray = (JSONArray) fm_JSONObject.get("sms");

            List<WebElement> posOfSmsFromUI = commonUtils.getWebElements("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Position']//following-sibling::div");
            List<WebElement> statusOfSmsFromUI = commonUtils.getWebElements("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[contains(.,'ABLED')]//div//div[contains(.,'ABLED')]//div//div//following-sibling::div");

            //p[text()='Home Delivery']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Position']//following-sibling::div[text()='3']//parent::div//parent::div//parent::div//div[text()='ENABLED']//parent::div//parent::div//parent::div//div[text()='Default']
            //p[text()='Home Delivery']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Position']//following-sibling::div//parent::div//parent::div//parent::div//div[text()='ENABLED']//parent::div//parent::div//parent::div//div[text()='Default']
            for (int j = 0; j < posOfSmsFromUI.size(); j++) {
                JSONObject sm_JSONObject = new JSONObject();
                sm_JSONObject.put("smPosition", posOfSmsFromUI.get(j).getText());
                sm_JSONObject.put("smStatus", statusOfSmsFromUI.get(j).getText());


                if (commonUtils.elementIsDisplayed("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Position']//following-sibling::div[text()='" + posOfSmsFromUI.get(j).getText() + "']//parent::div//parent::div//parent::div//div[text()='ENABLED']//parent::div//parent::div//parent::div//div[text()='Default']")) {
                    defaultEnabled = "true";
                } else {
                    defaultEnabled = "false";
                }

                sm_JSONObject.put("default", defaultEnabled);

                sms_JSONArray.add(sm_JSONObject);

            }
            fm_JSONObject.put("sms", sms_JSONArray);
        }

    }

    public boolean checkEnabledSm(JSONObject fm_JSONObject) {
        JSONArray onlyEnabledSmSortedJsonArray = new JSONArray();
        JSONArray sms_JSONArray = (JSONArray) fm_JSONObject.get("sms");
        for (int q = 0; q < sms_JSONArray.size(); q++) {
            JSONObject sm_JSONObject = (JSONObject) sms_JSONArray.get(q);
            if (((String) sm_JSONObject.get("smStatus")).equalsIgnoreCase("ENABLED") && ((String) sm_JSONObject.get("default")).equalsIgnoreCase("false")) {
                onlyEnabledSmSortedJsonArray.add(sm_JSONObject);
            }
        }
        log.info("onlyEnabledSmSortedJsonArray: " + onlyEnabledSmSortedJsonArray);
        //fm_JSONObject.put("sms",onlyEnabledSmSortedJsonArray);
        log.info("fm_JSONObject: " + fm_JSONObject);

        if (onlyEnabledSmSortedJsonArray.size() > 0) {
            JSONObject firstEnabledSm_JSONObject = (JSONObject) onlyEnabledSmSortedJsonArray.get(0);

            nextEnabledDefJsonObject.put("fm", fm_JSONObject.get("fm"));
            nextEnabledDefJsonObject.put("smPosition", firstEnabledSm_JSONObject.get("smPosition"));
            log.info("Final Json Object is: " + nextEnabledDefJsonObject);
            log.info("Position of next default Sm, if any Sm is enabled under default Enabled Fm is: " + firstEnabledSm_JSONObject.get("smPosition"));
            return true;
        }

        return false;
    }

    public void writeJsonDataToFile(String fileName, JSONArray fms_JSONArray) {
        try (PrintWriter out = new PrintWriter(new FileWriter(fileName))) {
            out.write(fms_JSONArray.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void verifiesAutopickOfSmSameAsStoredSm() {
        String defaultTextOfNextHigherPosEnabledSmFromJsonObject = commonUtils.getText("//p[text()='" + nextEnabledDefJsonObject.get("fm") + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Position']//following-sibling::div[text()='" + nextEnabledDefJsonObject.get("smPosition") + "']//parent::div//parent::div//parent::div//div[text()='ENABLED']//parent::div//parent::div//parent::div//div[text()='Default']");
        String defaultTextOfNextHigherPosEnabledSmFromUI = commonUtils.getText("//div[text()='ENABLED']//parent::div//parent::div//parent::div//div[text()='Default']");
        Assert.assertEquals(defaultTextOfNextHigherPosEnabledSmFromJsonObject, defaultTextOfNextHigherPosEnabledSmFromUI);
    }




            /*obj = parser.parse(new FileReader("./DefaultEnabled.json"));
            fms_JSONArray = (JSONArray) obj;

            for(int p=0;p<fms_JSONArray.size();p++) {
                JSONObject fm_JSONObject = (JSONObject) fms_JSONArray.get(p);
                log.info("Fulfilment Method- " + (String) fm_JSONObject.get("fm"));

                JSONArray sms_JSONArray=(JSONArray)fm_JSONObject.get("sms");
                for(int q=0;q<sms_JSONArray.size();q++)
                {
                    JSONObject sm_JSONObject = (JSONObject) sms_JSONArray.get(q);
                    String updatedDefaultEnabled=(String)sm_JSONObject.get("default");
                    if(updatedDefaultEnabled.equalsIgnoreCase("true"))
                    {
                        clicksOnEditLinkOfDefaultEnabledSm();
                        deselectDefaultFlag();
                        clicksOnSaveButtonOfConfigureShippingMethod();
                        if(commonUtils.elementIsDisplayed(switchDefaultSmPopup))
                        {
                            commonUtils.click(yesButton);
                            clicksOnCloseButtonOfFmOrSmPopup();
                        }
                        if(commonUtils.elementIsDisplayed(locators.getProperty("fulfilmentMethodPopUpCloseButton")))
                        {
                            commonUtils.click(locators.getProperty("fulfilmentMethodPopUpCloseButton"));
                        }
                    }
                }
            }
            writeJsonDataToFile("./DefaultEnabled.json",fms_JSONArray);*/

     /*List<String> fmList=new ArrayList<>();

            fmList.add("Home Delivery");
            fmList.add("Click and Collect");
            fmList.add("Pick up, drop off");

            int index = 0;
            for(int n=0;n<fmList.size();n++)
            {
                if(fmList.get(n).equalsIgnoreCase(commonUtils.getText(defaultEnabledFm)))
                {
                    index=n;
                }
            }
            fmList.remove(index);*/


    public void clicksOnEditLinkOfSmExceptDefTrueSmEnabled() throws InterruptedException {
        boolean isFound = true;
        List<String> fmList = new ArrayList<>();

        fmList.add("Home Delivery");
        fmList.add("Click and Collect");
        fmList.add("Pick up, drop off");

        for (int i = 0; i < fmList.size(); i++) {
            if (isFound) {
                statusFromUI= checksFulfilmentMethodStatus(fmList.get(i));
                if (statusFromUI.equalsIgnoreCase("DISABLED")) {
                    log.info("status: " + statusFromUI);
                    clicksOnEditLinkOfFulfilmentMethod(fmList.get(i));
                    clicksOnToggleButton();
                    log.info(String.valueOf(commonUtils.checkSelected(locators.getProperty("orderFulfilmentSaveButton"))));
                    clicksOnSaveButtonOfConfigureFulfilmentMethod();
                    clicksOnCloseButtonOfFmOrSmPopup();
                }
                List<WebElement> posOfSmsFromUI = commonUtils.getWebElements("//p[text()='" + fmList.get(i) + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Position']//following-sibling::div");
                for (int j = 0; j < posOfSmsFromUI.size(); j++) {
                    if (!commonUtils.elementIsDisplayed("//p[text()='" + fmList.get(i) + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Position']//following-sibling::div[text()='" + posOfSmsFromUI.get(j).getText() + "']//parent::div//parent::div//parent::div//div[text()='ENABLED']//parent::div//parent::div//parent::div//div[text()='Default']")) {
                        log.info("Found shipping method which needs to be made default under :" + fmList.get(i));
                        commonUtils.click("(//p[text()='" + fmList.get(i) + "']//parent::div//parent::div//p[text()='Shipping Methods']//..//div[@rotate='0'])[" + (j + 1) + "]");
                        commonUtils.click("//p[text()='" + fmList.get(i) + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Edit']");
                        isFound = false;
                        break;
                    }
                }
            }
        }
    }

    public void selectDefaultCheckBoxIfNotSelected() throws InterruptedException {
        if (!commonUtils.elementIsDisplayed(locators.getProperty("selectedCheckbox"))) {
            selectDefaultFlag();
        }
    }

    public void selectDefaultFlag() throws InterruptedException {
        commonUtils.scrollAndClick(locators.getProperty("defaultCheckBox"));
    }

    public void enablesSmIfDisabled() throws InterruptedException {
        if (!commonUtils.elementIsDisplayed(locators.getProperty("enabledSmStatus"))) {
            clicksOnStatus();
        }
        selectTaxClassValueIfEmpty();
        enterNewCustomId();
        addSingleCarrierStringIfEmpty();
    }

    public void addSingleCarrierStringIfEmpty() {
        if(commonUtils.elementIsDisplayed(locators.getProperty("uploadCarrierString")))
        {
            commonPage.clickOnButton(CommonEnum.fromString("Upload Carrier String"), "Upload Carrier String");
            commonPage.clickOnRadioButton(CommonEnum.fromString("Add single carrier string"), "Add single carrier string");
            commonUtils.enterText(locators.getProperty("carrierStringLoc"), commonUtils.getRandomCharacters(6));
            commonPage.clickOnButton(CommonEnum.fromString("add"), "add");
        }
    }

    public void enterNewCustomId() throws InterruptedException {
        commonPage.entersValueInField("New Custom ID", CommonEnum.fromString("Custom ID"), "Custom ID");
    }

    public void selectTaxClassValueIfEmpty() throws InterruptedException {
        String taxClassPlaceholder = commonUtils.getAttribute(locators.getProperty("taxClassPlaceholderLoc"), "placeholder");
        if(taxClassPlaceholder.equalsIgnoreCase("Please select"))
        {
            commonPage.clickOnDropdown(DropdownEnum.fromString("Tax Class"), "Tax Class");
            commonPage.selectRandomValueFromDropdown(DropdownEnum.fromString("Tax Class"), "Tax Class");
        }
    }

    public String shouldSeeShippingMethodPopupHeader(String header) {
        return commonUtils.getText("//div[text()='" + header + "']");
    }

    public String shouldSeeShippingMethodPopupMsg(String msg) {
        return commonUtils.getText("//div[text()='" + msg + "']");
    }


    public void addsAllDetailsExceptCustomIdField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
         /*
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        entersPassedTier(4,"7");
        OUT OF SCOPE
        */
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }

    public void entersCustomId() {
        commonUtils.enterText(locators.getProperty("customIdLoc"), commonUtils.getLocalDateAndTime("dd_MM_yyyy_HH_mm_ss"));
    }

    
    
    /*
    OUT OF SCOPE BECAUSE OF NEW TIER FIXED PRICE IMPLEMENTATION
    public void addsAllDetailsExceptTierOneField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId("ABC");
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
        entersPassedTier(2,"5");
        entersPassedTier(3,"3");
        entersPassedTier(4,"1");
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }

    public void addsAllDetailsExceptTierTwoField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId("ABC");
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
        entersPassedTier(1,"5");
        entersPassedTier(3,"3");
        entersPassedTier(4,"1");
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }
    public void addsAllDetailsExceptTierThreeField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId("ABC");
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(4,"1");
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }

    public void addsAllDetailsExceptTierFourField() throws InterruptedException {
        selectsCarrierName();
        // It is commented because of new carrier string implementation and carrier string is not a mandatory field
        // addsCarrierStringField();
        selectsCarrierService();
        entersCustomId("ABC");
        selectsPosition();
        addsBasedFixedPrice();
        addsThresholdPrice();
        addsShipmentUpSellPrice();
        entersPassedTier(1,"5");
        entersPassedTier(2,"3");
        entersPassedTier(3,"1");
        addsMinimumDeliveryDays("1");
        addsMaximumDeliveryDays("4");
        selectsChannels();
        selectsProductTypes();
        addsLocalNames();
    }


    public void entersPassedTier(Integer tierNo, String tierValue) {
        commonUtils.enterText("//label[text()='Tier "+tierNo+"']//parent::div//parent::div//input", tierValue);
    }*/


    public void clickOnViewActionIcon() throws InterruptedException {
        addNewAllowOrBlockedItemInShippingMethod();
        commonUtils.click(locators.getProperty("viewActionIcon"));
    }

    private void addNewAllowOrBlockedItemInShippingMethod() throws InterruptedException {
        //commonUtils.moveToElement(locators.getProperty("locales"));
        if (commonUtils.elementIsDisplayed(locators.getProperty("noItemsText"))) {
            commonUtils.waits(3);
            commonUtils.click(locators.getProperty("addItemsButton"));
            commonUtils.click(locators.getProperty("typeDropdown"));
            commonUtils.click(locators.getProperty("allowType"));
            commonUtils.click(locators.getProperty("itemDropdown"));
            commonUtils.click(locators.getProperty("productIdItem"));
            commonUtils.click(locators.getProperty("operatorDropdown"));
            commonUtils.click(locators.getProperty("equalsOperator"));
            commonUtils.enterText(locators.getProperty("value"), "GX3060");
            commonUtils.click(locators.getProperty("allowOrBlockItemsPopupSaveButton"));
            commonUtils.click(locators.getProperty("closeButton"));
        }
    }

    public String shouldSeeViewPopupHeader(String expectedHeader) {
        return commonUtils.getText("//p[text()='" + expectedHeader + "']");
    }


    public void clicksOnCloseIconOfAllowedOrBlockedItemsPopup(String expectedHeader) {
        commonUtils.click("//p[text()='" + expectedHeader + "']//parent::div//button");
    }


    public void clickOnDeleteActionIcon() throws InterruptedException {
        addNewAllowOrBlockedItemInShippingMethod();
        commonUtils.click(locators.getProperty("deleteActionIcon"));
    }


    public String shouldSeeDeletePopupText(String deletePopupText) {
        return commonUtils.getText("//div[text()='" + deletePopupText + "']");
    }

    public void clicksOnCancelButton() {
        commonUtils.click(locators.getProperty("cancelButton"));
    }


    public void clicksOnAddItemsButton() throws InterruptedException {
        commonUtils.waits(3);
        commonUtils.waitUntilVisibleAndClick(locators.getProperty("addItemsButton"));
    }

    public String shouldSeeAddItemsPopupHeader(String addHeader) {
        return commonUtils.getText("//div[text()='" + addHeader + "']");
    }


    public void clicksOnEditActionIcon() throws InterruptedException {
        addNewAllowOrBlockedItemInShippingMethod();
        commonUtils.click(locators.getProperty("editActionIcon"));
    }

    public String shouldSeeHeaderInEditPopup(String editHeader) {
        return commonUtils.getText("//div[text()='" + editHeader + "']");
    }


    public String shouldSeeHeaderInDeletePopup(String deleteHeader) {
        return commonUtils.getText("//div[text()='" + deleteHeader + "']");
    }

    public String shouldSeeRespectiveMessageInDeletePopup(String deleteMsg) {
        return commonUtils.getText("//div[text()='" + deleteMsg + "']");
    }


    public void editsAllowTypeOperatorAndValueFields() {
        commonUtils.click(locators.getProperty("typeDropdown"));

        if (commonUtils.getAttribute(locators.getProperty("existingTypeData"), "value").equalsIgnoreCase("Allow")) {
            commonUtils.click(locators.getProperty("blockType"));
        } else {
            commonUtils.click(locators.getProperty("allowType"));
        }
        commonUtils.click(locators.getProperty("itemDropdown"));
        commonUtils.click(locators.getProperty("cityItem"));
        commonUtils.click(locators.getProperty("operatorDropdown"));
        commonUtils.click(locators.getProperty("containsOperator"));
        commonUtils.clickClearAndEnterText(locators.getProperty("value"), "ABC");
    }


    public void clicksOnSaveButton() {
        commonUtils.click(locators.getProperty("allowOrBlockSaveButton"));
    }

    public String shouldSeeSuccessHeader(String successHeader) {
        return commonUtils.getText("//p[text()='" + successHeader + "']");
    }

    public String shouldSeeSuccessMessageInPopup(String successMsg) {
        return commonUtils.getText("//p[text()='Success']//..//..//div//div//div[contains(.,'" + successMsg + "')]");
    }

    public void clicksOnCloseButtonOfSuccessMessagePopup() {
        commonUtils.click(locators.getProperty("closeButton"));
    }


    public void clicksOnDeleteButtonOfDeletePopup() {
        commonUtils.waitTillElementIsClickable(locators.getProperty("carrierStringDeletePopupDeleteButton"), 10);
        commonUtils.click(locators.getProperty("carrierStringDeletePopupDeleteButton"));
    }


    public void addsAllowTypeOperatorAndValueFields() throws InterruptedException {
        commonUtils.waits(3);
        commonUtils.click(locators.getProperty("typeDropdown"));
        commonUtils.click(locators.getProperty("blockType"));
        commonUtils.click(locators.getProperty("itemDropdown"));
        commonUtils.click(locators.getProperty("postalCodeItem"));
        commonUtils.click(locators.getProperty("operatorDropdown"));
        commonUtils.click(locators.getProperty("equalsOperator"));
        commonUtils.enterText(locators.getProperty("value"), "560072");
    }

    public void clicksOnAddItemsButtonOnAddPopup() {
        commonUtils.click(locators.getProperty("addItemsButtonInPopup"));
    }


    public void clicksOnAllowDropdown() {
        commonUtils.click(locators.getProperty("typeDropdown"));
    }

    public void verifiesCorrectDataInAllowDropdown() {
        List<String> typesList = new ArrayList<>();

        typesList.add("Allow");
        typesList.add("Block");

        commonUtils.checkDataFromUiAndStoredData(typesList, locators.getProperty("dataListLoc"));
    }


    public void clicksOnTypeDropdown() {
        commonUtils.click(locators.getProperty("itemDropdown"));
    }

    public void verifiesCorrectDataInTypeDropdown() {
        List<String> itemsList = new ArrayList<>();

        itemsList.add("Product_Id");
        itemsList.add("Product_Type");
        itemsList.add("City");
        itemsList.add("State/Province");
        itemsList.add("Postal_Code");

        commonUtils.checkDataFromUiAndStoredData(itemsList, locators.getProperty("dataListLoc"));
    }


    public void verifiesCorrectDataInOperatorDropdown() {
        List<String> operatorsList = new ArrayList<>();

        operatorsList.add("Equals");
        operatorsList.add("Contains");
        operatorsList.add("StartsWith");
        operatorsList.add("EndsWith");

        commonUtils.checkDataFromUiAndStoredData(operatorsList, locators.getProperty("dataListLoc"));
    }

    public void checksAndRemovesIfAnyTierPriceFound() throws InterruptedException {
        List<WebElement> memberFixedPriceList = commonUtils.getWebElements(locators.getProperty("memberFixedPriceText"));
        for (int i = 1; i <= memberFixedPriceList.size(); i++) {
            commonUtils.waits(2);
            commonUtils.waitUntilVisibleAndClick(locators.getProperty("deleteIcon"));
            commonUtils.click(locators.getProperty("deleteButton"));
        }
    }


    public void clicksOnAddDifferentTierPricesButton() throws InterruptedException {
        commonUtils.click(locators.getProperty("randomClick"));
        commonUtils.waits(2);
        commonUtils.waitUntilVisibleAndClick(locators.getProperty("addDifferentTierPricesButton"));
    }

    public void entersMemberFixedPrice(String memberFixedPriceValue, String memberFixedPriceTextBoxNo) {
        commonUtils.enterText("(//label[text()='Member Fixed Price']//parent::div//parent::div//input)[" + memberFixedPriceTextBoxNo + "]", memberFixedPriceValue);
    }

    public void selectsPassedTier(String allTier) {
        commonUtils.click("//div[text()='" + allTier + "']//preceding-sibling::div");
    }


    public void clicksOnRemoveButtonOfTierPrice() {
        commonUtils.click(locators.getProperty("deleteIcon"));
    }

    public String shouldSeeRemovePopupHeader(String header) {
        return commonUtils.getText("//div[text()='" + header + "']");
    }

    public String shouldSeeRemovePopupMsg(String msg) {
        return commonUtils.getText("//div[text()='" + msg + "']");
    }

    public void clicksOnYesButtonOfRemovePopup() {
        commonUtils.click(locators.getProperty("yesButton"));
    }

    /*
    IF THERE ARE MORE THAN 1 TIER PRICE, THIS CONDITION WONT WORK SINCE WE ARE REMOVING 1 TIER PRICE
    public boolean shouldNotSeeAnyTierOrMemberFixedPrice() {
        return commonUtils.elementIsDisplayed(locators.getProperty("memberFixedPriceText"));
    }*/


    public String shouldSeeAllTierInSelectedState(String tier) {
        return commonUtils.getAttribute("//div[text()='" + tier + "']//preceding-sibling::input", "checked");
    }


    public void clicksOnSelectTheTierDropdown(String tierDropdownNo) {
        commonUtils.click("(//label[text()='Select the tier']//parent::div//parent::div//input//following-sibling::div)[" + tierDropdownNo + "]");
    }

    public String checksPassedTierCheckboxBehavior(String tier) {
        return commonUtils.getAttribute("//div[text()='" + tier + "']//preceding-sibling::div", "disabled");
    }


    public String shouldSeeAddDifferentTierPriceLinkInDisabledState() {
        return commonUtils.getAttribute(locators.getProperty("disabledAddDifferentTierPriceLink"), "disabled");
    }


    public String getBasedFixedPrice() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("baseFixedPrice"), 10);
        return commonUtils.getAttribute(locators.getProperty("baseFixedPrice"), "value");
    }

    public String getMemberFixedPrice(String memberFixedPriceTextBoxNo) {
        return commonUtils.getAttribute("(//label[text()='Member Fixed Price']//parent::div//parent::div//input)[" + memberFixedPriceTextBoxNo + "]", "value");
    }

    public String getPrefilledMemberFixedPrice(String firstTier, String secondTier) {
        return commonUtils.getAttribute("//input[@value='"+firstTier+", "+secondTier+"']//parent::div//parent::div//parent::div//parent::div//parent::div//parent::div//parent::div//label[text()='Member Fixed Price']//parent::div//parent::div//input", "value");
    }

    public void clicksOnUploadCarrierString() throws InterruptedException {
        commonUtils.waits(3);
        commonUtils.scrollAndClick(locators.getProperty("uploadCarrierString"));
    }

    public String shouldSeeAddItemsDialogHeaderTextAs(String header) {
        return commonUtils.getText("//*[text()='" + header + "']");
    }

    public void selectSingleOrMultipleCarrierStringRadioBox(String singleCarrierStringRadioBox) {
        commonUtils.click("//div[text()='" + singleCarrierStringRadioBox + "']//preceding-sibling::div");
    }

    public void enterValidCarrierString(String carrierString) {
        if(carrierString.isEmpty())
        {
            carrierStringText = getSaltString(8);
            commonUtils.enterText(locators.getProperty("carrierStringLoc"), carrierStringText);
        }
        commonUtils.enterText(locators.getProperty("carrierStringLoc"), carrierString);
    }

    public void clicksOnAddItemsButtonOfAddCarrierStringsPopup() {
        commonUtils.click(locators.getProperty("addPopupCarrierStringsAddButton"));
    }

    public boolean shouldSeeAddedCarrierStringOnConfigureSMPage(String addedCarrierString) throws InterruptedException {
        commonUtils.waits(2);
        if(addedCarrierString.isEmpty())
        {
            addedCarrierString = carrierStringText;
        }
        return commonUtils.elementIsDisplayed("//input[@value='"+addedCarrierString+"' and @disabled]");
    }


    public String seesFileUploadedSuccessfully(String uploadedString) {
        return commonUtils.getText("//label[text()='" + uploadedString + "']");
    }

    public void shouldSeeUploadedCarrierStringFileDataOnConfigureSMPage(String uploadedCarrierStringFile) {
        try {
            // Create an object of filereader
            // class with CSV file as a parameter.
            FileReader multipleCarrierStringsFileReader = new FileReader("./src/test/resources/data/uploadingFiles/" + uploadedCarrierStringFile);

            // create csvReader object passing
            // file reader as a parameter
            CSVReader csvReader = new CSVReader(multipleCarrierStringsFileReader);
            String[] nextCarrierString;

            // we are going to read data line by line
            while ((nextCarrierString = csvReader.readNext()) != null) {
                for (String carrierStringFromFile : nextCarrierString) {
                    log.info("Data from file: " + carrierStringFromFile);
                    Assert.assertEquals(carrierStringFromFile.toUpperCase(), commonUtils.getAttribute("//p[text()='Carrier Strings']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//input[@color='primary' and @value='"+carrierStringFromFile+"']", "value").toUpperCase());
                }
            }


        } catch (IOException ioException) {
            ioException.printStackTrace();
        }

    }


    public void clickOnUploadNewLinkOfCarrierString(String uploadNewLink) {
        commonUtils.click("//button[text()='" + uploadNewLink + "']");
    }

    public String shouldSeeHeaderInUploadNewCarrierStringPopup(String header) {
        return commonUtils.getText("//div[text()='" + header + "']");

    }

    public String shouldSeeRespectiveMessageInUploadNewCarrierStringPopup(String message) {
        return commonUtils.getText("//div[text()='" + message + "']");
    }

    public void clicksOnYesButtonOfRemoveCarrierStringPopup() {
        commonUtils.click(locators.getProperty("yesButton"));
    }


    public void updatesFieldsOfShippingMethod() throws InterruptedException {
        List<String> carrierNameList = getCarrierNameDataList();
        updatesDropdownData("Carrier Name", carrierNameList);

        List<String> carrierServiceList = getCarrierServiceDataList();
        updatesDropdownData("Carrier Service", carrierServiceList);

        commonPage.entersValueInField("New Custom ID", CommonEnum.fromString("Custom ID"), "Custom ID");

        /*clicksOnSmPositionDropdown();
        List<WebElement> positionValuesWebElementList = commonUtils.getWebElements(locators.getProperty("positionValuesListLoc"));
        List<String> positionValuesStringsList = new ArrayList<String>();
        for (WebElement e : positionValuesWebElementList) {
            positionValuesStringsList.add(e.getText());
        }
        clicksOnSmPositionDropdown();
        log.info(String.valueOf(positionValuesStringsList));

        updatesDropdownData("Position", positionValuesStringsList);*/

        updateTextFieldData("Based Fixed", "125", "155");

        updateTextFieldData("Threshold", "150", "180");

        updateTextFieldData("Ship. Up Sell", "60", "80");

        updateTextFieldData("Minimum", "2", "3");

        updateTextFieldData("Maximum", "7", "8");

        List<String> taxClassList = getTaxClassDataList();
        updatesDropdownData("Tax Class", taxClassList);

        updateCheckBox(7, "Channels", "DSS", "Skava");

        updateCheckBox(7, "Product Types", "Inline", "Preorder");

    }

    public void updateCheckBox(int totalFieldValues, String fieldName, String firstFieldValue, String secondFieldValue) {
        int count = 0;
        for (int i = 1; i <= totalFieldValues; i++) {
            if (commonUtils.elementIsDisplayed("(//label[text()='" + fieldName + "']//..//..//following::div//div[@type='checkbox'])[" + i + "]//div//div")) {
                count++;
            }
        }
        if (count == 1) {
            if (commonUtils.getText("//label[text()='" + fieldName + "']//..//..//following::div//div[@type='checkbox']//div//div//following::div").equalsIgnoreCase(firstFieldValue)) {
                commonUtils.click("//div[text()='" + secondFieldValue + "']//parent::div//child::div//child::div");
            } else {
                commonUtils.click("//div[text()='" + firstFieldValue + "']//parent::div//child::div//child::div");
            }
        } else {
            commonUtils.click("//div[text()='" + firstFieldValue + "']//parent::div//child::div//child::div");
        }
    }

    public void updateTextFieldData(String textFieldName, String firstString, String secondString) {
        String existingTextFieldDataLoc = "//label[text()='" + textFieldName + "']//parent::div//parent::div//input[@placeholder]";
        String existingTextFieldData = commonUtils.getAttribute(existingTextFieldDataLoc, "value");

        if (existingTextFieldData.equalsIgnoreCase(firstString)) {
            commonUtils.clickClearAndEnterText(existingTextFieldDataLoc, secondString);
        } else {
            commonUtils.clickClearAndEnterText(existingTextFieldDataLoc, firstString);
        }
    }

    public void updatesDropdownData(String dropdownFieldName, List<String> dropdownDataList) throws InterruptedException {
        String existingDropdownFieldDataLoc = "//label[text()='" + dropdownFieldName + "']//parent::div//parent::div//input[@placeholder]";
        String existingDropdownFieldData = commonUtils.getText(existingDropdownFieldDataLoc);

        String dropdownLoc = "//label[text()='" + dropdownFieldName + "']//parent::div//parent::div//input[@placeholder]//parent::div";
        commonUtils.waits(2);

        commonUtils.scrollAndClick(dropdownLoc);

        if (existingDropdownFieldData.equalsIgnoreCase(dropdownDataList.get(0))) {
            commonUtils.click("//div[@value='" + dropdownDataList.get(1) + "']");
        } else {
            commonUtils.click("//div[@value='" + dropdownDataList.get(0) + "']");
        }
    }


    public boolean verifiesMarketsOnLandingPage(DataTable marketsDataTable) {
        boolean checkMarketIsDisplayed = true;
        List<List<String>> marketsListsDataTable = marketsDataTable.asLists(String.class);

        for(List<String> marketsList: marketsListsDataTable)
        {
            for(String market : marketsList)
            {
                if(!commonUtils.elementIsDisplayed("//div[text()='"+market+"']"))
                {
                    checkMarketIsDisplayed = false;
                }
            }
        }
        return checkMarketIsDisplayed;
    }


    public void clickOnFindSiteIdOrCountryDropdown() {
        commonUtils.click(locators.getProperty("findSIteIdOrCountryDropdown"));
    }


    public boolean shouldSeePassedSiteIdsInDropdown(String siteId) {
        return commonUtils.elementIsDisplayed("//div[text()='" + siteId + "']");
    }


    public void clicksOnExportCsvButton() throws InterruptedException {
        if (commonUtils.elementIsDisplayed(locators.getProperty("allowOrBlockExportCsvButton"))) {
            commonUtils.click(locators.getProperty("allowOrBlockExportCsvButton"));
        } else {
            addNewAllowOrBlockedItemInShippingMethod();
            commonUtils.click(locators.getProperty("allowOrBlockExportCsvButton"));
        }
    }

    public boolean shouldSeeDownloadedCsvFileDataSameAsAllowOrBlockListTableData(String fileName) throws IOException {
        boolean isFound = true;
        // Create an object of filereader
        // class with CSV file as a parameter.
        FileReader filereader = new FileReader("./src/test/resources/data/downloadedfiles/" + fileName);

        // create csvReader object passing
        // file reader as a parameter
        CSVReader csvReader = new CSVReader(filereader);
        String[] nextRecord;
        String dataLocFromUI = "//table//tbody//tr//td//div[contains(@class,'Text')]";
        List<WebElement> dataListFromUI = commonUtils.getWebElements(dataLocFromUI);

        int j = 0, k = 0;
        while ((nextRecord = csvReader.readNext()) != null) {
            if (k == 0) {
                k++;
                continue;
            }
            for (int i = 0; i < nextRecord.length; i++) {
               /* log.info("Data from file: " + nextRecord[i]);
                log.info("Data from UI: "+dataListFromUI.get(i).getText());*/
                if (!dataListFromUI.get(j).getText().equalsIgnoreCase(nextRecord[i])) {
                    log.info("Data from file: " + nextRecord[i] + "is not matching with Data from UI: " + dataListFromUI.get(i).getText());
                    isFound = false;
                }
                j++;
            }

        }
        return isFound;
    }


    public void clicksOnCloseButtonOfFmOrSmMethod(String configureFmOrSm) {
        commonUtils.click("//p[text()='" + configureFmOrSm + "']//ancestor:: form//button");
    }


    public String shouldSeeCarrierStringSnackBarErrorMsg(String errorMsg) {
        commonUtils.moveToElement("//div[text()='" + errorMsg + "']");
        return commonUtils.getText("//div[text()='" + errorMsg + "']");
    }

    public void clickOnDismissButtonOfSnackBarErrorMsg() {
        commonUtils.click(locators.getProperty("dismissButton"));
    }


    public boolean shouldNotSeeCarrierStringSnackBarErrorMsg() {
        return commonUtils.elementIsDisplayed(locators.getProperty("carrierStringSnackBarErrorMsg"));
    }


    public void clickOnEditButtonOfCarrierStrings() throws InterruptedException {
        commonUtils.waits(3);
        /*if (commonUtils.elementIsDisplayed(locators.getProperty("uploadCarrierString"))) {
            commonUtils.click(locators.getProperty("uploadCarrierString"));
            selectSingleOrMultipleCarrierStringRadioBox("Add single carrier string");
            enterValidCarrierString("FED000AT1000000000");
            commonUtils.click(locators.getProperty("addPopupCarrierStringsAddButton"));
        }*/
        commonUtils.waitTillElementIsVisible(locators.getProperty("carrierStringEditButton"), 20);
        commonUtils.waitUntilVisibleAndClick(locators.getProperty("carrierStringEditButton"));
    }

    public String shouldSeeCarrierStringsEditPopup(String carrierStrings) {
        commonUtils.waitTillElementIsVisible("//p[text()='" + carrierStrings + "']", 15);
        return commonUtils.getText("//p[text()='" + carrierStrings + "']");
    }

    public void clickOnEditButtonOnEditItemsPopup() {
        firstCarrierString = getFirstCarrierString(locators.getProperty("firstCarrierStringLoc"));
        commonUtils.click(locators.getProperty("carrierStringEditPopupEditButton"));
    }

    public String getFirstCarrierString(String firstCarrierStringLoc) {
        return commonUtils.getAttribute(firstCarrierStringLoc, "value");
    }

    public void clickOnCrossIconOnTextField() {
        commonUtils.click(locators.getProperty("crossIconOfTextField"));
    }

    public String shouldNotSeeCarrierStringOnTextBox() {
        return commonUtils.getAttribute(locators.getProperty("singleCarrierStringInputField"), "value");
    }


    public void clickOnCrossIconOfCarrierStringsEditItemsPopup(String carrierStrings) throws InterruptedException {
        commonUtils.waits(3);
        commonUtils.waitTillElementIsClickable(locators.getProperty("crossIconOfCarrierStringsEditItemsPopup"), 15);
        commonUtils.waitTillElementIsVisible(locators.getProperty("crossIconOfCarrierStringsEditItemsPopup"), 15);
        commonUtils.click(locators.getProperty("crossIconOfCarrierStringsEditItemsPopup"));
    }


    public boolean shouldSeeDismissButtonInTheError() {
        return commonUtils.elementIsDisplayed(locators.getProperty("dismissButton"));
    }


    public void clickOnDeleteButtonOfEditItemsPopup() {
        firstCarrierString = getFirstCarrierString(locators.getProperty("firstCarrierStringLoc"));
        addOneCarrierStringIfThereIsOnlyOne();
        commonUtils.waitTillElementIsClickable(locators.getProperty("carrierStringEditPopupDeleteButton"), 15);
        commonUtils.click(locators.getProperty("carrierStringEditPopupDeleteButton"));
    }

    public void addOneCarrierStringIfThereIsOnlyOne() {
        List<WebElement> noOfCarrierStringsList = commonUtils.getWebElements(locators.getProperty("noOfExistingCarrierStringsLoc"));
        if (noOfCarrierStringsList.size() == 1) {
            commonUtils.click(locators.getProperty("editPopCarrierStringsAddItemsButton"));
            selectSingleOrMultipleCarrierStringRadioBox("Add single carrier string");
            enterValidCarrierString("FED000AT1000000000");
            commonUtils.click(locators.getProperty("addPopupCarrierStringsAddButton"));
        }
    }

    public void clickOnCarrierStringsDropdown(String carrierStrings) {
        commonUtils.click("//label[text()='" + carrierStrings + "']//parent::div//parent::div//parent::div//div[@rotate]");
    }

    public boolean shouldNotSeeDeletedItemInCarrierStringsDropdown(String carrierString) {
        return commonUtils.elementIsDisplayed("//label[text()='Carrier Strings']//parent::div//parent::div//parent::div//parent::div//div[contains(@class, 'Text') and contains(.,'" + firstCarrierString + "')]");
    }


    public void shouldSeeTextBoxPrefilledWithText() {
        Assert.assertEquals(firstCarrierString.toUpperCase(), commonUtils.getAttribute(locators.getProperty("editSingleCarrierStringTextBox"), "value").toUpperCase());
    }


    public void editsPrefilledText() {
        commonUtils.click(locators.getProperty("editSingleCarrierStringTextBox"));
        commonUtils.clear(locators.getProperty("editSingleCarrierStringTextBox"));
        log.info("Trimmed Carrier String: " + firstCarrierString.substring(0, firstCarrierString.length() - 2));
        commonUtils.enterText(locators.getProperty("editSingleCarrierStringTextBox"), firstCarrierString.substring(0, firstCarrierString.length() - 2));
        commonUtils.enterText(locators.getProperty("editSingleCarrierStringTextBox"), "" + commonUtils.getRandomNoBetweenTwoNumbers(1, 9) + "" +  commonUtils.getRandomNoBetweenTwoNumbers(1, 9));
        editedSingleCarrierStringText = commonUtils.getAttribute(locators.getProperty("editSingleCarrierStringTextBox"), "value");
    }

    public void clickOnRightTickButtonOfCarrierStringsPopup(String carrierStrings) {
        commonUtils.click("//p[text()='" + carrierStrings + "']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//button//parent::div//following-sibling::div//button");
    }

    public boolean shouldSeeChangedTextInEditCarrierStringsPopup(String carrierStrings) {
        log.info(editedSingleCarrierStringText);
        commonUtils.waitTillElementIsVisible("//p[text()='" + carrierStrings + "']//parent::div//parent::div//table//tbody//input[@value='" + editedSingleCarrierStringText + "']", 15);
        return commonUtils.elementIsDisplayed("//p[text()='" + carrierStrings + "']//parent::div//parent::div//table//tbody//input[@value='" + editedSingleCarrierStringText + "']");
    }

    public boolean shouldSeeChangedTextInCarrierStringsDropdown() {
        commonUtils.click(locators.getProperty("carrierStringsDropdownLoc"));
        return commonUtils.elementIsDisplayed("//label[text()='Carrier Strings']//parent::div//parent::div//parent::div//parent::div//div[contains(@class, 'Text') and contains(.,'" + editedSingleCarrierStringText + "')]");
    }


    public String verifiesFulfilmentMethodsIsDisplayed(String shippingMethod) {
        return commonUtils.getText("//*[text()='" + shippingMethod + "']");
    }

    public void entersForRequiredCarrierString() {
        firstCarrierString = getFirstCarrierString(locators.getProperty("firstCarrierStringLoc"));
        commonUtils.click(locators.getProperty("carrierStringSearchBox"));
        commonUtils.enterText(locators.getProperty("carrierStringSearchBox"), firstCarrierString);
    }

    public void clickOnCarrierStringSearchButton() {
        commonUtils.click(locators.getProperty("carrierStringSearchButton"));
    }

    public void shouldSeeSingleSearchedCarrierString() {
        List<WebElement> noOfCarrierStringAfterSearch = commonUtils.getWebElements(locators.getProperty("noOfCarrierStringLoc"));
        Assert.assertEquals(firstCarrierString.toUpperCase(), getFirstCarrierString(locators.getProperty("firstCarrierStringLoc")).toUpperCase());
        Assert.assertTrue(noOfCarrierStringAfterSearch.size() == 1);
    }

    public void entersPartialCarrierString() {
        firstCarrierString = getFirstCarrierString(locators.getProperty("firstCarrierStringLoc"));
        commonUtils.click(locators.getProperty("carrierStringSearchBox"));
        commonUtils.enterText(locators.getProperty("carrierStringSearchBox"), firstCarrierString.substring(0, firstCarrierString.length() - 1));
    }

    public String shouldSeeErrorMsgOnEditItemsPopup(String errorMsg) {
        return commonUtils.getText("//div[text()='" + errorMsg + "']");
    }

    public void clearsPrefilledTextOfCarrierString() {
        commonUtils.deleteTextByKeys(locators.getProperty("editSingleCarrierStringTextBox"));
    }

    public boolean shouldSeeCrossButtonOfCarrierString(String carrierString) {
        return commonUtils.elementIsDisplayed("//p[text()='" + carrierString + "']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//button");
    }

    public boolean shouldSeeRightTickButtonOfCarrierString(String carrierString) {
        return commonUtils.elementIsDisplayed("//p[text()='" + carrierString + "']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//button//parent::div//following-sibling::div//button");
    }

    public void clickOnCrossButtonOfCarrierStringField(String carrierString) {
        commonUtils.click("//p[text()='" + carrierString + "']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//button");
    }

    public void shouldSeeNoChangesInCarrierStringTextField(String carrierString) {
        Assert.assertEquals(firstCarrierString.toUpperCase(), getFirstCarrierString(locators.getProperty("firstCarrierStringLoc")).toUpperCase());
    }

    public boolean shouldSeePenIconAtTheEndOfCarrierString() {
        return commonUtils.elementIsDisplayed(locators.getProperty("carrierStringEditPopupEditButton"));
    }

    public void clicksOnEditButtonOfMultipleCarrierStrings(String carrierString) {
        addOneCarrierStringIfThereIsOnlyOne();
        commonUtils.waitTillElementIsVisible("//p[text()='" + carrierString + "']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//div//button", 15);
        List<WebElement> carrierStringsEditButtonList = commonUtils.getWebElements("//p[text()='" + carrierString + "']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//div//button");
        for (int i = 0; i < 2; i++) {
            carrierStringsEditButtonList.get(i).click();
        }
    }


    public void shouldSeeInlineEditTextCrossAndRightTickButton(String carrierString) {
        List<WebElement> carrierStringsInlineTextList = commonUtils.getWebElements("//p[text()='" + carrierString + "']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//button//following-sibling::button//parent::div//parent::div//input//div");

        for (int i = 0; i < carrierStringsInlineTextList.size(); i++) {
            String carrierStringInlineText = "(//p[text()='" + carrierString + "']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//button//following-sibling::button//parent::div//parent::div//input)[" + i + "]";
            commonUtils.elementIsDisplayed(carrierStringInlineText);

            String carrierStringCrossButton = "(//p[text()='" + carrierString + "']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//button//following-sibling::button//preceding-sibling::button)[" + i + "]";
            commonUtils.elementIsDisplayed(carrierStringCrossButton);

            String carrierStringRightTickButton = "(//p[text()='" + carrierString + "']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//button//following-sibling::button)[" + i + "]";
            commonUtils.elementIsDisplayed(carrierStringRightTickButton);
        }

    }

    public boolean shouldSeePassedFields(String field) {
        return commonUtils.elementIsDisplayed("//*[text()='" + field + "']");
    }


    public void clearsPrefilledTextOfThresholdAndShipmentUpSellFields() {
        commonUtils.deleteTextByKeys(locators.getProperty("thresholdPrice"));
        commonUtils.deleteTextByKeys(locators.getProperty("shipmentUpSellPrice"));
    }

    List<String> deDupSmsPositionList = new ArrayList<>();

    public void storesAllShippingMethodPositionsUnderPassedShippingMethod(String passedSm) {
        List<WebElement> passedSmsPositionWebElementList = commonUtils.getWebElements("//p[text()='" + passedSm + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Position']//following-sibling::div");
        List<String> passedSmsPositionStringsList = new ArrayList<>();
        commonUtils.addWebElementListToStringsList(passedSmsPositionStringsList, passedSmsPositionWebElementList);
        deDupSmsPositionList = new ArrayList<>(new LinkedHashSet<>(passedSmsPositionStringsList));
    }

    public boolean shouldSeePositionsFromOneToHundredInSmPositionDropdown() {
        boolean checkSmPosBetweenOneToHundred = true;
        List<WebElement> positionValuesWebElementList = commonUtils.getWebElements(locators.getProperty("positionValuesListLoc"));
        List<String> smPositionStringsList = new ArrayList<>();
        commonUtils.addWebElementListToStringsList(smPositionStringsList, positionValuesWebElementList);
        Assert.assertFalse(CollectionUtils.containsAny(deDupSmsPositionList, smPositionStringsList));

        for (String smPos : smPositionStringsList) {
            deDupSmsPositionList.add(smPos);
        }

        List<Integer> smPositionIntegerList = new ArrayList<>();
        commonUtils.convertStringsListToIntegerList(deDupSmsPositionList, smPositionIntegerList);
        Collections.sort(smPositionIntegerList);

        Assert.assertEquals(100, smPositionIntegerList.size());
        int number = 1;
        for (int indexOfSmPos = 0; indexOfSmPos < 100; indexOfSmPos++) {
            if (!(number == smPositionIntegerList.get(indexOfSmPos))) {
                log.info("SM Position: " + smPositionIntegerList.get(indexOfSmPos) + " number: " + number);
                checkSmPosBetweenOneToHundred = false;
            }
            number++;
        }
        deDupSmsPositionList.clear();
        return checkSmPosBetweenOneToHundred;
    }

    public boolean shouldSeeErrorMsgOnPassedField() {
        return commonUtils.elementIsDisplayed(locators.getProperty("requiredFieldErrorMsg"));
    }

    public String checkAsteriskSymbolByGettingRgbColorCodeOfPsuedoElement() {
        return commonUtils.checkAsteriskSymbolByGettingRgbColorCodeOfPsuedoElement(locators.getProperty("requiredFieldErrorMsg"));
    }

    public void clearsSearchedString() {
        commonUtils.deleteTextByKeys(locators.getProperty("carrierStringSearchBox"));
    }

    public void shouldSeeCarrierStringList(){
        commonUtils.waitTillElementIsVisible(locators.getProperty("carrierStringList"), 15);
        List<WebElement> carrierStringList = commonUtils.getWebElements(locators.getProperty("carrierStringList"));
        for (WebElement carrierString : carrierStringList) {
            Assert.assertEquals(carrierString.getAttribute("value"), commonUtils.getAttribute("//p[text()='Carrier Strings']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//input[@color='primary' and @value='" + carrierString.getAttribute("value")+ "']", "value"));
        }

    }

    public void clicksOnCloseIconOfValidationHeaderPopup() {
        commonUtils.click(locators.getProperty("validationErrorPopupCloseButton"));
    }

    public void clearsValueField() {
        commonUtils.deleteTextByKeys(locators.getProperty("value"));
    }

    public String verifiesPassedModuleIsDisplayedUnderComnMenu(String moduleName) {
        return commonUtils.getText("//label[text()='"+moduleName+"']");
    }

    public String verifiesPassedSubMenuIsDisplayedUnderFulfilmentComnMenu(String subMenu) {
        return commonUtils.getText("//label[text()='"+subMenu+"']");
    }

    public boolean verifiesPassedSubMenuIsHidden(String subMenu) {
        return commonUtils.elementIsDisplayed("//label[text()='"+subMenu+"']");
    }

    public void verifiesComnModulesOrder(DataTable comnModules) {
        List<List<String>> comnModulesDataTable = comnModules.asLists(String.class);
        List<String> comnModulesListFromUI = getComnModules();

        for(List<String> comnModuleList: comnModulesDataTable)
        {
            Assert.assertArrayEquals(comnModuleList.toArray(), comnModulesListFromUI.toArray());
        }
    }

    private List<String> getComnModules() {
        List<String> comnModules = new ArrayList<>();
        comnModules.add("Checkout");
        comnModules.add("Tax Rates");
        comnModules.add("Fulfilment");
        comnModules.add("Payment");
        comnModules.add("Basket");
        comnModules.add("Product");
        comnModules.add("Inventory");
        comnModules.add("Audit Trail");
        return comnModules;
    }

    public void verifiesCarrierStringsShouldBeInSortedOrder() {
        List<WebElement> carrierStringsWebElementList = commonUtils.getWebElements(locators.getProperty("carrierStringListLoc"));
        commonUtils.addWebElementListWithAttributeToStringsList(uISortedList, carrierStringsWebElementList, "value");
        bESortedList = commonUtils.sortAlphanumericallyInAscendingOrder(uISortedList);

        Assert.assertEquals(uISortedList, bESortedList);
        uISortedList.clear();
        bESortedList.clear();
    }

    public boolean verifiesCarrierStringIsDeleted() {
        commonUtils.waitTillElementIsVisible("//p[text()='Carrier Strings']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//input[@value='"+firstCarrierString+"']", 15);
        return commonUtils.elementIsDisplayed("//p[text()='Carrier Strings']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//tr//td//div//input[@value='"+firstCarrierString+"']");
    }

    public void verifiesCarrierStringsShouldBeInSortedOrderInPassedShippingMethodPage() {
        String[] carrierStringArray = commonUtils.getText(locators.getProperty("carrierStringListLocInSmPage")).split(", ");
        uISortedList = new LinkedList<>(Arrays.asList(carrierStringArray));
        log.info("UI Sorted Carrier Strings: " + uISortedList);

        bESortedList = commonUtils.sortAlphanumericallyInAscendingOrder(uISortedList);
        log.info("BE Sorted Carrier Strings: " + bESortedList);

        Assert.assertEquals(uISortedList, bESortedList);
        uISortedList.clear();
        bESortedList.clear();
    }

    public void clickOnCarrierStringsDropdownOnPassedSmPage() {
        commonUtils.waitUntilVisibleAndClick(locators.getProperty("carrierStringsDropdownLoc"));
    }

    public void clickOnAddItemsButtonOfEditItemsPopup() {
        commonUtils.click(locators.getProperty("editPopCarrierStringsAddItemsButton"));
    }

    public String verifiesErrorMsgOnPassedDeliveryDaysField(String deliveryDaysField) {
        if(deliveryDaysField.equalsIgnoreCase("Minimum Delivery Days"))
        {
            return commonUtils.getText("//label[text()='"+deliveryDaysField+"']//parent::div//parent::div//div[text()=' Value should be less than maximum days']");
        }
        else {
            return commonUtils.getText("//label[text()='"+deliveryDaysField+"']//parent::div//parent::div//div[text()='Value should be greater than  minimum days']");
        }
    }


    public String checksAsteriskSymbolByGettingRgbColorCodeOfPsuedoElement(String errorMsg, String fieldName) {
        return commonUtils.checkAsteriskSymbolByGettingRgbColorCodeOfPsuedoElement("//label[text()='"+fieldName+"']//parent::div//parent::div//div[text()='"+errorMsg+"']");

        /*if(!(fieldName.equalsIgnoreCase("Value")))
        {
            return commonUtils.checkAsteriskSymbolByGettingRgbColorCodeOfPsuedoElement("//label[text()='"+fieldName+"']//parent::div//div[text()='"+errorMsg+"']");
        }
        else {
            return commonUtils.checkAsteriskSymbolByGettingRgbColorCodeOfPsuedoElement("//label[text()='"+fieldName+"']//parent::div//parent::div//div[text()='"+errorMsg+"']");
        }*/
    }

    public boolean verifiesErrorMsgOnPassedField(String errorMsg, String fieldName) {
        return commonUtils.elementIsDisplayed("//label[text()='"+fieldName+"']//parent::div//parent::div//div[text()='"+errorMsg+"']");
        /*if(!(fieldName.equalsIgnoreCase("Value")))
        {
            return commonUtils.elementIsDisplayed("//label[text()='"+fieldName+"']//parent::div//div[text()='"+errorMsg+"']");
        }
        else {
            return commonUtils.elementIsDisplayed("//label[text()='"+fieldName+"']//parent::div//parent::div//div[text()='"+errorMsg+"']");
        }*/
    }

    public void selectsPassedValueFromDropdown(String value, String fieldName) {
        commonUtils.click("//div[@overflow]//div[text()='"+value+"']");
    }

    public void clicksOnOperatorDropdown() {
        commonUtils.click("//label[text()='OPERATOR']//parent::div//input[@placeholder='Choose Item...']//parent::div");
    }

    public void enterPassedValueInPassedField(String data, String fieldName) {
        commonUtils.clickClearAndEnterText(locators.getProperty("value"), data);
    }

    public void clicksOnButtonThroughKeyBoard(String key) {
        commonUtils.enterText(locators.getProperty("carrierStringSearchButton"), "Keys.TAB");
        commonUtils.getWebElement(locators.getProperty("carrierStringSearchButton")).sendKeys(Keys.ENTER);
    }

    public boolean verifiesAddCarrierStringButtonOnCreateShippingMethodPage() {
        return commonUtils.elementIsDisplayed(locators.getProperty("uploadCarrierString"));
    }

    public void clicksOnCarrierStringsTextOutsideCarrierStringSearchBox() {
        commonUtils.click(locators.getProperty("carrierStringsText"));
    }

    public boolean verifiesEditedCarrierStringIsDisplayed() {
        return commonUtils.elementIsDisplayed("//div[text()='"+editedSingleCarrierStringText+"']");
    }

    public void deletesAllCarrierStringsExceptNewlyCreated(String newlyCreatedCarrierString) {
        List<WebElement> carrierStringsWebElementList = commonUtils.getWebElements(locators.getProperty("carrierStringListLoc"));

        if(newlyCreatedCarrierString.isEmpty())
        {
            newlyCreatedCarrierString = carrierStringText;
        }

        int initialCarrierStringSize = carrierStringsWebElementList.size();
        while(initialCarrierStringSize!=0)
        {
            deleteOneCarrierStringExceptNewCarrierString(newlyCreatedCarrierString);
            initialCarrierStringSize--;
        }

    }

    private void deleteOneCarrierStringExceptNewCarrierString(String newlyCreatedCarrierString) {
        commonUtils.waitTillElementIsVisible(locators.getProperty("carrierStringListLoc"), 15);
        List<WebElement> carrierStringsWebElementList = commonUtils.getWebElements(locators.getProperty("carrierStringListLoc"));

        commonUtils.addWebElementListWithAttributeToStringsList(carrierStringsList, carrierStringsWebElementList, "value");

        for(int carrierStringIndex=0; carrierStringIndex < carrierStringsList.size(); carrierStringIndex++)
        {
            if(!(carrierStringsList.get(carrierStringIndex).equalsIgnoreCase(newlyCreatedCarrierString)))
            {
                log.info("CarrierString from popup: "+carrierStringsList.get(carrierStringIndex)+", Newly Created Carrier String: "+newlyCreatedCarrierString);
                commonUtils.waitTillElementIsVisible("(//p[text()='Carrier Strings']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//td//div//button[not(@width)])["+(carrierStringIndex+1)+"]", 10);
                commonUtils.click("(//p[text()='Carrier Strings']//parent::div//parent::div//label[text()='Type']//ancestor::table//tbody//td//div//button[not(@width)])["+(carrierStringIndex+1)+"]");
                commonUtils.click(locators.getProperty("yesButton"));
                break;
            }
        }
        carrierStringsList.clear();
    }

    public int verifiesDeletedCarrierStringsIsNotDisplayed() {
        List<WebElement> createOrConfigurePageCarrierStringsList = commonUtils.getWebElements(locators.getProperty("createOrConfigurePageCarrierStringsList"));
        return createOrConfigurePageCarrierStringsList.size();
    }

    public void checksAtleastTwoAllowedOrBlockedItemsIsPresent() {
        List<WebElement> allowOrBlockItemsList = commonUtils.getWebElements(locators.getProperty("noOfAllowOrBlockedListItems"));
        //commonUtils.moveToElement(locators.getProperty("locales"));
        if (commonUtils.elementIsDisplayed(locators.getProperty("noItemsText"))) {
            noOfAllowOrBlockedItems = 0;
        }
        else {
            noOfAllowOrBlockedItems = allowOrBlockItemsList.size();
        }
    }

    public void addsTwoItemsIfNotPresent(int expectedNoOfItems) throws InterruptedException {
        if(noOfAllowOrBlockedItems < expectedNoOfItems)
        {
            if(noOfAllowOrBlockedItems == 0)
            {
                addNewAllowedOrBlockedItemInShippingMethod("allowType", "productIdItem", "equalsOperator", "GX3060");
                addNewAllowedOrBlockedItemInShippingMethod("blockType", "cityItem", "containsOperator", "ABC");
            }
            else {
                addNewAllowedOrBlockedItemInShippingMethod("allowType", "postalCodeItem", "containsOperator", "XYZ");
            }
        }
    }

    private void addNewAllowedOrBlockedItemInShippingMethod(String allowValue, String typeValue, String operatorValue, String value) {
        commonUtils.waitTillElementIsVisible(locators.getProperty("addItemsButton"), 10);
        commonUtils.click(locators.getProperty("addItemsButton"));
        commonUtils.click(locators.getProperty("typeDropdown"));
        commonUtils.click(locators.getProperty(allowValue));
        commonUtils.click(locators.getProperty("itemDropdown"));
        commonUtils.click(locators.getProperty(typeValue));
        commonUtils.click(locators.getProperty("operatorDropdown"));
        commonUtils.click(locators.getProperty(operatorValue));
        commonUtils.enterText(locators.getProperty("value"), value);
        commonUtils.click(locators.getProperty("allowOrBlockSaveButton"));
        commonUtils.click(locators.getProperty("closeButton"));
    }


    public void clicksOnAllowedOrBlockedTableColumn(String allowOrBlockItemTableColumn) {
        commonUtils.click("//label[text()='"+allowOrBlockItemTableColumn+"']//parent::div");
    }

    public void validatesAllowedOrBlockedTableColumnIsSortedAscendingOrDescendingOrde(String allowOrBlockItemTableColumnName, String sortingOrder) {
        indexOfColumn = commonUtils.getIndexOfRequiredColumn(allowOrBlockItemTableColumnName, locators.getProperty("tableColumnNamesListLoc"));
        List<WebElement> allowOrBlockPassedColumnList = commonUtils.getWebElements("//table//tbody//tr//td[" + (indexOfColumn + 2) + "]//div[contains(@class,'Text')]");
        commonUtils.addWebElementListToStringsList(uISortedList, allowOrBlockPassedColumnList);

        if(sortingOrder.equalsIgnoreCase("ascending"))
        {
            bESortedList = commonUtils.sortAlphanumericallyInAscendingOrder(uISortedList);
        }
        else {
            bESortedList = commonUtils.sortAlphanumericallyInDescendingOrder(uISortedList);
        }

        uISortedList.clear();

        allowOrBlockPassedColumnList = commonUtils.getWebElements("//table//tbody//tr//td[" + (indexOfColumn + 2) + "]//div[contains(@class,'Text')]");
        commonUtils.addWebElementListToStringsList(uISortedList, allowOrBlockPassedColumnList);

        Assert.assertEquals(uISortedList, bESortedList);
        uISortedList.clear();
        bESortedList.clear();
    }

    public void clicksOnLinkOfShippingMethod(String link, String fulfilmentMethod) {
        switch (link){
            case "edit link":
                commonUtils.scrollAndClick("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']//..//div[@rotate='0']");
                commonUtils.click("//p[text()='" + fulfilmentMethod + "']//parent::div//parent::div//p[text()='Shipping Methods']//parent::div//div[text()='Edit']");
                break;
            default:
                throw new Error("link is not specified");
        }
    }

    public boolean verifiesDeleteButtonIsVisible() {
        return commonUtils.elementIsDisplayed(locators.getProperty("shippingMethodDeleteButton"));
    }

    public void clicksOnFulfilmentModuleButton(String button) {
        switch (button){
            case "delete":
                commonUtils.click(locators.getProperty("shippingMethodDeleteButton"));
                break;
            case "dismiss":
                commonUtils.click(locators.getProperty("tooltipDismissButton"));
                break;
            default:
                throw new Error("Button is not specified");
        }
    }

    public void getsExistingCustomIdOfRandomShippingMethod() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("fulfilmentPageCustomId"), 15);
        existingCustomerId = commonUtils.getText(locators.getProperty("fulfilmentPageCustomId"));
    }

    public boolean verifiesNewlyCreatedShippingMethodCustomIdNotMatchedWithOther(String newCustomId) throws InterruptedException {
        commonUtils.waits(3);
        newCustomId = CommonPage.newlyCreatedCustomId;
        commonUtils.waitTillElementIsVisible(locators.getProperty("fulfilmentPageCustomId"), 15);
        List<WebElement> customIdList = commonUtils.getWebElements(locators.getProperty("fulfilmentPageCustomId"));
        int customIdCount = 0;
        log.info("Newly created custom id: "+newCustomId);
        for(WebElement customId: customIdList)
        {
            log.info("Custom id from UI: "+customId.getText());
            if(customId.getText().equalsIgnoreCase(newCustomId))
            {
                customIdCount++;
            }
        }
        if(customIdCount == 1)
            return true;
        else
            return false;
    }

    public boolean verifiesFulfilmentMethodFieldsIsDisplayed(DataTable fulfilmentMethodFieldsDataTable) {
        int countOfFieldNotDisplayed = 0;
        List<List<String>> fulfilmentMethodFieldsLists = fulfilmentMethodFieldsDataTable.asLists(String.class);

        for(List<String> fulfilmentMethodFieldList: fulfilmentMethodFieldsLists)
        {
            for(String field : fulfilmentMethodFieldList)
            {
                if(!commonUtils.elementIsDisplayed("//label[text()='"+field+"']"))
                {
                    countOfFieldNotDisplayed ++;
                }
            }
        }
        return countOfFieldNotDisplayed <= 0;
    }

    public void storesValuesOfFulfilmentMethodFields(DataTable fulfilmentMethodFieldsDataTable) {
        List<List<String>> fulfilmentMethodFieldsLists = fulfilmentMethodFieldsDataTable.asLists(String.class);

        for(List<String> fulfilmentMethodFieldList: fulfilmentMethodFieldsLists)
        {
            for(String field : fulfilmentMethodFieldList)
            {
                fulfilmentMethodFieldMap.put(field, commonUtils.getText("//label[text()='"+field+"']//parent::div//following-sibling::div//div[contains(@class,'Text')]"));
            }
        }
    }

    public boolean verifiesStoredFulfilmentMethodFieldsValuesAreSame() {
        int countOfFieldValueMismatch = 0;
        for (String field: fulfilmentMethodFieldMap.keySet()) {
            switch (field)
            {
                case "Position":
                    if(!fulfilmentMethodFieldMap.get(field).equalsIgnoreCase(commonUtils.getAttribute(locators.getProperty("positionPlaceholder"), "value")))
                    {
                        log.error("Position field values are not same");
                        log.error("Stored Position: " + fulfilmentMethodFieldMap.get(field));
                        log.error("Position from UI: " + commonUtils.getAttribute(locators.getProperty("positionPlaceholder"), "value"));
                        countOfFieldValueMismatch ++;
                    }
                    break;
                case "Languages":
                    if(!fulfilmentMethodFieldMap.get(field).equalsIgnoreCase(commonUtils.getText(locators.getProperty("fulfilmentMethodLanguage"))))
                    {
                        log.error("Languages field values are not same");
                        log.error("Stored Languages: " + fulfilmentMethodFieldMap.get(field));
                        log.error("Languages from UI: " + commonUtils.getText(locators.getProperty("fulfilmentMethodLanguage")));
                        countOfFieldValueMismatch ++;
                    }
                    break;
                case "Name":
                    if(!fulfilmentMethodFieldMap.get(field).equalsIgnoreCase(commonUtils.getAttribute(locators.getProperty("name"), "value")))
                    {
                        log.error("Name field values are not same");
                        log.error("Stored Name: " + fulfilmentMethodFieldMap.get(field));
                        log.error("Name from UI: " + commonUtils.getAttribute(locators.getProperty("name"), "value"));
                        countOfFieldValueMismatch ++;
                    }
                    break;
                case "Description":
                    if(!fulfilmentMethodFieldMap.get(field).equalsIgnoreCase(commonUtils.getText(locators.getProperty("description"))))
                    {
                        log.error("Description field values are not same");
                        log.error("Stored Description: " + fulfilmentMethodFieldMap.get(field));
                        log.error("Description from UI: " + commonUtils.getText(locators.getProperty("description")));
                        countOfFieldValueMismatch ++;
                    }
                    break;
                default:
                    throw new Error("Fulfilment Method field is not specified " + field);
            }
        }
        return countOfFieldValueMismatch <= 0;
    }

    public void updateCarrierString() throws InterruptedException {
        clickOnEditButtonOfCarrierStrings();
        clickOnEditButtonOnEditItemsPopup();
        editsPrefilledText();
        clickOnRightTickButtonOfCarrierStringsPopup("Carrier Strings");
        clickOnCrossIconOfCarrierStringsEditItemsPopup("Carrier Strings");
    }


    public void enablesFulfilmentMethodWithOneActiveShippingMethod(String fulfilmentMethod, String activeState) throws InterruptedException {
        if(!commonUtils.getText(locators.getProperty("fulfilmentMethodStatusCheckboxTextLoc")).equalsIgnoreCase(activeState))
        {
            commonUtils.waitForElementClick(locators.getProperty("status"));
            commonUtils.waitTillElementIsVisible(locators.getProperty("fulfilmentMethodPopUpCloseButton"), 10);
            commonUtils.click(locators.getProperty("fulfilmentMethodPopUpCloseButton"));
        }
        createOneShippingMethod("Active");
    }

    private void createOneShippingMethod(String shippingMethodStatus) throws InterruptedException {
        commonPage.clickOnButton(CommonEnum.fromString("Add Shipping Method"), "Add Shipping Method");

        commonPage.clickOnDropdown(DropdownEnum.fromString("Carrier Name"), "Carrier Name");
        commonPage.selectRandomValueFromDropdown(DropdownEnum.fromString("Carrier Name"), "Carrier Name");

        commonPage.clickOnDropdown(DropdownEnum.fromString("Carrier Service"), "Carrier Service");
        commonPage.selectRandomValueFromDropdown(DropdownEnum.fromString("Carrier Service"), "Carrier Service");

        commonPage.clickOnButton(CommonEnum.fromString("Add Carrier String"), "Add Carrier String");
        commonPage.clickOnRadioButton(CommonEnum.fromString("Add single carrier string"), "Add single carrier string");
        commonPage.entersValueInField("HelloWork", CommonEnum.fromString("Add single carrier string"), "Add single carrier string");
        commonPage.clickOnButton(CommonEnum.fromString("add"), "add");

        commonPage.entersValueInField("New Custom ID", CommonEnum.fromString("Custom ID"), "Custom ID");

        //commonPage.clickOnDropdown(DropdownEnum.fromString("Position"), "Position");
        //commonPage.selectRandomValueFromDropdown(DropdownEnum.fromString("Position"), "Position");
        String shippingMethodStatusFromUI;

        if(commonUtils.elementIsDisplayed(locators.getProperty("shippingMethodStatusLoc")))
            shippingMethodStatusFromUI = "Active";
        else
            shippingMethodStatusFromUI = "Inactive";

        if(!shippingMethodStatusFromUI.equalsIgnoreCase(shippingMethodStatus))
            commonPage.clickOnCheckBox(CommonEnum.fromString("Fulfilment Method Status"), "Fulfilment Method Status");

        commonPage.entersValueInField("2", CommonEnum.fromString("Minimum"), "Minimum");
        commonPage.entersValueInField("5", CommonEnum.fromString("Maximum"), "Maximum");

        commonPage.entersValueInField("10", CommonEnum.fromString("Based Fixed"), "Based Fixed");
        commonPage.entersValueInField("15", CommonEnum.fromString("Threshold"), "Threshold");

        commonPage.clickOnDropdown(DropdownEnum.fromString("Tax Class"), "Tax Class");
        commonPage.selectRandomValueFromDropdown(DropdownEnum.fromString("Tax Class"), "Tax Class");


        commonPage.selectRandomCheckBox(CommonEnum.fromString("Channels"), "Channels");
        commonPage.selectRandomCheckBox(CommonEnum.fromString("Product Types"), "Product Types");

        commonPage.clickOnTab(CommonEnum.fromString("Content"), "Content");
        commonPage.entersValueInField("HelloTest", CommonEnum.fromString("Name"), "Name");

        commonPage.clickOnButton(CommonEnum.fromString("Save"), "Save");
        Assert.assertTrue(commonPage.validatesPopupIsDisplayed(CommonEnum.fromString("Success"), "Success"));
        commonPage.clickOnButton(CommonEnum.fromString("close X"), "close X");
    }

    public void validatesOnlySelectedShippingMethodIsDisplayed() {
        List<WebElement> bulkUpdateShippingMethodTableHeaders = commonUtils.getWebElements(locators.getProperty("totalNumberOfColumnsFromUILoc"));
        log.info("Size is: " + bulkUpdateShippingMethodTableHeaders.size());
        Assert.assertTrue(bulkUpdateShippingMethodTableHeaders.size() >= 2);
        Assert.assertTrue(commonUtils.elementIsDisplayed("//table//thead//tr//th//label[text()='"+ CommonPage.newlyCreatedCustomId +"']"));
    }

    public boolean verifiesErrorMessageIsDisplayedOnField(String errorMessage, String fieldName) {
        return commonUtils.elementIsDisplayed("//label[text()='"+fieldName+"']//parent::div//parent::div//div[text()='"+errorMessage+"']");
    }


    public void disableAllShippingMethodsOfFulfilmentMethod(String fulfilmentMethod) {
        List<WebElement> activeShippingMethodsList = commonUtils.getWebElements(locators.getProperty("activeShippingMethodsLoc"));

        for(int activeShippingMethodCount = 0; activeShippingMethodCount <+ activeShippingMethodsList.size(); activeShippingMethodCount++ )
        {
            commonPage.clickOnIcon(CommonEnum.fromString("Non-Default Shipping Method"), "Non-Default Shipping Method");
            commonUtils.click(locators.getProperty("shippingMethodStatusToggleButtonLoc"));

            commonUtils.waitTillElementIsVisible(locators.getProperty("fulfilmentMethodPopUpCloseButton"), 15);
            if (commonUtils.elementIsDisplayed(locators.getProperty("fulfilmentMethodPopUpCloseButton"))) {
                commonUtils.click(locators.getProperty("fulfilmentMethodPopUpCloseButton"));
            }
            log.info("Clicking on expand icon of already disabled shipping method");
            commonPage.clickOnIcon(CommonEnum.fromString("Non-Default Shipping Method"), "Non-Default Shipping Method");
        }
    }

    public void validatesColumnDataIsDisplayedInBelowOrder(String columnName, DataTable columnDataTable) {
        List<WebElement> columnDataWebElementListFromUI = commonPage.getColumnDataFromColumnName(columnName);
        List<String> columnDataStringsListFromUI = columnDataWebElementListFromUI.stream().map(columnData -> columnData.getText()).collect(Collectors.toList());
        Collections.sort(columnDataStringsListFromUI);

        List<List<String>> passedColumnDataTable = columnDataTable.asLists(String.class);

        for(List<String> columnDataList: passedColumnDataTable)
        {
            Assert.assertEquals(columnDataStringsListFromUI, columnDataList);
        }
    }

    public boolean validatesShippingMethodsCountIsZero(String activeOrInactiveShippingMethod) {
        List<WebElement> activeOrInactiveShippingMethodsList;
        if(activeOrInactiveShippingMethod.equalsIgnoreCase("Active")) {
            activeOrInactiveShippingMethodsList = commonUtils.getWebElements("//p[text()='" + activeOrInactiveShippingMethod + "']//parent::div//div[@id='active_']");
        } else {
            activeOrInactiveShippingMethodsList = commonUtils.getWebElements("//p[text()='" + activeOrInactiveShippingMethod + "']//parent::div//div[@id='inactive_']");
        }
        return activeOrInactiveShippingMethodsList.size() == 0;
    }
}


package com.adidas.tpAdidasSerenity.fe.pageObjects;

import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import net.thucydides.core.pages.PageObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class PaymentsPage extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(PaymentsPage.class);

    CommonUtils commonUtils = new CommonUtils();
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");

    public void validatesChannelsIsDisplayedInPaymentChannelDropdown() {
        List<String> paymentChannelsList = getPaymentChannelsList();
        commonUtils.checkDataFromUiAndStoredData(paymentChannelsList, locators.getProperty("paymentChannelsListLoc"));
    }

    public List<String> getPaymentChannelsList() {
        List<String> paymentChannelList = new ArrayList<>();
        paymentChannelList.add("Adidas Consumer App");
        paymentChannelList.add("Adidas Confirmed App");
        paymentChannelList.add("Web");
        return paymentChannelList;
    }

    public String verifiesPassedValueIsDisplayedOnPassedField(String fieldName) {
        return commonUtils.getAttribute("//*[text()='Payment Edit']//parent::div//parent::div//label[text()='" + fieldName + "']//parent::div//following::div//input", "value");
    }

    public void clickOutsideField(String field) {
        commonUtils.click("//p[text()='Payment Edit']");
    }
}


package com.adidas.tpAdidasSerenity.fe.pageObjects;

import au.com.bytecode.opencsv.CSVReader;
import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import net.thucydides.core.pages.PageObject;
import org.junit.Assert;

import org.openqa.selenium.WebElement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.*;

public class ProductsPage extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(ProductsPage.class);

    CommonUtils commonUtils = new CommonUtils();
    BasketAdminPageCA basketAdminPageCA = new BasketAdminPageCA();
    CommonPage commonPage = new CommonPage();

    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");
    List<WebElement> attributesList = new ArrayList<>();
    int indexOfColumn, attributesListSize, totalProductsAttributesSize;

    public boolean validatesStoredAttributesOnProductsPage(String attributesCsvFile, String region) throws IOException, BiffException {
        boolean flag = true;
        File inputWorkbook = new File("./src/test/resources/data/excelFiles/" + attributesCsvFile);
        Workbook wb;
        wb = Workbook.getWorkbook(inputWorkbook);
        Sheet sheet;
        if(region.equalsIgnoreCase("USA"))
            sheet = wb.getSheet(0);
        else if(region.equalsIgnoreCase("CANADA"))
            sheet = wb.getSheet(1);
        else
            sheet = wb.getSheet(2);

        int totalNumberOfColumns = sheet.getColumns();
        List<String> expectedColumns = new ArrayList<>();
        for (int x = 0; x < totalNumberOfColumns; x++) {
            Cell cell = sheet.getCell(x, 0);
            String column = cell.getContents();
            expectedColumns.add(column);
        }
        LinkedHashMap<String, List<String>> columnDataValues = new LinkedHashMap<>();

        List<String> columnDataList;
        // read values from driver sheet for each column
        for (int j = 0; j < totalNumberOfColumns; j++) {
            columnDataList = new ArrayList<>();
            for (int i = 1; i < sheet.getColumn(j).length; i++) {
                Cell cell = sheet.getCell(j, i);
                columnDataList.add(cell.getContents());
            }
            log.info("No of data values for " + expectedColumns.get(j) + " is: " + columnDataList.size());
            columnDataValues.put(expectedColumns.get(j), columnDataList);
        }

        for (int i = 0; i < columnDataValues.size(); i++) {
            List<String> columnValues = columnDataValues.get(expectedColumns.get(i));
            List<WebElement> attributeListBasedOnHeader = commonUtils.getWebElements("//div[text()='" + expectedColumns.get(i) + "']//parent::div//label");
            for (int j = 0; j < columnValues.size(); j++) {
                if (!columnValues.get(j).toUpperCase().trim().equalsIgnoreCase(attributeListBasedOnHeader.get(j).getText().toUpperCase().trim())) {
                    flag = false;
                    log.error("There is a mismatch of data under the column: " + expectedColumns.get(i) + " with index value " + j);
                }
            }
        }
        return flag;
    }

    public void selectsPassedAttributesFromExcel(Integer noOfAttributes, String excelFile) throws BiffException, IOException {
        File inputWorkbook = new File("./src/test/resources/data/excelFiles/" + excelFile);
        Workbook wb;
        wb = Workbook.getWorkbook(inputWorkbook);

        attributesList = commonUtils.getWebElements(locators.getProperty("attributesListLoc"));
        totalProductsAttributesSize = attributesList.size();

        Sheet sheet = wb.getSheet(0);
        int totalNumberOfColumns = sheet.getColumns();
        for (int j = 0; j < totalNumberOfColumns; j++) {
            for (int i = 1; i < noOfAttributes + 1; i++) {
                Cell cell = sheet.getCell(j, i);
                commonUtils.click("//div[text()='" + cell.getContents() + "']//preceding-sibling::div");
            }
        }
    }

    public boolean verifiesSelectedAttributes(int noOfAttributesSelected, String excelFile) throws BiffException, IOException {
        commonUtils.waitTillElementIsClickable(locators.getProperty("errorPopup"), 10);
        if (commonUtils.elementIsDisplayed(locators.getProperty("errorPopup"))) {
            commonUtils.click(locators.getProperty("closeErrorPopup"));
        }

        boolean checkAttributesDisplayed = true;
        File inputWorkbook = new File("./src/test/resources/data/excelFiles/" + excelFile);
        Workbook wb;
        wb = Workbook.getWorkbook(inputWorkbook);

        Sheet sheet = wb.getSheet(0);
        int totalNumberOfColumns = sheet.getColumns();
        for (int columnIndex = 0; columnIndex < totalNumberOfColumns; columnIndex++) {
            for (int rowIndex = 1; rowIndex < noOfAttributesSelected; rowIndex++) {
                Cell cell = sheet.getCell(columnIndex, rowIndex);
                if (!commonUtils.elementIsDisplayed("//label[text()='" + cell.getContents() + "']")) {
                    checkAttributesDisplayed = false;
                }
            }
        }
        commonUtils.waitTillElementIsVisible(locators.getProperty("totalNumberOfColumnsFromUILoc"), 15);
        List<WebElement> totalNumberOfColumnsFromUIList = commonUtils.getWebElements(locators.getProperty("totalNumberOfColumnsFromUILoc"));
        Assert.assertEquals(totalNumberOfColumnsFromUIList.size() - 2, noOfAttributesSelected+1);
        return checkAttributesDisplayed;
    }


    public boolean verifiesDefaultAttributes(String defaultAttributesExcelFile) throws BiffException, IOException {
        boolean flag = true;
        File inputWorkbook = new File("./src/test/resources/data/excelFiles/" + defaultAttributesExcelFile);
        Workbook wb;
        wb = Workbook.getWorkbook(inputWorkbook);

        //commonUtils.elementIsDisplayed(locators.getProperty("productId"));
        Sheet sheet = wb.getSheet(0);
        int totalNumberOfColumns = sheet.getColumns();
        for (int j = 0; j < totalNumberOfColumns; j++) {
            for (int i = 1; i < sheet.getColumn(j).length; i++) {
                Cell cell = sheet.getCell(j, i);
                if (!commonUtils.elementIsDisplayed("//label[text()='" + cell.getContents() + "']")) {
                    flag = false;
                }
            }
        }

        List<WebElement> totalNumberOfColumnsFromUIList = commonUtils.getWebElements(locators.getProperty("totalNumberOfColumnsFromUILoc"));
        Assert.assertEquals(totalNumberOfColumnsFromUIList.size() - 2, 6);
        return flag;
    }


    public void verifiesOtherCheckboxesInDisabledState() {
        String productPageCheckBoxesLoc = "//div[@type='checkbox']";
        List<WebElement> productPageCheckBoxesList = commonUtils.getWebElements(productPageCheckBoxesLoc);
        int disabledCheckBoxesCount = 0, selectedCheckBoxesCount = 0;
        for (int i = 0; i < productPageCheckBoxesList.size(); i++) {
            if (productPageCheckBoxesList.get(i).getAttribute("disabled") == null) {
                selectedCheckBoxesCount++;
            } else {
                disabledCheckBoxesCount++;
            }
        }
        Assert.assertEquals(10, selectedCheckBoxesCount);
        Assert.assertEquals(productPageCheckBoxesList.size() - 10, disabledCheckBoxesCount);
    }

    public void shouldSeeValidCountriesInProductPageMarketDropdown() {
        List<String> productCountryList = commonPage.getCountryList();

        for (int i = 0; i < productCountryList.size(); i++) {
            String storedData = productCountryList.get(i);
            String dataFromUI = commonUtils.getText("//div[@overflow]//div[text()='" + storedData + "']");
            Assert.assertEquals(dataFromUI, storedData);
        }
    }


    public String verifiesAvailableSearchResult(String searchedProductId) {
        return commonUtils.getText("//div[text()='" + searchedProductId + "']").toUpperCase();
    }


    public void selectsNumFromStoredPaginationFileAndValidates(String paginationDropdownNoCsvFile) {
        try {
            // Create an object of filereader
            // class with CSV file as a parameter.
            FileReader filereader = new FileReader("./src/test/resources/data/csvFiles/" + paginationDropdownNoCsvFile);

            // create csvReader object passing
            // file reader as a parameter
            CSVReader csvReader = new CSVReader(filereader);
            String[] nextRecord;

            // we are going to read data line by line
            while ((nextRecord = csvReader.readNext()) != null) {
                for (String pageSize : nextRecord) {
                    log.info("Data from file: " + pageSize);
                    BasketAdminPageCA basketAdminPageCA = new BasketAdminPageCA();

                    commonUtils.click(locators.getProperty("pageNumberDropdownButton"));

                    basketAdminPageCA.selectPageNumFromDropdown(Integer.parseInt(pageSize));

                    List<WebElement> noOfRecordsList = commonUtils.getWebElements(locators.getProperty("noOfRecordsLoc"));
                    basketAdminPageCA.shouldSeeRecordsLessThenOrEqualToSelectedNo(pageSize, noOfRecordsList);

                    basketAdminPageCA.shouldSeeSelectedPageSizeInDropdown(Integer.parseInt(pageSize));
                }
            }

        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }


    public void verifiesProductIdLessThanOrEqualToSearchedProductId(String multipleProductIdCsvFile) {
        try {
            // Create an object of filereader
            // class with CSV file as a parameter.
            FileReader filereader = new FileReader("./src/test/resources/data/csvFiles/" + multipleProductIdCsvFile);

            // create csvReader object passing
            // file reader as a parameter
            CSVReader csvReader = new CSVReader(filereader);
            String[] nextRecord;

            // we are going to read data line by line
            while ((nextRecord = csvReader.readNext()) != null) {
                for (String productIds : nextRecord) {
                    log.info("Data from file: " + productIds);
                    String[] productIdArray = productIds.split(",");
                    List<WebElement> noOfProducts = commonUtils.getWebElements(locators.getProperty("noOfProductsLoc"));
                    Assert.assertTrue(noOfProducts.size() <= productIdArray.length);
                }
            }

        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }


    List<String> selectedProductIdsList = new ArrayList<>();

    public void selectsPassedProductIdsOnProductDetailPage(int noOfProductIds) {
        selectedProductIdsList.clear();
        for (int i = 1; i <= noOfProductIds; i++) {
            selectedProductIdsList.add(commonUtils.getText("(//table//tbody//tr)[" + i + "]//td/div"));
            commonUtils.click("(//table//tbody//tr//td//input[@type='checkbox']//following-sibling::div)[" + i + "]");
        }
    }

    public void selectsPassedAttributesOption(String passedAttributes) {
        if(passedAttributes.equalsIgnoreCase("Export list with searched attributes"))
        {
            attributesList = commonUtils.getWebElements(locators.getProperty("totalNumberOfColumnsFromUILoc"));
            attributesListSize = attributesList.size()-3;
        }
        else
        {
            attributesListSize = totalProductsAttributesSize;
        }
        commonUtils.click("//div[text()='" + passedAttributes + "']");
    }

    public void verifiesPassedCsvFileExportedSuccessfully(String exportedCsvFileName) throws IOException, InterruptedException {
        basketAdminPageCA.shouldBeAbleToDownloadCsvFile(exportedCsvFileName);
    }

    public void verifiesSameNoOfAttributesAndProductIdInExportedFile(String exportedCsvFileName) throws BiffException, IOException {
        try {
            // Create an object of filereader
            // class with CSV file as a parameter.
            FileReader filereader = new FileReader("./src/test/resources/data/downloadedfiles/" + exportedCsvFileName);

            // create csvReader object passing
            // file reader as a parameter
            CSVReader csvReader = new CSVReader(filereader);
            String[] nextRecord;
            int i = 0, j = 0;

            // we are going to read data line by line
            while ((nextRecord = csvReader.readNext()) != null) {
                if (i == 0) {
                    Assert.assertEquals(attributesListSize, nextRecord.length - 1);
                    i++;
                } else {
                    Assert.assertEquals(selectedProductIdsList.get(j), nextRecord[0]);
                    j++;
                }
            }
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }


    public void selectsPassedAttribute(String passedAttribute) {
        commonUtils.click("//div[text()='Product']//parent::div//div[text()='" + passedAttribute + "']");
    }

    public void clickOnExpandIconOfPassedAttribute(String passedAttribute) {
        commonUtils.waitTillElementIsClickable(locators.getProperty("errorPopup"), 20);
        if (commonUtils.elementIsDisplayed(locators.getProperty("errorPopup"))) {
            commonUtils.click(locators.getProperty("closeErrorPopup"));
        }

        indexOfColumn = commonUtils.getIndexOfRequiredColumn(passedAttribute, locators.getProperty("tableColumnNamesListLoc"));
        String passedAttributeWithExpandIconLoc = "//label[text()='" + passedAttribute + "']//ancestor::table//tbody//tr//td[" + (indexOfColumn + 2) + "]//button";
        commonUtils.click(passedAttributeWithExpandIconLoc);
    }


    public int verifiesCompleteDataOnProductAttributeExpandPopup(String passedAttribute) {
        List<WebElement> dataListOnPassedAttributeExpandPopup = commonUtils.getWebElements("//p[text()='" + passedAttribute + "']//parent::div//parent::div//div[contains(@class,'Text')]");
        return dataListOnPassedAttributeExpandPopup.size();
    }

    public String shouldSeeSearchedInvalidProductIdInErrorPopup(String invalidProductId) {
        return commonUtils.getText("//p[text()='Error']//parent::div//parent::div//table//tbody//tr//td[text()='" + invalidProductId + "']");
    }

    public void verifiesSearchedInvalidProductIdInErrorPopup(String invalidMultipleProductIds) {
        String[] invalidProductIdsArray = invalidMultipleProductIds.split(",");
        for (int i = 0; i < invalidProductIdsArray.length; i++) {
            log.info(invalidProductIdsArray[i]);
            Assert.assertEquals(invalidProductIdsArray[i].toUpperCase(), shouldSeeSearchedInvalidProductIdInErrorPopup(invalidProductIdsArray[i]).toUpperCase());
        }
    }


    public boolean checksExportedDataWithUIData(String exportedFileName, String region) throws IOException, InterruptedException {
        basketAdminPageCA.shouldBeAbleToDownloadCsvFile(exportedFileName);
        try {
            if(!region.equalsIgnoreCase("WESTERN EUROPE"))
            {
                List<String> fieldsList = new ArrayList<>();
                List<String> fieldsDataList = new ArrayList<>();

                clickFourTabsAndGetData(fieldsList, fieldsDataList);

                FileReader filereader = new FileReader("./src/test/resources/data/downloadedfiles/" + exportedFileName);

                CSVReader csvReader = new CSVReader(filereader);
                String[] nextRecord;
                boolean checkHeaders = true, checkField = true, checkFieldData = true;

                while ((nextRecord = csvReader.readNext()) != null) {

                    if (checkHeaders) {
                        for (int fieldNameIndex = 0; fieldNameIndex < nextRecord.length - 1; fieldNameIndex++) {
                            String[] fieldName = nextRecord[fieldNameIndex + 1].split("_");
                            if (!(fieldName[fieldName.length - 1].equalsIgnoreCase(fieldsList.get(fieldNameIndex).toUpperCase()))) {
                                log.error("Mismatch in csv file and UI data");
                                log.error("Data from csv file: " + fieldName[fieldName.length - 1]);
                                log.error("Data from UI: " + fieldsList.get(fieldNameIndex).toUpperCase());
                                checkField = false;
                            }
                        }
                        checkHeaders = false;
                    } else {
                        for (int fieldDataIndex = 0, arrayIndex = 0; fieldDataIndex < nextRecord.length - 1; fieldDataIndex++) {
                            if (nextRecord[fieldDataIndex + 1].endsWith(".jpg")) {
                                arrayIndex++;
                                continue;
                            } else {
                                if (!(nextRecord[fieldDataIndex + 1].replaceAll("[\\n]+", " ").equalsIgnoreCase(fieldsDataList.get(arrayIndex).replaceAll("[\\n]+", " ")))) {
                                    log.error("Mismatch in csv file and UI data");
                                    log.error("Data from csv file: " + nextRecord[fieldDataIndex + 1].replaceAll("[\\n]+", " "));
                                    log.error("Data from UI: " + fieldsDataList.get(arrayIndex).replaceAll("[\\n]+", " "));
                                    checkFieldData = false;
                                }
                                arrayIndex++;
                            }
                        }

                    }

                }
                return checkField && checkFieldData;
            }
        } catch (IOException ioException) {
            ioException.printStackTrace();
            return false;
        }
        return true;
    }

    private void clickFourTabsAndGetData(List<String> fieldsList, List<String> fieldsDataList) {
        List<String> tabsList = new ArrayList<>();
        tabsList.add("General");
        tabsList.add("Attributes");
        tabsList.add("Details");
        tabsList.add("Assets");

        for (int i = 0; i < tabsList.size(); i++) {
            commonUtils.click("//p[text()='Products']//parent::div//parent::div//label[text()='" + tabsList.get(i) + "']");
            List<WebElement> fieldsWebElementList = commonUtils.getWebElements(locators.getProperty("fieldsListLoc"));
            List<WebElement> fieldsDataWebElementList = commonUtils.getWebElements(locators.getProperty("fieldsDataListLoc"));
            commonUtils.addWebElementListToStringsList(fieldsList, fieldsWebElementList);
            commonUtils.addWebElementListToStringsList(fieldsDataList, fieldsDataWebElementList);
        }
    }


    public void clickOnBackButton(String products) {
        commonUtils.click("//p[text()='" + products + "']//parent::div//button");
    }


    public boolean verifiesSameFieldsOnExcelFileAndSingleProductDetailPageUI(int sheetNo, String singleProductDetailPageFieldsExcelFile) throws BiffException, IOException {
        boolean flag = true;
        File inputWorkbook = new File("./src/test/resources/data/excelFiles/" + singleProductDetailPageFieldsExcelFile);
        Workbook wb;
        wb = Workbook.getWorkbook(inputWorkbook);

        String subHeader = null, temp = null;
        Sheet sheet = wb.getSheet(sheetNo);

        Cell fieldNameCell;
        for (int j = 0; j < sheet.getColumns(); j++) {
            for (int i = 0; i < sheet.getColumn(j).length - 2; i++) {
                Cell cell = sheet.getCell(j, i);
                if (!cell.getContents().isEmpty() && cell.getContents() != null) {
                    if (cell.getContents().equalsIgnoreCase("*")) {
                        Cell subHeaderCell = sheet.getCell(j, i + 1);
                        subHeader = subHeaderCell.getContents();
                    }

                    fieldNameCell = sheet.getCell(j, i + 2);

                    if (fieldNameCell.getContents().equalsIgnoreCase("*")) {
                        temp = sheet.getCell(j, i + 3).getContents();
                    }

                    if (!(fieldNameCell.getContents().equalsIgnoreCase("*") || fieldNameCell.getContents().equalsIgnoreCase(temp))) {
                        assert subHeader != null;
                        if (subHeader.equalsIgnoreCase("General")) {
                            if (!commonUtils.elementIsDisplayed("(//div[@id='single-spa-application:@commerce-next/client']//div[@width='100%'])[2]//label[text()='General']//ancestor::a//parent::div//parent::div//parent::div//parent::div//following-sibling::div//div[text()='" + fieldNameCell.getContents() + "']")) {
                                flag = false;
                            }
                        } else {
                            if (!commonUtils.elementIsDisplayed("(//div[@id='single-spa-application:@commerce-next/client']//div[@width='100%'])[2]//following-sibling::div//div[text()='" + subHeader + "']//parent::div//div[text()='" + fieldNameCell.getContents() + "']")) {
                                flag = false;
                            }
                        }
                    }
                }
            }

        }
        return flag;
    }

    public String verifiesThatUserIsInPassedPage(int pageNo) {
        commonUtils.moveToElement(locators.getProperty("pageNumberTextBox"));
        commonUtils.waitTillElementIsVisible(locators.getProperty("pageNumberTextBox"), 10);
        return commonUtils.getAttribute(locators.getProperty("pageNumberTextBox"), "value");
    }

    public void opensPassedTabInNewPage(String tabName) {
        WebElement tabWebElement = commonUtils.getWebElement("//label[text()='"+tabName+"']");
        commonUtils.keyPressClickAndKeyRelease(tabWebElement);
        commonUtils.redirectToPassedPage(1);
    }

    public void closesAndRedirectsBackToPreviousTab() {
        commonUtils.closesTheBrowser();
        commonUtils.redirectToPassedPage(0);
    }

    public boolean verifiesStateOfProductPageAttributes(int noOfAttributes, String productPageAttributesExcelFile) throws BiffException, IOException, InterruptedException {
        commonUtils.waits(8);
        boolean checkAttributesIsSelected = true;
        File inputWorkbook = new File("./src/test/resources/data/excelFiles/" + productPageAttributesExcelFile);
        Workbook workbook;
        workbook = Workbook.getWorkbook(inputWorkbook);

        Sheet sheet = workbook.getSheet(0);
        int totalNumberOfColumns = sheet.getColumns();
        for (int columnIndex = 0; columnIndex < totalNumberOfColumns; columnIndex++) {
            for (int rowIndex = 1; rowIndex < noOfAttributes; rowIndex++) {
                Cell cell = sheet.getCell(columnIndex, rowIndex);
                if (!commonUtils.elementIsDisplayed("//div[text()='" + cell.getContents() + "']//parent::div//div[@type='checkbox']//div//div")) {
                    checkAttributesIsSelected = false;
                }
            }
        }
        return checkAttributesIsSelected;
    }
}


package com.adidas.tpAdidasSerenity.fe.pageObjects;

import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import net.thucydides.core.pages.PageObject;
import org.junit.Assert;
import org.openqa.selenium.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Properties;

public class TaxationPageCA extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(TaxationPageCA.class);

    CommonUtils commonUtils = new CommonUtils();
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");

    public void goToTaxationScreen() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("taxRateTab"), 20);
        commonUtils.waitForElementClick(locators.getProperty("taxRateTab"));
    }

    public int verifyAllProvincesWithTaxRates() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("allProvinces"), 15);
        List<WebElement> provincesList = commonUtils.getWebElements(locators.getProperty("allProvinces"));
        return provincesList.size();
    }

    public String seesErrorMessage() {
        String errorMessage = "//label[text()='Find Tax Rates']//ancestor::button//parent::div//parent::div//parent::div//parent::div//div[contains(.,'To')]//div";
        return commonUtils.getText(errorMessage);
    }

    public boolean shouldNotSeeTaxationTabInLeftNavMenu() {
        return commonUtils.elementIsDisplayed("//label[text()='Tax Rates']");
    }

    public boolean checksSumOfDifferentTaxRates() throws InterruptedException {
        commonUtils.waits(3);
        List<WebElement> rowHeaderList = commonUtils.getWebElements("//table//thead//tr//th");
        List<WebElement> rowList = commonUtils.getWebElements("//table//tbody//tr");

        String rowDataList, data;
        String provinceName = null, provinceCode = null, taxName = null;
        double computedSum, valueOfTaxFromUI;
        boolean isSuccess = true;
        for (int row = 1; row <= rowList.size(); row++) {
            int dataIndex = 1;
            computedSum = 0;
            valueOfTaxFromUI = 0;
            for (int column = 0; column < rowHeaderList.size()-5; dataIndex++, column++) {
                rowDataList = "(//table//tbody//tr[row]//td)["+dataIndex+"]";
                data = rowDataList.replace("row", "" + row);

                if (column == 0 || column == 1) {
                    if (column == 0) {
                        provinceName = getDifferentTaxRateColumnData(this.getDriver(), dataIndex, data);
                    } else {
                        provinceCode = getDifferentTaxRateColumnData(this.getDriver(), dataIndex, data);
                    }
                    continue;
                } else {
                    taxName = commonUtils.getText("(//table//thead//tr//th)[dataIndex]".replace("dataIndex", "" + dataIndex));

                    if (taxName.endsWith("ST")) {
                        //small
                        computedSum += Double.parseDouble(checkIfTaxRateIsEmpty(getDifferentTaxRateColumnData(this.getDriver(), dataIndex, data)));
                        if (dataIndex == rowHeaderList.size()) {
                            isSuccess = validateTaxValue(computedSum, valueOfTaxFromUI, isSuccess, provinceCode, provinceName, taxName);
                        }
                    } else {
                        //main headers
                        isSuccess = validateTaxValue(computedSum, valueOfTaxFromUI, isSuccess, provinceCode, provinceName, taxName);
                        computedSum = 0;
                        valueOfTaxFromUI = Double.parseDouble(checkIfTaxRateIsEmpty(getDifferentTaxRateColumnData(this.getDriver(), dataIndex, data)));
                    }
                }

            }

        }

        return isSuccess;
    }

    private static boolean validateTaxValue(double computedSum, double valueOfTaxFromUI, boolean isSuccess, String provinceCode, String provinceName, String taxName) {
        if (computedSum != 0) {
            if (!(computedSum == valueOfTaxFromUI)) {
                isSuccess = false;
                log.error("Not Matches");
                log.error("There is a mismatch in sum of provinceCode " + provinceCode + " under provinceName " + provinceName + " under tax name " + taxName);
            }
        }
        return isSuccess;
    }

    private static String getDifferentTaxRateColumnData(WebDriver driver, int j, String data) {
        return driver.findElement(By.xpath(data.replace("j", "" + j))).getText();
    }

    private static String checkIfTaxRateIsEmpty(String eachTaxRate) {
        if ((eachTaxRate.equals("") && eachTaxRate != null)) {
            eachTaxRate = eachTaxRate.replace("", "0");
        }
        return eachTaxRate;
    }

    public void verifiesProvinceCode(String provinceCode) {
        commonUtils.waitTillElementIsVisible("(//tbody//td)[2]//div[text()='"+provinceCode+"']", 20);
        Assert.assertEquals(provinceCode, commonUtils.getText("(//tbody//td)[2]//div[text()='"+provinceCode+"']"));
    }
}


package com.adidas.tpAdidasSerenity.fe.pageObjects;

import com.adidas.tpAdidasSerenity.fe.utility.CommonUtils;
import com.adidas.tpAdidasSerenity.fe.utility.PropertyFileReader;
import net.thucydides.core.pages.PageObject;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class TaxationPageWE extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(TaxationPageWE.class);

    CommonUtils commonUtils = new CommonUtils();
    Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");

    public void verifiesValidEuCountriesInAlphabeticalOrder() {
        List<String> weCountriesList = new ArrayList<>();

        weCountriesList.add("Austria");
        weCountriesList.add("Belgium");
        weCountriesList.add("Czechia");
        weCountriesList.add("Denmark");
        weCountriesList.add("Finland");
        weCountriesList.add("France");
        weCountriesList.add("Germany");
        weCountriesList.add("Greece");
        weCountriesList.add("Ireland");
        weCountriesList.add("Italy");
        weCountriesList.add("Netherlands");
        weCountriesList.add("Norway");
        weCountriesList.add("Poland");
        weCountriesList.add("Portugal");
        weCountriesList.add("Slovakia");
        weCountriesList.add("Spain");
        weCountriesList.add("Sweden");
        weCountriesList.add("Switzerland");
        weCountriesList.add("United Kingdom");

        commonUtils.checkDataFromUiAndStoredData(weCountriesList, locators.getProperty("weCountryListFromUI"));
    }

    public void selectCountry(String country) {
        commonUtils.click("//div[@overflow]//div[text()='"+country+"']");
    }

    public void verifiesSameCountryAndCountryCode(String country, String countryCode) {
        if(country.equalsIgnoreCase("Czechia"))
        {
            country = "Czech Republic";
            commonUtils.waitTillElementIsVisible("//p[text()='" + country + "']", 15);
            Assert.assertEquals(country.toUpperCase(), commonUtils.getText("//p[text()='" + country + "']"));
        }
        else{
            commonUtils.waitTillElementIsVisible("//p[text()='" + country + "']", 15);
            Assert.assertEquals(country.toUpperCase(), commonUtils.getText("//p[text()='" + country + "']"));
        }
        commonUtils.waitTillElementIsVisible("//p[text()='" + countryCode + "']", 15);
        Assert.assertEquals(countryCode.toUpperCase(), commonUtils.getText("//p[text()='" + countryCode + "']"));
    }


    public String doNotSelectSiteID() {
        commonUtils.waitTillElementIsVisible(locators.getProperty("siteIdInputValue"), 20);
        return commonUtils.getAttribute(locators.getProperty("siteIdInputValue"), "value");
    }

    public void clickOnTaxRatesPageCountry(String country) {
        commonUtils.click("//table//tbody//tr//td//div[text()='"+country+"']");
    }
}


serenityDefinitions

package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.AuditTrailSteps;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import jxl.read.biff.BiffException;
import net.thucydides.core.annotations.Steps;

import java.io.IOException;

public class AuditTrailDefinitions {

    @Steps
    AuditTrailSteps auditTrailSteps;

    @When("User go to Audit Trail page")
    public void userGoToAuditTrailPage() throws IOException, InterruptedException {
        auditTrailSteps.userGoToAuditTrailPage();
    }

    @Then("User should see audit trail on the left side of menu")
    public void userShouldSeeAuditTrailOnLeftSideMenu() {
        auditTrailSteps.userShouldSeeAuditTrailOnLeftSideMenu();
    }

    @Then("User should see audit trail on the top left side of the page")
    public void userShouldSeeAuditTrailOnTopLeftInPage() {
        auditTrailSteps.userShouldSeeAuditTrailOnTopLeftInPage();
    }


    @Given("User clicks on downward arrow")
    public void userClicksOnDownwardArrow() {
        auditTrailSteps.userClicksOnDownwardArrow();
    }

    @Then("Details section expanded")
    public void userShouldSeeDetailsSectionExpanded() {
        auditTrailSteps.userShouldSeeDetailsSectionExpanded();
    }

    @Then("User clicks on upwards arrow")
    public void userClicksOnUpwardArrow() {
        auditTrailSteps.userClicksOnUpwardArrow();
    }

    @Then("Details section is collapsed")
    public void userShouldSeeDetailsSectionCollapsed() {
        auditTrailSteps.userShouldSeeDetailsSectionCollapsed();
    }


    @When("User enters {string} in the {int} search box")
    public void userEntersTextInField(String text, Integer num) {
        auditTrailSteps.userEntersTextInField(text, num);
    }


    @When("User clicks on search button of {int} search box")
    public void userClicksOnSearchButton(Integer num) {
        auditTrailSteps.userClicksOnSearchButton(num);
    }

    @Then("User should be displayed with available search results of {string}- {string}")
    public void userDisplayedWithSearchedFieldRecords(String field, String text) {
        auditTrailSteps.userDisplayedWithSearchedFieldRecords(field, text);
    }


    @When("User enters partial {string} in the {int} search box")
    public void userEntersPartialTextInField(String partialText, Integer num) {
        auditTrailSteps.userEntersPartialTextInField(partialText, num);
    }

    @Then("User should be displayed with available search results of partial {string}- {string}")
    public void userDisplayedWithPartialSearchedFieldRecords(String field, String text) {
        auditTrailSteps.userDisplayedWithPartialSearchedFieldRecords(field, text);
    }


    @When("User clicks on cancel button of {int} search box")
    public void userClicksOnCancelButtonOfSearchTextBox(Integer num) {
        auditTrailSteps.userClicksOnCancelButtonOfSearchTextBox(num);
    }

    @Then("Text entered should be removed from search box {int}")
    public void textRemovedFromTextBox(Integer num) {
        auditTrailSteps.textRemovedFromTextBox(num);
    }

    @Then("user should be displayed with message {string}")
    public void userShouldBeDisplayedWithErrorMessage(String expectedErrorMsg) {
        auditTrailSteps.userShouldBeDisplayedWithErrorMessage(expectedErrorMsg);
    }


    @Then("User should able to see {string} in {int} row of {string} column")
    public void userShouldSeePassedDataInPassedColumn(String triggeredData, int rowNo, String columnName) {
        auditTrailSteps.userVerifiesTriggeredDataInAuditTrailColumn(triggeredData, columnName, rowNo);
    }

    @Then("User should able to see {string} or {string} in {int} row of {string} column")
    public void userShouldSeeCorrectStatusInPassedColumn(String expectedSuccess, String expectedFailed, int rowNo, String columnName) {
        auditTrailSteps.userVerifiesCorrectStatusInAuditTrailColumn(expectedSuccess, expectedFailed, rowNo, columnName);
    }


    @And("User should able to see blank in {int} row of {string} column")
    public void userShouldSeeBlankInPassedColumn(int rowNo, String columnName) {
        auditTrailSteps.userShouldSeeBlankInPassedColumn(rowNo, columnName);
    }


    @Then("User see {string}, {string}, {string}, {string}, {string}, {string} passed actions in action dropdown")
    public void userSeePassedActionsInActionDropdown(String createAllowItemAction, String createBlockItemAction, String editAllowItemAction, String editBlockItemAction, String deleteAllowItemAction, String deleteBlockItemAction) {
        auditTrailSteps.userSeePassedActionsInActionDropdown(createAllowItemAction, createBlockItemAction, editAllowItemAction, editBlockItemAction, deleteAllowItemAction, deleteBlockItemAction);
    }

    @When("User click on Audit Trail Filter")
    public void userClickOnAuditTrailFilter() {
        auditTrailSteps.userClickOnAuditTrailFilter();
    }


    @When("User select {string} in {string} dropdown")
    public void userSelectPassedAttributeNameInPassedField(String passedAttributeName, String string2) {
        auditTrailSteps.userSelectPassedAttributeNameInPassedField(passedAttributeName);
    }

    @Then("User should see the audit trail records of {string} in {string} field")
    public void userShouldSeePassedAuditTrailRecordsAction(String actionName, String fieldname) throws InterruptedException {
        auditTrailSteps.userShouldSeePassedAuditTrailRecordsAction(actionName, fieldname);
    }

    @And("User enters {string} in Domain search box")
    public void userEntersInDomainSearchBox(String text) {
        auditTrailSteps.userEntersTextInSearchBox(text);
    }

    @And("User clicks on search button of Domain search box")
    public void userClicksOnSearchButtonOfDomainSearchBox() throws InterruptedException {
        auditTrailSteps.userClicksOnSearchButtonOfDomainSearchBox();
    }

    @And("User enters {string} in Actions search box")
    public void userEntersInActionsSearchBox(String text) {
        auditTrailSteps.userEntersTextInActionsSearchBox(text);
    }

    @And("User clicks on search button of Actions search box")
    public void userClicksOnSearchButtonOfActionsSearchBox() throws InterruptedException {
        auditTrailSteps.userClicksOnSearchButtonOfActionsSearchBox();
    }


    @Then("User should see {string} in {string} dropdown")
    public void userShouldSeePassedAttributeNameInPassedFieldDropdown(String passedAttributeName, String string2) {
        auditTrailSteps.userShouldSeePassedAttributeNameInPassedFieldDropdown(passedAttributeName);
    }

    @When("User select {string}, {string}, {string}, {string}, {string}, {string} action")
    public void userSelectActions(String createAllowItemAction, String createBlockItemAction, String editAllowItemAction, String editBlockItemAction, String deleteAllowItemAction, String deleteBlockItemAction) {
        auditTrailSteps.userSelectActions(createAllowItemAction, createBlockItemAction, editAllowItemAction, editBlockItemAction, deleteAllowItemAction, deleteBlockItemAction);
    }

    @Then("User should see the audit trail records of Create allow item, Create block item, Edit allow item, Edit block item, Delete allow item, Delete block item actions only")
    public void userShouldSeeTheAuditTrailRecordsWithDesiredValues() {
        auditTrailSteps.userShouldSeeTheAuditTrailRecordsWithDesiredValues();
    }


    @Then("User should not see searched string from {string} in VIEW search box")
    public void userShouldNotSeeSearchedStringInViewSearchBox(String BasketAdminLandingPageColumnsCsvFile) {
        auditTrailSteps.userShouldNotSeeSearchedStringInViewSearchBox(BasketAdminLandingPageColumnsCsvFile);
    }

    @Then("User should see searched string from {string} in VIEW search box dynamically")
    public void userShouldSeeSearchedStringDynamically(String BasketAdminColumnsCsvFile) {
        auditTrailSteps.userShouldSeeSearchedStringDynamically(BasketAdminColumnsCsvFile);
    }

    @Then("User should able to see {string} and selected attributes {string} in {int} row of {string} column")
    public void userShouldSeeProductIdAndSelectedAttributesInDetailsColumn(String productId, String passedAttributeExcelFile,int rowNo, String detailsColumn) throws BiffException, IOException {
        auditTrailSteps.userShouldSeeProductIdAndSelectedAttributesInDetailsColumn(productId, passedAttributeExcelFile, rowNo, detailsColumn);
    }

    @When("User enter {string} in {int} search box")
    public void userEnterPassedTextInField(String passedText, int fieldNo) {
        auditTrailSteps.userEnterPassedTextInField(passedText, fieldNo);
    }

    @When("User select {string} status")
    public void userSelectsPassedStatus(String status) {
        auditTrailSteps.userSelectsPassedStatus(status);
    }

    @Then("User should see Domain and Action filter values set to All")
    public void userShouldSeeDomainAndActionFilterValueSetToAll() {
        auditTrailSteps.userShouldSeeDomainAndActionFilterValueSetToAll();
    }

    @Then("User should see Action Status deselected")
    public void userShouldSeeActionStatusDeselected() {
        auditTrailSteps.userShouldSeeActionStatusDeselected();
    }

    @Then("User should see Date Range reset and displayed as blank")
    public void userShouldSeeDateRangeResetAndDisplayedBlank() {
        auditTrailSteps.userShouldSeeDateRangeResetAndDisplayedBlank();
    }

    @Then("User should see aggregated {string} status count & pagination count is same")
    public void userShouldSeeAggregatedStatusCountIsSameAsPaginationCount(String status) {
        auditTrailSteps.userShouldSeeAggregatedStatusCountIsSameAsPaginationCount(status);
    }

    @When("User click on {int} row chevron")
    public void userClicksOnPassedRowChevron(int rowNo) {
        auditTrailSteps.userClicksOnPassedRowChevron(rowNo);
    }

    @Then("User should be able to see email, domain, area, actions, details and status of Json response as per the {int} trigger")
    public void userShouldSeePassedColumnJsonResponseDataAsPerThePassedRowTrigger(int rowNo) {
        auditTrailSteps.userShouldSeePassedColumnJsonResponseDataAsPerThePassedRowTrigger(rowNo);
    }

    @Then("User should see {string} in the dropdown")
    public void userShouldSeePassedFilterDataInDropdown(String string, DataTable filterDataList) {
        auditTrailSteps.userShouldSeePassedFilterDataInDropdown(filterDataList);
    }


    @Then("User verifies {string} or {string} Audit Trail filter records on {string} field of Audit Trail Page")
    public void userVerifiesSelectedAuditTrailFilterDropdownValueOnAuditTrailTable(String dropdownValueOne, String dropdownValueTwo, String dropdownField) {
        auditTrailSteps.userVerifiesSelectedAuditTrailFilterDropdownValueOnAuditTrailTable(dropdownValueOne, dropdownValueTwo, dropdownField);
    }

    @Then("User verifies {string} is displayed under {string} field of Json response")
    public void userVerifiesTriggeredDataInAuditTrailJsonResponse(String triggeredData, String auditTrailJsonResponseField) {
        auditTrailSteps.userVerifiesTriggeredDataInAuditTrailJsonResponse(triggeredData, auditTrailJsonResponseField);
    }


    @When("User verifies {string} in {int} row of {string} column")
    public void userVerifiesTriggeredDataInAuditTrailColumn(String triggeredData, int rowNo, String columnName) {
        auditTrailSteps.userVerifiesTriggeredDataInAuditTrailColumn(triggeredData, columnName, rowNo);
    }

    @When("User verifies {string} or {string} in {int} row of {string} column")
    public void userVerifiesCorrectStatusInAuditTrailColumn(String expectedSuccess, String expectedFailed, int rowNo, String columnName) {
        auditTrailSteps.userVerifiesCorrectStatusInAuditTrailColumn(expectedSuccess, expectedFailed, rowNo, columnName);
    }
}

package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.BasketAdminStepsCA;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import net.thucydides.core.annotations.Steps;

import java.io.IOException;

public class BasketAdminDefinitionsCA {

    @Steps
    BasketAdminStepsCA basketAdminStepsCA;


    @When("User go to basket admin page")
    public void userGoToBasketAdminPage() throws Exception {
        basketAdminStepsCA.userGoToBasketAdminPage();
    }

    @Given("User is present on Basket admin landing page")
    public void userIsInBasketAdminPage() {
        basketAdminStepsCA.userIsInBasketAdminPage();
    }

    @When("User has clicked filter icon")
    public void userClicksOnFilter() throws Exception {
        basketAdminStepsCA.userClicksOnFilter();
    }


    @And("User selects {string} from VIEW dropdown")
    public void userSelectsColumnFromViewDropdown(String columnFromViewDropdown) throws Exception {
        basketAdminStepsCA.userSelectsColumnFromViewDropdown(columnFromViewDropdown);
    }

    @Then("User is displayed with filter window")
    public void userShouldSeeFilterWindow() throws Exception {
        basketAdminStepsCA.userShouldSeeFilterWindow();
    }

    @Given("user selects page size ten and observes next arrow")
    public void userObservesNextArrow() {
        basketAdminStepsCA.userObservesNextArrow();
    }

    @Then("user should see next arrow enabled")
    public void userShouldSeeNextArrowEnabled() throws Exception {
        basketAdminStepsCA.userShouldSeeNextArrowEnabled();
    }

    @Then("user clicks on next arrow")
    public void userClicksOnNextArrow() throws Exception {
        basketAdminStepsCA.userClicksOnNextArrow();
    }

    @Then("user should see next page")
    public void userShouldSeeNextPage() throws Exception {
        basketAdminStepsCA.userShouldSeeNextPage();
    }

    @Given("user selects page size ten")
    public void userSelectsPageSizeTen() {
        basketAdminStepsCA.userSelectsPageSizeTen();
    }

    @Given("enters {int} in text box and observes previous arrow")
    public void userEntersTwoInTextBox(Integer number) throws Exception {
        basketAdminStepsCA.userEntersTwoInTextBox(number);
    }

    @Then("user should see previous arrow enabled")
    public void userShouldSeePreviousArrowEnabled() throws Exception {
        basketAdminStepsCA.userShouldSeePreviousArrowEnabled();
    }

    @Then("user clicks on previous arrow")
    public void userClicksOnPreviousArrow() throws Exception {
        basketAdminStepsCA.userClicksOnPreviousArrow();
    }

    @Then("user should see previous page")
    public void userShouldSeePreviousPage() throws Exception {
        basketAdminStepsCA.userShouldSeePreviousPage();
    }

    @Given("user clicks on dropdown")
    public void userClicksOnDropdown() throws Exception {
        basketAdminStepsCA.userClicksOnDropdown();
    }

    @Given("user selects {int} from the dropdown")
    public void userSelectsPageNumFromDropDown(Integer int1) throws Exception {
        basketAdminStepsCA.userSelectsPageNumFromDropDown(int1);
    }

    @Then("user should see less than or equal to {int} records per page and {int} in results per size dropdown")
    public void userShouldSeeSelectedPageSizeInDropdown(Integer int1, Integer int2) {
        basketAdminStepsCA.userShouldSeeSelectedPageSizeInDropdown(int1);
    }

    @Then("User verifies less than or equal to {int} records per page isDisplayed")
    public void userVerifiesRecordsLessThanOrEqualToRecordsPerPageIsDisplayed(int noOfRecords) {
        basketAdminStepsCA.userVerifiesRecordsLessThanOrEqualToRecordsPerPageIsDisplayed(noOfRecords);
    }

    @Then("User verifies {int} in results per size dropdown isDisplayed")
    public void userVerifiesRecordsInPaginationDropdownIsDisplayed(Integer noOfRecords) {
        basketAdminStepsCA.userVerifiesRecordsInPaginationDropdownIsDisplayed(noOfRecords);
    }

    @Then("user should see default criteria {string} channel id and export status {string}")
    public void userShouldSeeDefaultChannelAndExportStatus(String defaultChannel, String defaultExportStatus) {
        basketAdminStepsCA.userShouldSeeDefaultChannelAndExportStatus(defaultChannel, defaultExportStatus);
    }


    @Then("User should able to view CHANNEL ID as {string}")
    public void userShouldSeeChannelIdAs(String channelId) {
        basketAdminStepsCA.userShouldSeeChannelIdAs(channelId);
    }

    @Then("User should able to view MARKET as {string}")
    public void userVerifiesMarketAs(String market) {
        basketAdminStepsCA.userVerifiesMarketAs(market);
    }

    @Then("User should able to view EXPORT STATUS as {string}")
    public void userShouldViewExportStatusAs(String exportStatus) {
        basketAdminStepsCA.userShouldViewExportStatusAs(exportStatus);
    }

    @When("User clicks on View button")
    public void userClicksOnViewButton() throws Exception {
        basketAdminStepsCA.userClicksOnViewButton();
    }

    @Then("User is on BASKET JSON pop up")
    public void userIsOnBasketJsonPopup() throws Exception {
        basketAdminStepsCA.userIsOnBasketJsonPopup();
    }

    @When("User clicks on close button of BASKET JSON pop up")
    public void userClicksOnCloseButtonOfBasketJsonPopup() {
        basketAdminStepsCA.userClicksOnCloseButtonOfBasketJsonPopup();
    }

    @Then("BASKET LIST page is visible")
    public void userShouldSeeBasketListPage() throws Exception {
        basketAdminStepsCA.userShouldSeeBasketListPage();
    }

    @When("User select EXPORT STATUS is {string}")
    public void userSelectExportStatus(String exportStatus) {
        basketAdminStepsCA.userSelectExportStatus(exportStatus);
    }

    @Then("User clicks on apply button")
    public void userClicksOnApplyButton() throws Exception {
        basketAdminStepsCA.userClicksOnApplyButton();
    }

    @Then("User on Basket List Page should see all baskets related to {string} export status")
    public void userShouldSeeSelectedExportStatus(String exportStatus) {
        basketAdminStepsCA.userShouldSeeSelectedExportStatus(exportStatus);
    }

    @When("User clicks on basket ID search box")
    public void userClicksOnBasketIdSearchBox() throws Exception {
        basketAdminStepsCA.userClicksOnBasketIdSearchBox();
    }

    @When("User enters basket ID")
    public void userEntersBasketId() throws Exception {
        basketAdminStepsCA.userEntersBasketId();
    }

    @When("User clicks on search button of basket Id")
    public void userClicksOnSearchButtonOfBasketId() throws Exception {
        basketAdminStepsCA.userClicksOnSearchButtonOfBasketId();
    }

    @Then("User can see respective record with searched basket ID")
    public void userCanSeeRespectiveSearchedBasketId() throws Exception, AssertionError {
        basketAdminStepsCA.userCanSeeRespectiveSearchedBasketId();
    }

    @When("user clicks on Order ID search box")
    public void userClicksOnOrderIdSearchBox() throws Exception {
        basketAdminStepsCA.userClicksOnOrderIdSearchBox();
    }

    @When("user enters Order ID")
    public void userEntersOrderId() throws Exception {
        basketAdminStepsCA.userEntersOrderId();
    }

    @When("user clicks on search button of Order Id")
    public void userClicksOnSearchButtonOfOrderId() throws Exception {
        basketAdminStepsCA.userClicksOnSearchButtonOfOrderId();
    }

    @Then("user can see respective record with searched Order ID")
    public void userCanSeeRespectiveSearchedOrderId() throws Exception, AssertionError {
        basketAdminStepsCA.userCanSeeRespectiveSearchedOrderId();
    }

    @When("user clicks on Customer ID search box")
    public void userClicksOnCustomerIdSearchBox() throws Exception {
        basketAdminStepsCA.userClicksOnCustomerIdSearchBox();
    }

    @When("user enters Customer ID")
    public void userEntersCustomerId() throws Exception {
        basketAdminStepsCA.userEntersCustomerId();
    }

    @When("user clicks on search button of CustomerId")
    public void userClicksOnSearchButtonOfCustomerId() throws Exception {
        basketAdminStepsCA.userClicksOnSearchButtonOfCustomerId();
    }

    @Then("user can see respective record with searched Customer ID")
    public void userCanSeeRespectiveSearchedCustomerId() throws Exception, AssertionError {
        basketAdminStepsCA.userCanSeeRespectiveSearchedCustomerId();
    }

    @When("user enters incomplete Order ID")
    public void userEntersIncompleteOrderId() {
        basketAdminStepsCA.userEntersIncompleteOrderId();
    }


    @Then("user can see a message {string} in a popup window")
    public void userCanSeeRespectiveErrorMessageInAPopup(String errorMessage) {
        basketAdminStepsCA.userCanSeeRespectiveErrorMessageInAPopup(errorMessage);
    }

    @Then("user should see default criteria {string} channel id {string} site id and export status {string}")
    public void userShouldSeeDefaultCriteria(String channelId, String siteId, String exportStatus) {
        basketAdminStepsCA.userShouldSeeDefaultCriteria(channelId, siteId, exportStatus);
    }




    @Given("user clicks on last sync button")
    public void userClicksOnLastSyncButton() {
        basketAdminStepsCA.userClicksOnLastSyncButton();
    }

    @Then("user should see last Sync time displayed with {int} minutes ago")
    public void userShouldSeeLastSyncTime(int minute) {
        basketAdminStepsCA.userShouldSeeLastSyncTime(minute);
    }

    //Anurag
    @When("User select filters")
    public void userSelectFilters() throws IOException, InterruptedException {
        basketAdminStepsCA.userSelectFilters();
    }

    @Then("User displayed with default filters channel id as hyper platform, export status as export failed")
    public void userSeeDefaultChannelSiteExportStatus() throws IOException {
        basketAdminStepsCA.userSeeDefaultChannelSiteExportStatus();
    }

    @When("User click on close icon")
    public void userClicksFilterWindowCloseicon() throws IOException {
        basketAdminStepsCA.userClicksFilterWindowCloseicon();
    }


    @When("user selects a single basket")
    public void userSelectFirstCheckBox() throws Exception {
        basketAdminStepsCA.userSelectFirstCheckBox();
    }

    @Then("user can see RE-EXPORT button in enabled state")
    public void userChecksReExportButtonState() throws IOException {
        basketAdminStepsCA.userChecksReExportButtonState();
    }


    @When("user deselects a single basket which is already selected")
    public void userDeselectCheckbox() throws Exception {
        basketAdminStepsCA.userDeselectCheckbox();
    }

    @Then("user can see RE-EXPORT button in disabled state")
    public void userCheckReExportButtonState() throws IOException {
        basketAdminStepsCA.userChecksReExportButtonState();
    }


    @When("user selects single Basket record with {string} status")
    public void userSelectsBasketWithPassedStatus(String string) {
        basketAdminStepsCA.userSelectsBasketWithPassedStatus();
    }

    @When("user click on the re-export CTA")
    public void userClicksOnReExportButton() {
        basketAdminStepsCA.userClicksOnReExportButton();
    }

    @Then("user is able to see respective success message in a popup window")
    public void userIsAbleToSeeSuccessMessageInAPopup() throws InterruptedException {
        basketAdminStepsCA.userIsAbleToSeeSuccessMessageInAPopup();
    }


    @When("User select more than {int} basket")
    public void userSelectsMoreThanOneBasket(Integer int1) {
        int noOfBaskets = 2;
        basketAdminStepsCA.userSelectsMoreThanOneBasket(noOfBaskets);
    }

    @And("user click on Re-export button")
    public void userClickOnReExportButton() {
        basketAdminStepsCA.userClicksOnTheReExportButton();
    }

    @Then("User should be displayed with BATCH RE-EXPORT RESULTS popup")
    public void userShouldBeDisplayedWithBatchReExportPopup() {
        basketAdminStepsCA.userShouldBeDisplayedWithBatchReExportPopup();
    }

    @Then("User should able to see correct Basket ID Order No Customer ID Channel SITEID in the popup")
    public void userShouldSeeCorrectHeadrsInPopup() {
        basketAdminStepsCA.userShouldSeeCorrectHeadrsInPopup();
    }

    @Then("User clicks on download icon")
    public void userClicksOnDownloadIcon() throws InterruptedException {
        basketAdminStepsCA.userClicksOnDownloadIcon();
    }


    @Then("User should be able to download {string} file successfully")
    public void userShouldBeAbleTODownloadCsvFile(String fileName) throws IOException, InterruptedException {
        basketAdminStepsCA.userShouldBeAbleTODownloadCsvFile(fileName);
    }

    @Then("User click on close icon of BATCH RE-EXPORT RESULTS popup")
    public void userClicksOnCloseIconOfBatchReExportPopup() {
        basketAdminStepsCA.userClicksOnCloseIconOfBatchReExportPopup();
    }

    @Then("User should able to close the popup successfully")
    public void userShouldBeAbleToClosePopup() throws Exception {
        basketAdminStepsCA.userShouldBeAbleToClosePopup();
    }


    @Then("User should able to see correct Header details and count of successful and unsuccessful baskets in a {string} csv file")
    public void userShouldSeeCorrectHeaderDetailsAndCountOfBasketsInCsvFile(String fileName) {
        basketAdminStepsCA.userShouldSeeCorrectHeaderDetailsAndCountOfBasketsInCsvFile(fileName);
    }


    @When("Do not select the Don't show this message again checkbox")
    public void userDoNotSelectOverridePopupCheckbox() throws IOException {
        basketAdminStepsCA.userDoNotSelectOverridePopupCheckbox();
    }

    @Then("User should be displayed with Override Basket Selection Popup")
    public void userOnOverRidePopup() throws IOException {
        basketAdminStepsCA.userOnOverRidePopup();
    }

    @And("Click on Yes button")
    public void userClicksonYesButton() throws IOException {
        basketAdminStepsCA.userClicksonYesButton();
    }

    @When("User select some basket where Export Status = Export Failed")
    public void userSelectsFirstCheckBox() throws Exception {
        basketAdminStepsCA.userSelectFirstCheckBox();
    }

    @Then("Popup should be closed")
    public void userSeeOverrideBasketPopupClosed() throws IOException {
        basketAdminStepsCA.userSeeOverrideBasketPopupClosed();
    }


    @Given("User on Override Basket Selection popup")
    public void userOnOverrideBasketPopup() throws Exception {
        basketAdminStepsCA.userOnOverrideBasketPopup();
    }

    @When("User click on CANCEL button")
    public void userClickOverridePopupCancelButton() throws Exception {
        basketAdminStepsCA.userClickOverridePopupCancelButton();
    }


    @Then("User should able to close the popup")
    public void userShouldAbleToCloseThePopup() throws IOException {
        basketAdminStepsCA.userClosesOverrideBasketPopup();
    }


    @Then("Selected Basket checkbox should not be removed")
    public void userSelectedCheckBoxNotRemoved() throws Exception {
        basketAdminStepsCA.userSelectedCheckBoxNotRemoved();
    }


    @When("Click on PAGINATION or VIEW or LAST SYNC or FILTER")
    public void userClickOnViewButton() throws Exception {
        basketAdminStepsCA.userClicksOnViewButton();
    }

    @Then("User should not be displayed with Override Basket Selection Popup")
    public void userOnLandingPage() throws IOException {
        basketAdminStepsCA.userOnlandingPage();
    }

    @When("user deselects multiple basket which is already selected")
    public void userDeSelectMultipleBasket() {
        int noOfBaskets = 2;
        basketAdminStepsCA.userdeselectMultipleBasket(noOfBaskets);
    }

    @When("user select checkbox in header column")
    public void userSelectAllCheckboxInHeader() throws IOException, InterruptedException {
        basketAdminStepsCA.userSelectAllCheckboxInHeader();
    }

    @When("user deselect checkbox in header column of BasketList")
    public void userDeselectAllCheckboxInHeader() throws IOException, InterruptedException {
        basketAdminStepsCA.userDeselectAllCheckboxInHeader();
    }


    @Given("user select {int} basket")
    public void userSelectMoreThanOneBasket(Integer count) {
        basketAdminStepsCA.userSelectsMoreThanOneBasket(count);
    }

    @Then("User should see the correct {int} basket selected")
    public void userShouldSeeCorrectBasketCountInFooter(Integer countInFooter) {
        basketAdminStepsCA.userShouldSeeCorrectBasketCountInFooter(countInFooter);
    }

    @Then("User redirected to desired page")
    public void userRedirectedToDesiredPage() throws Exception {
        basketAdminStepsCA.userRedirectedToDesiredPage();
    }


    @Then("User should see Header Text as {string}")
    public void userShouldSeeOverrideBasketHeader(String overrideBasketHeader) {
        basketAdminStepsCA.userShouldSeeOverrideBasketHeader(overrideBasketHeader);
    }

    @Then("User should see message as {string}")
    public void userShouldSeeOverrideBasketMessage(String overrideBasketMessage) {
        basketAdminStepsCA.userShouldSeeOverrideBasketMessage(overrideBasketMessage);
    }

    @Then("User should see checkbox with text as {string}")
    public void userShouldSeeCheckBoxWithText(String checkBoxMessage) {
        basketAdminStepsCA.userShouldSeeCheckBoxWithText(checkBoxMessage);
    }

    @Then("User should see the CANCEL button")
    public void userShouldSeeCancelButton() {
        basketAdminStepsCA.userShouldSeeCancelButton();
    }

    @Then("User should see the YES button")
    public void userShouldSeeYesButton() {
        basketAdminStepsCA.userShouldSeeYesButton();
    }

    @When("User Closes the browser")
    public void userClosesTheBrowser() {
        basketAdminStepsCA.userClosesTheBrowser();
    }

    @When("Re-launch the browser")
    public void userRelaunchesTheBrowser() {
        basketAdminStepsCA.userRelaunchesTheBrowser();
    }


    @When("Click on Next Page arrow OR Previous page arrow or Enter Page no in Input field")
    public void userClicksOnNextOrPreviousArrowOrEntersPageNo() throws Exception {
        basketAdminStepsCA.userClicksOnNextOrPreviousArrowOrEntersPageNo();
    }


    @Then("user searches with basketId or orderId or customerId in search textbox")
    public void userSearchesWithBasketOrOrderOrCustomerId() throws Exception {
        basketAdminStepsCA.userSearchesWithBasketOrOrderOrCustomerId();
    }

    @Then("user can see unique record")
    public void userSeesUniqueRecords() {
        basketAdminStepsCA.userSeesUniqueRecords();
    }

    @Then("user is not able to see duplicate Order Id record")
    public void userShouldNotSeeDupliactOrderIdRecords() throws Exception, AssertionError {
        basketAdminStepsCA.userShouldNotSeeDupliactOrderIdRecords();
    }

    @Then("user is not able to see duplicate basket Id record")
    public void userShouldNotSeeDupliactBasketIdRecords() throws Exception, AssertionError {
        basketAdminStepsCA.userShouldNotSeeDupliactBasketIdRecords();
    }


    @Then("User should see the {int} basket selected")
    public void userShouldSeeZeroBasketsSelected(Integer basketsSelected) {
        basketAdminStepsCA.userShouldSeeZeroBasketsSelected(basketsSelected);
    }

    @Then("User should not able to select basket where EXPORT STATUS is {string}")
    public void userShouldNotAbleToSelectExportStatus(String exportStatus) {
        basketAdminStepsCA.userShouldNotAbleToSelectExportStatus();
    }

    @Given("By default {string} records is in descending order based on {string} column")
    public void byDefaultBasketsInDescendingOrder(String moduleName, String columnName) throws InterruptedException {
        basketAdminStepsCA.byDefaultBasketsInDescendingOrder(moduleName, columnName);
    }

    @When("User change the preference from descending to Ascending on clicking of {string} column")
    public void userChangePreferenceFromDescToAsc(String columnName) {
        basketAdminStepsCA.userChangePreferenceFromDescToAsc(columnName);
    }

    @Then("User should see sorting preference changed successfully from descending to Ascending after sorting on {string} column")
    public void userSeesBasketListInAscOrder(String columnName) {
        basketAdminStepsCA.userSeesBasketListInAscOrder(columnName);
    }

    @When("User again change the preference from Ascending to Descending on clicking of {string} column")
    public void userChangePreferenceFromAscToDesc(String columnName) {
        basketAdminStepsCA.userChangePreferenceFromAscToDesc(columnName);
    }

    @Then("User should see sorting preference changed successfully from Ascending to Descending after sorting on {string} column")
    public void userSeesBasketListInDescOrder(String columnName) throws InterruptedException {
        basketAdminStepsCA.userSeesBasketListInDescOrder(columnName);
    }

    @Given("User is on Basket Admin Page in Canada Region")
    public void userOnBasketAdminPageInCanadaRegion() throws Exception {
        basketAdminStepsCA.userOnBasketAdminPageInCanadaRegion();
    }

    @When("User change the region from Canada to USA")
    public void userChangesRegionFromCanadaToUsa() {
        basketAdminStepsCA.userChangesRegionFromCanadaToUsa();
    }

    @Then("User should be displayed with {string} error popup")
    public void userIsDisplayedWithErrorPopup(String expectedErrorMessage) {
        basketAdminStepsCA.userIsDisplayedWithErrorPopup(expectedErrorMessage);
    }

    @When("User close the popup of error message")
    public void userClosesErrorPopup() {
        basketAdminStepsCA.userClosesErrorPopup();
    }

    @Then("User not able to see the Basket Admin tab in left side navigation menu")
    public void userShouldNotSeeBasketAdminTabInLeftNavMenu() {
        basketAdminStepsCA.userShouldNotSeeBasketAdminTabInLeftNavMenu();
    }

    @Then("User should be able to see download button on the top right corner of basket admin page")
    public void userShouldSeeDownloadButtonAtTop() throws InterruptedException {
        basketAdminStepsCA.userShouldSeeDownloadButtonAtTop();
    }

    @When("User click on download button on the top right corner of {string} page")
    public void user_click_on_download_button_on_the_top_right_corner_of_page(String string) throws InterruptedException {
        basketAdminStepsCA.userClicksOnDownloadButtonOnTop();
    }

    @Then("User validates records count on downloaded {string} is same as in {string} UI")
    public void userCheckNoOfRecordsInDownloadedFileSameAsUI(String fileName, String string2) throws IOException {
        basketAdminStepsCA.userCheckNoOfRecordsInDownloadedFileSameAsUI(fileName);
    }


    //Basket Admin definitions for "selecting override basket popup checkbox"
    @Given("User on Override Basket Selection popup\\(Override popup checkbox selected)")
    public void userOnOverrideBasketPopup_checkboxSelected() {
        basketAdminStepsCA.userOnOverrideBasketPopup_checkboxSelected();
    }

    @When("User Select Don't show this message again checkbox\\(Override popup checkbox selected)")
    public void userSelectsOverridePopupCheckbox_checkboxSelected() {
        basketAdminStepsCA.userSelectsOverridePopupCheckbox_checkboxSelected();
    }

    @When("User click on CANCEL button\\(Override popup checkbox selected)")
    public void userClickOverridePopupCancelButton_checkboxSelected() throws Exception {
        basketAdminStepsCA.userClickOverridePopupCancelButton_checkboxSelected();
    }

    @Then("User should able to close the popup\\(Override popup checkbox selected)")
    public void userShouldBeOnLandingPage_checkboxSelected() {
        basketAdminStepsCA.userShouldBeOnLandingPage_checkboxSelected();
    }

    @Then("Selected Basket checkbox should not be removed\\(Override popup checkbox selected)")
    public void userSelectedCheckBoxNotRemoved_checkboxSelected() {
        basketAdminStepsCA.userSelectedCheckBoxNotRemoved_checkboxSelected();
    }

    @Then("Click on PAGINATION or VIEW or LAST SYNC or FILTER\\(Override popup checkbox selected)")
    public void userClicksOnTheViewButton_checkboxSelected() {
        basketAdminStepsCA.userClicksOnViewButton_checkboxSelected();
    }

    @Then("User should not be displayed with Override Basket Selection Popup\\(Override popup checkbox selected)")
    public void userShouldBeOnTheLandingPage_checkboxSelected() {
        basketAdminStepsCA.userShouldBeOnLandingPage_checkboxSelected();
    }


    @When("Click on Yes button\\(Override popup checkbox selected)")
    public void userClicksonYesButton_checkboxSelected() throws Exception {
        basketAdminStepsCA.userClicksonYesButton_checkboxSelected();
    }

    @When("User select some basket where Export Status = Export Failed\\(Override popup checkbox selected)")
    public void userSelectFirstCheckBox_checkboxSelected() {
        basketAdminStepsCA.userSelectFirstCheckBox_checkboxSelected();
    }

    @When("user clicks on dropdown\\(Override popup checkbox selected)")
    public void userClicksOnDropdown_checkboxSelected() {
        basketAdminStepsCA.userClicksOnDropdown_checkboxSelected();
    }

    @When("user selects {int} from the dropdown\\(Override popup checkbox selected)")
    public void userSelectsPageNumFromDropDown_checkboxSelected(Integer int1) {
        basketAdminStepsCA.userSelectsPageNumFromDropDown_checkboxSelected(int1);
    }


    @Then("User clicks on View button\\(Override popup checkbox selected)")
    public void userClicksOnViewButton_checkboxSelected() {
        basketAdminStepsCA.userClicksOnViewButton_checkboxSelected();
    }

    @Then("User is on BASKET JSON pop up\\(Override popup checkbox selected)")
    public void userIsOnBasketJsonPopup_checkboxSelected() {
        basketAdminStepsCA.userIsOnBasketJsonPopup_checkboxSelected();
    }

    @Then("User has clicked filter icon\\(Override popup checkbox selected)")
    public void userClicksOnFilter_checkboxSelected() {
        basketAdminStepsCA.userClicksOnFilter_checkboxSelected();
    }

    @Then("User is displayed with filter window\\(Override popup checkbox selected)")
    public void userShouldSeeFilterWindow_checkboxSelected() {
        basketAdminStepsCA.userShouldSeeFilterWindow_checkboxSelected();
    }


    @When("User selects {string} from VIEW dropdown\\(Override popup checkbox selected)")
    public void userSelectsColumnFromViewDropdown_checkboxSelected(String columnFromViewDropdown) {
        basketAdminStepsCA.userSelectsColumnFromViewDropdown_checkboxSelected(columnFromViewDropdown);
    }

    @When("User clicks on apply button\\(Override popup checkbox selected)")
    public void userClicksOnApplyButton_checkboxSelected() {
        basketAdminStepsCA.userClicksOnApplyButton_checkboxSelected();
    }

    @Then("user searches with basketId or orderId or customerId in search textbox upon selecting Don't show this message again checkbox\\(Override popup checkbox selected)")
    public void userSearchesWithBasketOrOrderOrCustomerIdUponSelectingCheckBox() throws Exception {
        basketAdminStepsCA.userSearchesWithBasketOrOrderOrCustomerIdUponSelectingCheckBox();
    }

    @When("user clicks on last sync button\\(Override popup checkbox selected)")
    public void userClicksOnLastSyncButton_checkboxSelected() {
        basketAdminStepsCA.userClicksOnLastSyncButton_checkboxSelected();
    }

    @When("Click on Next Page arrow OR Previous page arrow or Enter Page no in Input field upon selecting Don't show this message again checkbox\\(Override popup checkbox selected)")
    public void userClicksOnNextOrPreviousArrowOrEntersPageNoUponSelectingCheckBox() throws Exception {
        basketAdminStepsCA.userClicksOnNextOrPreviousArrowOrEntersPageNoUponSelectingCheckBox();
    }

    @When("User remains idle for a minute")
    public void userRemainsIdleForAMinute() throws InterruptedException {
        basketAdminStepsCA.userRemainsIdleForAMinute();
    }

    @When("User should not enter FROM date")
    public void userShouldNotEnterDate() {
        //Does Nothing
    }

    @Then("User should able to see TO date in disabled state")
    public void userShouldSeeToDateInDisabledState() {
        basketAdminStepsCA.userShouldSeeToDateInDisabledState();
    }

    @When("User click on close button of single re-export basket popup")
    public void userClickOnCloseButtonOfSingleReExportBasketPopup() {
        basketAdminStepsCA.userClickOnCloseButtonOfSingleReExportBasketPopup();
    }
}


package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.BasketAdminStepsCommon;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import net.thucydides.core.annotations.Steps;

import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;

public class BasketAdminDefinitionsCommon {
    @Steps
    BasketAdminStepsCommon basketAdminStepsCommon;


    @Then("User should see {string}, {string}, {string}, {string}, {string}, {string} column on default landing")
    public void userShouldSeeDefaultColumnsOnDefLanding(String defaultOrderNoCol, String defaultChannelCol, String defaultSiteIdCol, String defaultExportStatusCol, String defaultPaymentStatus, String defaultInspectCol) {
        basketAdminStepsCommon.userShouldSeeDefaultColumnsOnDefLanding(defaultOrderNoCol, defaultChannelCol, defaultSiteIdCol, defaultExportStatusCol, defaultPaymentStatus, defaultInspectCol);
    }


    @Then("User should see {string}, {string}, {string}, {string}, {string}, {string}, {string}, {string} and {string} on landing page after selection of columns from filter")
    public void userShouldSeeAppliedAndDefColumnsAfterApplyingFilter(String defaultOrderNoCol, String defaultChannelCol, String defaultSiteIdCol, String defaultExportStatusCol, String defaultPaymentStatus, String defaultInspectCol, String selectedBasketIdCol, String selectedCustomerIdIdCol, String selectedLastModifiedCol) {
        basketAdminStepsCommon.userShouldSeeAppliedAndDefColumnsAfterApplyingFilter(defaultOrderNoCol, defaultChannelCol, defaultSiteIdCol, defaultExportStatusCol, defaultPaymentStatus, defaultInspectCol, selectedBasketIdCol, selectedCustomerIdIdCol, selectedLastModifiedCol);
    }


    @Then("User verifies other fields from VIEW dropdown in disabled state")
    public void userVerifiesOtherFieldsFromViewDropdownInDisabledState() {
        basketAdminStepsCommon.userVerifiesOtherFieldsFromViewDropdownInDisabledState();
    }

    @And("User clicks on VIEW dropdown")
    public void userClicksOnViewDropdown() {
        basketAdminStepsCommon.userClicksOnViewDropdown();
    }


    @Then("User should be able to see single basket selected")
    public void userShouldSeeSingleBasketSelected() {
        basketAdminStepsCommon.userShouldSeeSingleBasketSelected();
    }

    @When("User deselects selected single basket")
    public void userDeselectsSelectedSingleBasket() {
        basketAdminStepsCommon.userDeselectsSelectedSingleBasket();
    }

    @Then("User should be able to see selected single basket deselected")
    public void userShouldSeeSelectedSingleBasketDeSelected() {
        basketAdminStepsCommon.userShouldSeeSelectedSingleBasketDeSelected();
    }


    @Then("User should be able to see multiple basket selected")
    public void userShouldSeeMultipleBasketsSelected() {
        basketAdminStepsCommon.userShouldSeeMultipleBasketsSelected();
    }

    @When("User deselects selected multiple baskets")
    public void userDeselectsSelectedMultipleBaskets() {
        basketAdminStepsCommon.userDeselectsSelectedMultipleBaskets();
    }

    @Then("User should be able to see selected multiple basket deselected")
    public void userShouldSeeSelectedMultipleBasketsDeSelected() {
        basketAdminStepsCommon.userShouldSeeSelectedMultipleBasketsDeSelected();
    }


    @Given("User is logged in to {string} dropdown page")
    public void userLoggedInToChooseYourMarketToContinueDropdownPage(String string) throws IOException {
        basketAdminStepsCommon.userLoggedInToChooseYourMarketToContinueDropdownPage();
    }

    @Then("User click on the Market selection dropdown")
    public void userClickOnMarketSelectionDropdown() {
        basketAdminStepsCommon.userClickOnMarketSelectionDropdown();
    }

    @When("User click on continue button")
    public void userClickOnContinueButton() {
        basketAdminStepsCommon.userClickOnContinueButton();
    }

    @Then("User should be able to see the {string} landing page with {string} in the Market selection dropdown, filter icon and Download button at the top right corner of the page")
    public void userShouldSeeBasketAdminHeaders(String comNextModule, String region) {
        basketAdminStepsCommon.userShouldSeeBasketAdminHeaders(comNextModule, region);
    }

    @When("User select {string} region from {string} dropdown")
    public void userSelectsAnotherRegion(String regionTwo, String string2) throws InterruptedException {
        basketAdminStepsCommon.userSelectsAnotherRegion(regionTwo);
    }

    @Then("User should be able to change to the another region {string} in same {string} module")
    public void userShouldBeAbleToChangeAnotherRegionInSameModule(String regionTwo, String comNextModule) {
        basketAdminStepsCommon.userShouldBeAbleToChangeAnotherRegionInSameModule(regionTwo, comNextModule);
    }

    @Then("User should be able to go to the {string} module in the same {string} region")
    public void userShouldGoToInventoryPageInSameRegion(String module, String region) {
        basketAdminStepsCommon.userShouldGoToInventoryPageInSameRegion(module, region);
    }


    @When("User click on the {string} button")
    public void userClicksOnPassedInspectJsonPopupButton(String passedButton) {
        basketAdminStepsCommon.userClicksOnPassedInspectJsonPopupButton(passedButton);
    }

    @Then("User should be able to see the JSON data in Collapsed form")
    public void userShouldSeeJsonDataInCollapsedForm() {
        basketAdminStepsCommon.userVerifiesNoChangesInJsonDataBeInCollapsedForm();
    }

    @Then("User verifies the JSON data in {string} form")
    public void userShouldSeeJsonDataInExpandedForm(String buttonForm) {
        basketAdminStepsCommon.userVerifiesJsonDataIsExpandedOrCollapsedForm(buttonForm);
    }

    @Then("User verifies no changes in the JSON data\\(Should be in Expanded form)")
    public void userVerifiesNoChangesInJsonDataBeInExpandedForm() {
        basketAdminStepsCommon.userVerifiesNoChangesInJsonDataBeInExpandedForm();
    }


    @Then("User verifies no changes in the JSON data\\(Should be in Collapsed form)")
    public void userVerifiesNoChangesInJsonDataBeInCollapsedForm() {
        basketAdminStepsCommon.userVerifiesNoChangesInJsonDataBeInCollapsedForm();
    }


    @Then("User should be able to see the SnackBar message as {string} on BASKET JSON pop up")
    public void userShouldSeePassedSnackBarMsgOnBasketJsonPopup(String snackBarMsg) {
        basketAdminStepsCommon.userShouldSeePassedSnackBarMsgOnBasketJsonPopup(snackBarMsg);
    }

    @Then("User should be able to see SnackBar message {string} button on BASKET JSON pop up")
    public void userShouldSeeSnackBarMsgDismissButtonOnBasketJsonPopup(String dismiss) {
        basketAdminStepsCommon.userShouldSeeSnackBarMsgDismissButtonOnBasketJsonPopup(dismiss);
    }

    @Then("User pastes the copied json into {string} notepad file")
    public void userPastesCopiedJsonIntoPassedNotepadFile(String copyJsonTextFile) throws IOException, UnsupportedFlavorException {
        basketAdminStepsCommon.userPastesCopiedJsonIntoPassedNotepadFile(copyJsonTextFile);
    }

    @Then("User checks whether the json is copied into {string} notepad file")
    public void userChecksWhetherJsonIsCopiedIntoPassedNotepadFile(String copyJsonTextFile) {
        basketAdminStepsCommon.userChecksWhetherJsonIsCopiedIntoPassedNotepadFile(copyJsonTextFile);
    }

    @Then("User should be able to see that all EXPORT STATUS should be Checkbox field")
    public void userShouldSeeAllExportStatusIsCheckBoxField() {
        basketAdminStepsCommon.userShouldSeeAllExportStatusIsCheckBoxField();
    }

    @When("User select {string} EXPORT STATUS")
    public void userSelectsAllExportStatus(String allExportStatus) {
        basketAdminStepsCommon.userSelectsAllExportStatus(allExportStatus);
    }

    @Then("User should see all the EXPORT STATUS are checked")
    public void userShouldSeeAllTheExportStatusChecked() {
        basketAdminStepsCommon.userShouldSeeAllTheExportStatusChecked();
    }

    @When("User deselect {string} checkbox")
    public void userDeSelectsPassedCheckbox(String passedExportStatus) {
        basketAdminStepsCommon.userDeSelectsPassedCheckbox(passedExportStatus);
    }

    @Then("User should be able to see {string} checkbox deselected and {string} checkbox should be deselected")
    public void userValidatesPassedExportStatusAndAllExportStatusDeselected(String passedExportStatus, String allExportStatus) {
        basketAdminStepsCommon.userValidatesPassedExportStatusAndAllExportStatusDeselected(passedExportStatus, allExportStatus);
    }

    @Then("User should be able to see {string} and {string} EXPORT STATUS baskets as per the filter criteria")
    public void userShouldSeePassedExportStatusBasketData(String firstExportStatus, String secondExportStatus) {
        basketAdminStepsCommon.userShouldSeePassedExportStatusBasketData(firstExportStatus, secondExportStatus);
    }

    @When("User selects all commerce next modules and checks that market or region selection dropdown at top right corner")
    public void userSelectsAllCommerceNextModulesAndChecksRightSideMarketDropdown() {
        basketAdminStepsCommon.userSelectsAllCommerceNextModulesAndChecksRightSideMarketDropdown();
    }

    @Then("User verifies toast popup with message as {string}")
    public void userVerifiesBasketDownloadCsvToastPopupMsg(String toastPopupMsg) {
        basketAdminStepsCommon.userVerifiesBasketDownloadCsvToastPopupMsg(toastPopupMsg);
    }

    @When("User hovers on toast popup")
    public void userHoversOnToastPopup() {
        basketAdminStepsCommon.userHoversOnToastPopup();
    }

    @Then("User verifies that the toast popup should be visible until user take off the hovered mouse")
    public void userVerifiesThatToastPopupVisibleUntilUserTakesOffHover() {
        basketAdminStepsCommon.userVerifiesThatToastPopupVisibleUntilUserTakesOffHover();
    }

    @When("User takes off the hovered mouse from the toast popup")
    public void userTakesOffHoveredMouseFromToastPopup() {
        basketAdminStepsCommon.userTakesOffHoveredMouseFromToastPopup();
    }

    @Then("User verifies that the toast popup should be disappeared after the {int} seconds")
    public void userVerifiesToastPopupDisappearsAfterPassedSeconds(int noOfSecond) throws InterruptedException {
        basketAdminStepsCommon.userVerifiesToastPopupDisappearsAfterPassedSeconds(noOfSecond);
    }

    @Then("User verifies that the toast popup should be disappeared")
    public void userVerifiesToastPopupDisappeared() {
        basketAdminStepsCommon.userVerifiesToastPopupDisappeared();
    }

    @And("User validates {string} count is equal to total basket count in pagination")
    public void userValidatesAggregatedCountIsEqualToTotalBasketCountInPagination(String aggregatedCountOfField) throws InterruptedException {
        basketAdminStepsCommon.userValidatesAggregatedCountIsEqualToTotalBasketCountInPagination(aggregatedCountOfField);
    }

    @Then("User validates {string} {string} is {string}")
    public void userValidatesFieldIsClear(String field, String element, String state) {
        basketAdminStepsCommon.userValidatesFieldIsClear(field, element, state);
    }

    @And("User validates {string} is not present for {string} baskets")
    public void userValidatesReExportBasketCheckboxIsNotPresent(String reexportBasketsCheckbox, String inProgressBaskets) {
        basketAdminStepsCommon.userValidatesReExportBasketCheckboxIsNotPresent();
    }

    @And("User verifies correct data in VIEW dropdown")
    public void userVerifiesCorrectDataInViewDropdown() {
        basketAdminStepsCommon.userVerifiesCorrectDataInViewDropdown();
    }
}


package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.BasketAdminStepsUS;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import net.thucydides.core.annotations.Steps;

public class BasketAdminDefinitionsUS {
    @Steps
    BasketAdminStepsUS basketAdminStepsUS;

    @When("User click on CHANNEL")
    public void userClicksOnChannel() {
        basketAdminStepsUS.userClicksOnChannel();
    }

    @Then("User should see correct CHANNELS in CHANNEL dropdown on FILTER window")
    public void userShouldSeeCorrectChannelsOnChannelDropdown() {
        basketAdminStepsUS.userShouldSeeCorrectChannelsOnChannelDropdown();
    }


    @When("User select {string} CHANNEL")
    public void userSelectsChannel(String channel) {
        basketAdminStepsUS.userSelectsChannel(channel);
    }

    @Then("user should see channel as {string},site id as {string} and export status as {string}")
    public void userShouldSeeAppliedFilterData(String channelId, String siteId, String exportStatus) {
        basketAdminStepsUS.userShouldSeeAppliedFilterData(channelId, siteId, exportStatus);
    }

}


package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.BasketAdminStepsWE;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import net.thucydides.core.annotations.Steps;

public class BasketAdminDefinitionsWE {
    @Steps
    BasketAdminStepsWE basketAdminStepsWE;


    @Then("User verifies correct MARKET'S in MARKET dropdown in FILTER window")
    public void userVerifiesCorrectMarketsOnMarketDropdown() {
        basketAdminStepsWE.userVerifiesCorrectMarketsOnMarketDropdown();
    }


    @When("User select {string} MARKET")
    public void userSelectsSiteId(String siteId) throws InterruptedException {
        basketAdminStepsWE.userSelectsSiteId(siteId);
    }


    @Then("User should see baskets related to all SITE IDs related to EU market")
    public void userShouldSeeAllSiteIdsRelatedToEUMarkets() {
        basketAdminStepsWE.userShouldSeeAllSiteIdsRelatedToEUMarkets();
    }


    @When("User selects SITE-ID from a list and checks that user verifies baskets as per selected site id")
    public void userVerifiesSelectedSiteIdBaskets() {
        basketAdminStepsWE.userVerifiesSelectedSiteIdBaskets();
    }

}


package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.CheckoutSteps;

import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import net.thucydides.core.annotations.Steps;

public class CheckoutDefinitions {

    @Steps
    CheckoutSteps checkoutSteps;

    @Then("User verifies data on {string} results page")
    public void userVerifiesDataOnResultsPage(String arg0) {
        checkoutSteps.userShouldSeeHeaders();
    }


    @Then("User verifies channel dropdown in checkout page")
    public void userVerifiesChannelDropdownInCheckoutPage() {
        checkoutSteps.userVerifiesChannelDropdownInCheckoutPage();
    }

    @Then("User verifies search button in checkout page")
    public void userVerifiesSearchButtonInCheckoutPage() {
        checkoutSteps.userVerifiesSearchButtonInCheckoutPage();
    }

    @Then("User verifies {string} section is {string}")
    public void userVerifiesAddressManagementSectionState(String addressManagementSection, String state) {
        checkoutSteps.userVerifiesAddressManagementSectionState(addressManagementSection, state);
    }

    @Then("User verifies only numbers can be entered in {string} field under {string} section")
    public void userVerifiesOnlyNumbersCanBeEnteredInFieldUnderSection(String field, String addressManagementSection) {
        checkoutSteps.userVerifiesOnlyNumbersCanBeEntered(field, addressManagementSection);
    }

    @When("User checks whether the {string} checkbox is selected or not")
    public void userChecksRequiredCheckBoxState(String requiredCheckbox) {
        checkoutSteps.userChecksRequiredCheckBoxState(requiredCheckbox);
    }

    @When("User click on the checkbox of the {string}")
    public void userClickOnRequiredCheckBox(String requiredCheckbox) {
        checkoutSteps.userClickOnRequiredCheckBox(requiredCheckbox);
    }

    @Then("User verifies {string} checkbox deselected if selected and viceVersa")
    public void userVerifiesRequiredCheckBoxDeSelectedIfSelectedAndViceVersa(String requiredCheckBox) {
        checkoutSteps.userVerifiesRequiredCheckBoxDeSelectedIfSelectedAndViceVersa(requiredCheckBox);
    }

    @Then("User changes the Carrier Name, Carrier String and Carrier Service")
    public void userChangesCarrierNameCarrierStringAndCarrierService() throws InterruptedException {
        checkoutSteps.userChangesCarrierNameCarrierStringAndCarrierService();
    }

    @Then("User stores {string}")
    public void userStoresCheckoutOrTaxRatesOrFulfilmentFields(String fieldName) throws InterruptedException {
        checkoutSteps.userStoresCheckoutOrTaxRatesOrFulfilmentFields(fieldName);
    }

    @Then("User checks {string} is {string}")
    public void userChecksDynamicTaxIsEnabled(String string, String state) {
        checkoutSteps.userChecksDynamicTaxIsEnabled(state);
    }

    @Then("User verifies {string} and {string} stored fields are same")
    public void userVerifiesTwoModulesFieldsAreSame(String moduleOne, String moduleTwo) {
        checkoutSteps.userVerifiesTwoModulesFieldsAreSame(moduleOne, moduleTwo);
    }

    @When("User click on save button of Address Management section")
    public void userClickOnSaveButtonOfAddressManagementSection() {
        checkoutSteps.userClickOnSaveButtonOfAddressManagementSection();
    }

    @Then("User validate countries in market dropdown isDisplayed")
    public void userValidatesCountriesInMarketDropdownIsDisplayed() {
        checkoutSteps.userValidatesCountriesInMarketDropdownIsDisplayed();
    }

    @Then("User validates {string} or {string} flag isDisplayed")
    public void userValidatesLiveOrNotLiveFlagIsDisplayed(String liveFlag, String notLiveFlag) {
        checkoutSteps.userValidatesLiveOrNotLiveFlagIsDisplayed(liveFlag, notLiveFlag);
    }

    @When("User updates status flag to {string}")
    public void userUpdatesStatusFlag(String statusFlag) {
        checkoutSteps.userUpdatesStatusFlag(statusFlag);
    }
    @Then("User validates {string} flag isDisplayed")
    public void userValidatesPassedFlagIsDisplayed(String statusFlag) {
        checkoutSteps.userValidatesPassedFlagIsDisplayed(statusFlag);
    }

}


package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.CommonSteps;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import jxl.read.biff.BiffException;
import net.thucydides.core.annotations.Steps;

import java.io.IOException;
import java.text.ParseException;

public class CommonDefinitions {

    @Steps
    CommonSteps commonSteps;

    @Given("User is logged in to admin application")
    public void userLoggedInToAdminApplication() throws Exception {
        commonSteps.userLoggedInToAdminApplication();
    }

    @When("User select {string} region")
    public void userSelectRegion(String region) throws InterruptedException {
        commonSteps.userSelectRegion(region);
    }

    @When("User click on {string} link on menu")
    public void userClickOnLinkOnMenu(String linkOnMenu) throws InterruptedException {
        commonSteps.userClickOnLinkOnMenu(linkOnMenu);
    }

    @And("User click on {string} dropdown")
    public void userClickOnDropdown(String dropdown) throws InterruptedException {
        commonSteps.userClickOnDropdown(dropdown);
    }

    @And("User selects {string} in {string} dropdown")
    public void userSelectsValueInDropdown(String dropdownValue, String dropdownFieldName) throws InterruptedException {
        commonSteps.userSelectsValueInDropdown(dropdownValue, dropdownFieldName);
    }

    @And("User click on {string} button")
    public void userClickOnButton(String button) {
        commonSteps.userClickOnButton(button);
    }

    @And("User click on {string} link of {string}")
    public void userClickOnLink(String link, String field) {
        commonSteps.userClickOnLink(link, field);
    }

    @Then("User verifies the {string} of COMNxt isDisplayed")
    public void userVerifiesPageOfCOMNxtIsDisplayed(String pageLevelValidater)
    {
        commonSteps.userVerifiesPageOfCOMNxtIsDisplayed(pageLevelValidater);
    }

    @When("User enters {string} in {string} field")
    public void userEntersValueInField(String value, String fieldName) {
        commonSteps.userEntersValueInField(value, fieldName);
    }

    @When("User updates {string} in {string} field")
    public void userUpdatesValueInField(String value, String field) {
        commonSteps.userUpdatesValueInField(value, field);
    }

    @And("User validates {string} popup isDisplayed")
    public void userValidatesPopupIsDisplayed(String popup) {
        commonSteps.userValidatesPopupIsDisplayed(popup);
    }

    @And("User validates {string} popup message isDisplayed")
    public void userValidatesPopupMessageIsDisplayed(String popupMessage) {
        commonSteps.userValidatesPopupMessageIsDisplayed(popupMessage);
    }

    @Then("User validates {string} popup error message isDisplayed")
    public void userValidatesPopupErrorMessageIsDisplayed(String errorMsg) {
        commonSteps.userValidatesPopupMessageIsDisplayed(errorMsg);
    }

    @Then("User verifies {string} {string} is in {string} state")
    public void userVerifiesElementState(String field, String element, String state) {
        commonSteps.userVerifiesElementState(field, state);
    }

    @And("User validates {string} isDisplayed")
    public void userVerifiesFieldIsDisplayed(String field) throws ParseException {
        commonSteps.userVerifiesFieldIsDisplayed(field);
    }

    @Then("User validates {string} isEnabled")
    public void userValidatesFieldIsEnabled(String field) {
        commonSteps.userValidatesFieldIsEnabled(field);
    }

    @When("User click on {string} tab")
    public void userClickOnTab(String tab) throws InterruptedException {
        commonSteps.userClickOnTab(tab);
    }

    @When("User click on {string} dropdown on menu")
    public void userClickOnDropdownOnMenu(String dropdownOnMenu) {
        commonSteps.userClickOnDropdownOnMenu(dropdownOnMenu);
    }

    @Then("User validates {string} {string} isSelected")
    public void userValidatesFieldIsSelected(String fieldName, String field) {
        commonSteps.userValidatesFieldIsSelected(fieldName);
    }

    @Then("User validates {string} as {string}")
    public void userChecksStatusOfCheckBox(String field, String status) {
        commonSteps.userChecksStatusOfCheckBox(field, status);
    }

    @Then("User select random value from {string} dropdown")
    public void userSelectRandomValueFromDropdown(String dropdownField) {
        commonSteps.userSelectRandomValueFromDropdown(dropdownField);
    }

    @Then("User select random checkbox from {string} checkbox")
    public void userSelectRandomCheckBox(String checkBoxField) {
        commonSteps.userSelectRandomCheckBox(checkBoxField);
    }

    @Then("User validates {string} popup message is not displayed")
    public void userValidatesPopupMessageIsNotDisplayed(String popupMessage) {
        commonSteps.userValidatesPopupMessageIsNotDisplayed(popupMessage);
    }

    @Then("User click on {string} radio button")
    public void userClickOnRadioButton(String radioButton) {
        commonSteps.userClickOnRadioButton(radioButton);
    }

    @And("User click on {string} of {string}")
    public void userClickOnIcon(String icon, String field) {
        commonSteps.userClickOnIcon(icon, field);
    }

    @When("User selects {string} checkbox")
    public void userSelectsCheckBox(String checkbox) {
        commonSteps.userClickOnCheckBox(checkbox);
    }

    @When("User click on {string} outside area of popup")
    public void userClickOnOutsideAreaOfPopup(String text) {
        commonSteps.userClickOnOutsideAreaOfPopup(text);
    }

    @Then("User verifies {string} records isDisplayed in {string} column")
    public void userVerifiesRecordsIsDisplayedInTableColumn(String expectedColumnRecord, String tableColumn) {
        commonSteps.userVerifiesRecordsIsDisplayedInTableColumn(expectedColumnRecord, tableColumn);
    }

    @When("User selects FROM date as {int} days back from TO date and TO date as current date")
    public void userSelectsFromAndToDateWithinGivenRange(Integer noOfDays) throws InterruptedException {
        commonSteps.userSelectsFromAndToDateWithinGivenRange(noOfDays);
    }

    @Then("User verifies {string} records isDisplayed within selected date range in {string} column")
    public void userVerifiesRecordsIsDisplayedWithinSelectedDateRangeInTable(String moduleName, String tableColumn) throws ParseException {
        commonSteps.userVerifiesRecordsIsDisplayedWithinSelectedDateRangeInTable(moduleName, tableColumn);
    }

    @And("User validates {string} file {string} successfully")
    public void userValidatesFileSuccessfully(String fileName, String arg1) throws IOException {
        commonSteps.userValidatesFileDownloadedOrExportedSuccessfully(fileName);
    }

    @Then("User validates {string} dropdown values {string}")
    public void userValidatesDropdownValuesIsDisplayedOrNot(String dropdownName, String fieldStatus, DataTable dropdownValuesDataTable) {
        commonSteps.userValidatesDropdownValuesIsDisplayedOrNot(dropdownName, fieldStatus, dropdownValuesDataTable);
    }

    @When("User deselects {string} checkbox")
    public void userDeselectsCheckbox(String checkbox) {
        commonSteps.userClickOnCheckBox(checkbox);
    }

    @Then("User validates {string} isDisplayed in {string} column")
    public void userValidatesDataIsDisplayedInTableColumn(String data, String tableColumn) {
        commonSteps.userValidatesDataIsDisplayedInTableColumn(data, tableColumn);
    }

    @Then("User uploads a {string} file")
    public void userUploadsRequiredFile(String file) throws InterruptedException {
        commonSteps.userUploadsRequiredFile(file);
    }

    @And("User validates {string} is not displayed")
    public void userValidatesFieldIsNotDisplayed(String field) throws ParseException {
        commonSteps.userValidatesFieldIsNotDisplayed(field);
    }

    @When("User click on {string} link")
    public void userClicksOnLink(String link) {
        commonSteps.userClicksOnLink(link);
    }

    @Then("User verifies {string} {string} is {string}")
    public void userVerifiesElementIsCheckedOrNot(String field, String element, String state) {
        commonSteps.userVerifiesElementIsCheckedOrNot(field, element, state);
    }

    @When("User scrolls to {string} section")
    public void userScrollsToSection(String section) {
        commonSteps.userScrollsToSection(section);
    }

    @Then("User verifies the {string} of COMNxt isDisplayed for {string} region")
    public void userVerifiesCOMNxtIsDisplayedForRegion(String pageHeader, String region) {
        commonSteps.userVerifiesCOMNxtIsDisplayedForRegion(pageHeader,region);
    }


    @Then("User selects {string} Date And Time")
    public void userSelectsDateAndTime(String dateAndTimeValue) {
        commonSteps.userSelectsDateAndTime(dateAndTimeValue);
    }

    @Then("User stores selected {string} in {string}")
    public void userStoresSelectedDataInLocalVariable(String field, String varName) {
        commonSteps.userStoresSelectedDataInLocalVariable(field, varName);
    }

    @Then("User validates {string} isDisplayed on {string} file")
    public void userValidatesFieldsIsDisplayedOnFile(String field, String file, DataTable fieldsDataTable) throws BiffException, IOException {
       commonSteps.userValidatesFieldsIsDisplayedOnFile(field, file, fieldsDataTable);
    }

}


package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.InventorySteps;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import net.thucydides.core.annotations.Steps;


public class InventoryDefinitions {

    @Steps
    InventorySteps inventorySteps;


    @Then("User validates Inventory search result")
    public void userValidatesInventorySearchResult() {
        inventorySteps.userValidatesInventorySearchResult();
    }


    @Then("User verifies valid countries in market dropdown isDisplayed")
    public void userValidatesCountriesInMarketDropdownIsDisplayed() {
        inventorySteps.userValidatesCountriesInMarketDropdownIsDisplayed();
    }

    @Then("User validates PRODUCT DETAIL PAGE")
    public void userValidatesProductDetailsPage() {
        inventorySteps.userValidatesProductDetailsPage();
    }


    @Then("User verifies valid countries in channel dropdown isDisplayed")
    public void userVerifiesValidChannelsInChannelsDropdown() {
        inventorySteps.userVerifiesValidChannelsInChannelsDropdown();
    }


    @Then("User validates PRODUCT DETAIL PAGE for successful upload Product Ids")
    public void userValidatesProductDetailsPageForSuccessfulUploadedProductIds() {
        inventorySteps.userValidatesProductDetailsPage();
    }

    @Then("User verifies correct count of unsuccessful product id on more info popup")
    public void userVerifiesCorrectCountOfUnSuccessProductIdOnMoreInfoPopup() {
        inventorySteps.userVerifiesCorrectCountOfUnSuccessProductIdOnMoreInfoPopup();
    }


    @Then("User validates {string} is displayed on {string} table")
    public void userValidatesAvailabilityQuantityPerNodeTableColumnHeaders(String columnHeader, String tableName) {
        inventorySteps.userValidatesAvailabilityQuantityPerNodeTableColumnHeaders(columnHeader, tableName);
    }


    @Then("User validates {string} {string} on ProductId {string}")
    public void userValidatesFieldsDataOnInventoryResultsPage(String inventoryData, String string2, String string3) {
        inventorySteps.userValidatesFieldsDataOnInventoryResultsPage(inventoryData);
    }

}


package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.OrderFulfilmentSteps;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import net.thucydides.core.annotations.Steps;

import java.io.IOException;

public class OrderFulfilmentDefinitions {

    @Steps
    OrderFulfilmentSteps orderFulfilmentSteps;

    @When("User go to Configure Fulfilment Methods page under Fulfilment tab")
    public void userGoToPassedPageUnderFulfilmentTab() {
        orderFulfilmentSteps.userGoToPassedPageUnderFulfilmentTab();
    }

    @And("User clicks on {int} SiteID")
    public void userClicksOnSpecifiedSiteID(Integer siteID) {
        orderFulfilmentSteps.userClicksOnSpecifiedSiteID(siteID);
    }

    @Then("User is redirected to {string} page of selected site ID")
    public void userRedirectedToFulfilmentPage(String string) {
        orderFulfilmentSteps.userRedirectedToFulfilmentPage();
    }


    @When("User click on edit link of {string} order fulfilment method")
    public void userClicksOnEditLinkOfFulfilmentMethod(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentSteps.userClicksOnEditLinkOfFulfilmentMethod(fulfilmentMethod);
    }

    @When("Select Status and Enter Locale descriptions")
    public void userSelectsStatusAndEntersLocalDesc() throws InterruptedException {
        orderFulfilmentSteps.userSelectsStatusAndEntersLocalDesc();
    }

    @When("Do not enter LOCALES NAME")
    public void userDoNotEnterPositionAndLocalName() {
        orderFulfilmentSteps.userDoNotEnterPositionAndLocalName();
    }

    @Then("User should see SAVE button in disabled state")
    public void userShouldSeeSaveButtonInDisabledState() {
        orderFulfilmentSteps.userShouldSeeSaveButtonInDisabledState();
    }


    @When("User click on pre-populated fulfilment method of {string} site ID")
    public void userClicksOnPrePopulatedSiteId(String siteId) {
        orderFulfilmentSteps.userClicksOnPrePopulatedSiteId(siteId);
    }

    @Then("User will be redirected to CONFIGURE FULFILMENT METHODS of {string}")
    public void userRedirectedToConfigureFulfilmentMethod(String string) {
        orderFulfilmentSteps.userRedirectedToConfigureFulfilmentMethod();
    }


    @When("User clicks on position dropdown")
    public void userClicksOnPositionDropdown() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnPositionDropdown();
    }

    @Then("User should not see POSITION value of CLICK AND COLLECT and PICK UP, DROP OFF fulfilment method in drop down list")
    public void userShouldNotSeePositionOfCLCAndPUDO() {
        orderFulfilmentSteps.userShouldNotSeePositionOfCLCAndPUDO();
    }

    @Then("User should not see POSITION value of HOME DELIVERY and PICK UP, DROP OFF fulfilment method in drop down list")
    public void userShouldNotSeePositionOfHDAndPUDO() {
        orderFulfilmentSteps.userShouldNotSeePositionOfHDAndPUDO();
    }

    @Then("User should not see POSITION value of HOME DELIVERY and CLICK AND COLLECT fulfilment method in drop down list")
    public void userShouldNotSeePositionOfHDAndCLC() {
        orderFulfilmentSteps.userShouldNotSeePositionOfHDAndCLC();
    }

    @Then("User clicks on close button of CONFIGURE FULFILMENT METHOD")
    public void userClicksOnCloseButtonOfFulfilmentMethod() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnCloseButtonOfFulfilmentMethod();
    }


    @When("User check {string} fulfilment method STATUS")
    public void userChecksFulfilmentMethodStatus(String fulfilmentMethod) {
        orderFulfilmentSteps.userChecksFulfilmentMethodStatus(fulfilmentMethod);
    }

    /*@When("If {string} STATUS = {string}, enable it else disable all shipping methods")
    public void userEnablesFmIfDisabledElseDisableAllSmsUnderPassedFm(String fulfilmentMethod, String passedStatus) throws InterruptedException {
        orderFulfilmentSteps.userEnablesFmIfDisabledElseDisableAllSmsUnderPassedFm(fulfilmentMethod, passedStatus);
    }*/

    @When("User disable the toggle button")
    public void userDisablesToggleButton() throws InterruptedException {
        orderFulfilmentSteps.userDisablesToggleButton();
    }

    @When("User click on SAVE button")
    public void userClicksOnSaveButtonOfConfigureFulfilmentMethod() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnSaveButtonOfConfigureFulfilmentMethod();
    }

    @Then("User should see Header text as {string} on {string} popup")
    public void userShouldSeeFulfilmentMethodPopupHeader(String expectedHeader, String string2) {
        orderFulfilmentSteps.userShouldSeeFulfilmentMethodPopupHeader(expectedHeader);
    }

    @Then("User should see message as {string} on {string} popup")
    public void userShouldSeeSuccessMessage(String successMsg, String string2) {
        orderFulfilmentSteps.userShouldSeeSuccessMessage(successMsg);
    }

    @When("User clicks on close button of {string} popup")
    public void userClicksOnCloseButtonOfFmOrSmPopup(String string) throws InterruptedException {
        orderFulfilmentSteps.userClicksOnCloseButtonOfFmOrSmPopup();
    }

    @Then("User should remain on same screen and should see the toggle button in disabled state\\(updated state)")
    public void userSeesToggleButtonDisabled() {
        orderFulfilmentSteps.userSeesToggleButtonDisabled();
    }

    @Then("User enable the toggle button")
    public void userEnablesTogglesButton() throws InterruptedException {
        orderFulfilmentSteps.userEnablesTogglesButton();
    }

    /*@Then("On CONFIGURE FULFILMENT METHODS SCREEN fulfilment status should be disabled and ADD SHIPPING METHOD button should be disabled for {string} order fulfilment method")
    public void checkStatusAndAddShippingMethodButtonIsDisabled(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentSteps.checkStatusAndAddShippingMethodButtonIsDisabled(fulfilmentMethod);
    }*/


    @Then("User should remain on same screen and should see the toggle button in enabled state\\(updated state)")
    public void userSeesToggleButtonEnabled() {
        orderFulfilmentSteps.userSeesToggleButtonEnabled();
    }

   /* @Then("On CONFIGURE FULFILMENT METHODS SCREEN fulfilment status should be enabled and ADD SHIPPING METHOD button should be enabled for {string} order fulfilment method")
    public void checkStatusAndAddShippingMethodButtonIsEnabled(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentSteps.checkStatusAndAddShippingMethodButtonIsEnabled(fulfilmentMethod);
    }*/


    @When("Enter LOCALES NAME")
    public void userEntersLocalName() {
        orderFulfilmentSteps.userEntersLocalName();
    }

    @Then("User should see SAVE button in enabled state")
    public void userShouldSeeSaveButtonEnabledState() {
        orderFulfilmentSteps.userShouldSeeSaveButtonEnabledState();
    }


    @When("User click on edit link of {string} order fulfilment method where fulfilment method is configured and status is in disabled or enabled state")
    public void userClicksOnEditLinkOfFulfilmentMethodAndStatusEnabledOrDisabled(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentSteps.userClicksOnEditLinkOfFulfilmentMethod(fulfilmentMethod);
    }

    @Then("User verifies CONFIGURE fulfilment screen with prefilled detail")
    public void userVerifiesFulfilmentMethodWithPrefilledDetails() throws InterruptedException {
        orderFulfilmentSteps.userVerifiesFulfilmentMethodWithPrefilledDetails();
    }


    @Then("User is navigated to landing page of {string} section")
    public void userGoesToConfigureFulfilmentMethodsScreen(String fulfilmentMethodsPageHeader) {
        orderFulfilmentSteps.userGoesToConfigureFulfilmentMethodsScreen(fulfilmentMethodsPageHeader);
    }


    @Then("User clicks on back button of the page")
    public void userClicksOnBackButton() {
        orderFulfilmentSteps.userClicksOnBackButton();
    }


    @Then("User should be redirected to landing page of {string}")
    public void userRedirectedToLandingPage(String landingPageHeader) {
        orderFulfilmentSteps.userRedirectedToLandingPage(landingPageHeader);
    }


    @Then("User is redirected to {string} page")
    public void userValidatesConfigureFmOrSmPageHeader(String configureFmOrSmPageHeader) {
        orderFulfilmentSteps.userValidatesConfigureFmOrSmPageHeader(configureFmOrSmPageHeader);
    }


    @When("User click on Edit link of shipping method OR Add shipping method button of {string} fulfilment method")
    public void userClicksOnEditLinkOrAddShippingMethodButton(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentSteps.userClicksOnEditLinkOrAddShippingMethodButton(fulfilmentMethod);
    }

    /*@When("User clicks on CARRIER NAME dropdown")
    public void userClicksOnCarrierNameDropdown() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnCarrierNameDropdown();
    }
*/
    @Then("User verifies correct data in CARRIER NAME dropdown")
    public void userVerifiesCorrectDataInCarrierNameDropdown() {
        orderFulfilmentSteps.userVerifiesCorrectDataInCarrierNameDropdown();
    }


    /*@When("User clicks on CARRIER SERVICE dropdown")
    public void userClicksOnCarrierServiceDropdown() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnCarrierServiceDropdown();
    }*/

    @Then("User verifies correct data's in CARRIER SERVICE dropdown")
    public void userVerifiesCorrectDataInCarrierServiceDropdown() {
        orderFulfilmentSteps.userVerifiesCorrectDataInCarrierServiceDropdown();
    }


    /*@When("User clicks on TAX CLASS dropdown")
    public void userClicksOnTaxClassDropdown() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnTaxClassDropdown();
    }*/

    @Then("User verifies correct data's in TAX CLASS dropdown")
    public void userVerifiesCorrectDataInTaxClassDropdown() {
        orderFulfilmentSteps.userVerifiesCorrectDataInTaxClassDropdown();
    }


    @Then("User verifies correct CHANNELS on create OR configure shipping method screen")
    public void userVerifiesCorrectChannelsOnCreateSMScreen() {
        orderFulfilmentSteps.userVerifiesCorrectChannelsOnCreateSMScreen();
    }


    @Then("User verifies correct PRODUCT TYPES on create OR configure shipping method screen")
    public void userVerifiesCorrectProductTypesOnCreateSMScreen() {
        orderFulfilmentSteps.userVerifiesCorrectProductTypesOnCreateSMScreen();
    }


    @When("If {string} STATUS = {string}, enable it")
    public void userEnablesFulfilmentMethod(String fulfilmentMethod, String status) throws InterruptedException {
        orderFulfilmentSteps.userEnablesFulfilmentMethod(fulfilmentMethod, status);
    }


    @When("User clicks on Add shipping method button of {string} fulfilment method")
    public void userClicksOnAddShippingMethodButton(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentSteps.userClicksOnAddShippingMethodButton(fulfilmentMethod);
    }

    /*@When("Add all the details on create OR configure shipping method screen by leaving CARRIER NAME field blank")
    public void userAddsAllDetailsExceptCarrierNameField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptCarrierNameField();
    }*/

    @Then("User should see SAVE button of create shipping method screen in disabled state")
    public void userShouldSeeSaveButtonOfCreateSMMethodInDisabledState() {
        orderFulfilmentSteps.userShouldSeeSaveButtonOfCreateSMMethodInDisabledState();
    }

    /*@When("Now select CARRIER NAME")
    public void userSelectsCarrierName() throws InterruptedException {
        orderFulfilmentSteps.userSelectsCarrierName();
    }*/

    @Then("User should see SAVE button of create shipping method screen in enabled state")
    public void userShouldSeeSaveButtonOfCreateSMMethodInEnabledState() {
        orderFulfilmentSteps.userShouldSeeSaveButtonOfCreateSMMethodInEnabledState();
    }


    @When("User Enter all the details other than Adding Carrier string")
    public void userAddsAllDetailsExceptCarrierStringField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptCarrierStringField();
    }

   /*
   OUT OF SCOPE BECAUSE OF NEW CARRIER STRING FIELD IMPLEMENTATION
   @When("Now enter CARRIER STRING")
    public void now_enter_carrier_string() {
        orderFulfilmentSteps.userEntersCarrierString();
    }*/


   /* @When("Add all the details on create OR configure shipping method screen by leaving CARRIER SERVICE field blank")
    public void userAddsAllDetailsExceptCarrierServiceField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptCarrierServiceField();
    }*/

   /* @When("Now select CARRIER SERVICE")
    public void userSelectsCarrierService() throws InterruptedException {
        orderFulfilmentSteps.userSelectsCarrierService();
    }*/


    /*@When("Add all the details on create OR configure shipping method screen by leaving LOCALE NAME field blank")
    public void userAddsAllDetailsExceptLocaleNameField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptLocaleNameField();
    }*/

    @When("Now enter LOCALE NAME")
    public void userAddsLocalName() {
        orderFulfilmentSteps.userAddsLocalName();
    }


    /*@When("Add all the details on create OR configure shipping method screen by leaving BASE FIXED PRICE field blank")
    public void userAddsAllDetailsExceptBaseFixedPriceField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptBaseFixedPriceField();
    }*/

    @When("Now enter BASE FIXED PRICE")
    public void userEntersBaseFixedPrice() {
        orderFulfilmentSteps.userEntersBaseFixedPrice();
    }

    @Then("User clicks on close button of {string} SHIPMENT METHOD")
    public void userClicksOnCloseButtonOfShipmentMethod(String string) throws InterruptedException {
        orderFulfilmentSteps.userClicksOnCloseButtonOfShipmentMethod();
    }

    @When("Add all the details on create OR configure shipping method screen by leaving THRESHOLD field blank")
    public void userAddsAllDetailsExceptThresholdField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptThresholdField();
    }

    @When("Now enter THRESHOLD")
    public void userEntersThreshold() {
        orderFulfilmentSteps.userEntersThreshold();
    }

    @When("Add all the details on create OR configure shipping method screen by leaving SHIPMENT UP SELL field blank")
    public void userAddsAllDetailsExceptShipmentUpSellField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptShipmentUpSellField();
    }

    @When("Now enter SHIPMENT UP SELL")
    public void userEntersShipmentUpSell() {
        orderFulfilmentSteps.userEntersShipmentUpSell();
    }

    @Then("Add all the details on create OR configure shipping method screen by leaving THRESHOLD and SHIPMENT UP SELL fields blank")
    public void userAddsAllDetailsExceptThresholdAndShipmentUpSellField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptThresholdAndShipmentUpSellField();
    }

    @When("User enters THRESHOLD data as {string} which is lesser than SHIPMENT UP SELL data {string}")
    public void userEntersThresholdLesserThanShipmentUpSellField(String thresholdValue, String shipmentUpSellValue) {
        orderFulfilmentSteps.userEntersThresholdLesserThanShipmentUpSellField(thresholdValue, shipmentUpSellValue);
    }


    @Then("User should see error message {string} on {string} field")
    public void userShouldSeeErrorMessageBelowField(String errorMessage, String field) {
        orderFulfilmentSteps.userShouldSeeErrorMessageBelowField(errorMessage, field);
    }

    @When("User enters SHIPMENT UP SELL data as {string} which is greater than THRESHOLD data {string}")
    public void userEntersShipmentUpSellGreaterThanThresholdField(String shipmentUpSellValue, String thresholdValue) {
        orderFulfilmentSteps.userEntersShipmentUpSellGreaterThanThresholdField(shipmentUpSellValue, thresholdValue);
    }

    @When("User enters THRESHOLD data as {string} which is greater than SHIPMENT UP SELL data {string}")
    public void userEntersThresholdGreaterThanShipmentUpSellField(String thresholdValue, String shipmentUpSellValue) {
        orderFulfilmentSteps.userEntersThresholdGreaterThanShipmentUpSellField(thresholdValue, shipmentUpSellValue);
    }

    @Then("User clicks on Yes button of {string} SHIPMENT METHOD close popup")
    public void userClicksOnYesButtonOfConfigureSMClosePopup(String string) {
        orderFulfilmentSteps.userClicksOnYesButtonOfConfigureSMClosePopup();
    }


    @When("Add all the details on create OR configure shipping method screen by leaving POSITION field blank")
    public void userAddsAllDetailsExceptPositionField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptPositionField();
    }

    @When("Now select POSITION")
    public void userSelectsPosition() throws InterruptedException {
        orderFulfilmentSteps.userSelectsPosition();
    }


    /*@When("Add all the details on create OR configure shipping method screen by leaving CHANNELS field blank")
    public void userAddsAllDetailsExceptChannelsField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptChannelsField();
    }*/

    @When("Now select CHANNELS")
    public void userSelectsChannels() {
        orderFulfilmentSteps.userSelectsChannels();
    }


    /*@When("Add all the details on create OR configure shipping method screen by leaving PRODUCT TYPES field blank")
    public void userAddsAllDetailsExceptProductTypesField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptProductTypesField();
    }*/

    @When("Now select PRODUCT TYPES")
    public void userSelectsProductTypes() {
        orderFulfilmentSteps.userSelectsProductTypes();
    }


    /*@When("Add all the details on create OR configure shipping method screen by leaving MINIMUM DELIVERY DAYS field blank")
    public void userAddsAllDetailsExceptMinimumField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptMinimumField();
    }

    @When("Now enter MINIMUM DELIVERY DAYS")
    public void userEntersMinimum() {
        orderFulfilmentSteps.userEntersMinimum("1");
    }

    @When("Add all the details on create OR configure shipping method screen by leaving MAXIMUM DELIVERY DAYS field blank")
    public void userAddsAllDetailsExceptMaximumField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptMaximumField();
    }

    @When("Now enter MAXIMUM DELIVERY DAYS")
    public void now_enter_maximum() {
        orderFulfilmentSteps.userEntersMaximum("4");
    }*/

    @Then("User click on edit link of shipping method of {string} fulfilment method")
    public void userClicksOnEditLinkOfShippingMethod(String fulfilmentMethod) {
        orderFulfilmentSteps.userClicksOnEditLinkOfShippingMethod(fulfilmentMethod);
    }

    /*@When("User enter data in MinDay {string} & MaxDay {string}")
    public void userEntersMinimumAndMaximumDay(String min, String max) {
        orderFulfilmentSteps.userEntersMinimum(min);
        orderFulfilmentSteps.userEntersMaximum(max);
    }*/

    @When("User clicks on SAVE button of shipping method")
    public void userClicksOnSaveButtonOfConfigureShippingMethod() {
        orderFulfilmentSteps.userClicksOnSaveButtonOfConfigureShippingMethod();
    }

    @Then("User verifies updated {string} {string} Days in configure fulfilment methods screen")
    public void userChecksPassedFieldValueAndUpdatedFieldValueInConfigureFmsScreen(String field, String value) {
        orderFulfilmentSteps.userChecksPassedFieldValueAndUpdatedFieldValueInConfigureFmsScreen(field, value);
        orderFulfilmentSteps.userChecksPassedFieldValueAndUpdatedFieldValueInConfigureFmsScreen(field, value);
    }

    
    
    /*
    It is commented because of new carrier string implementation and carrier string is not a mandatory field    @When("User updates CARRIER STRING")
    public void user_updates_carrier_string() {
        orderFulfilmentSteps.userUpdatesCarrierString();
    }*/

    /*@When("User updates THRESHOLD and SHIPMENT UP SELL")
    public void user_updates_threshold_and_shipment_up_sell() {
        orderFulfilmentSteps.userUpdatesThresholdAndShipmentUpSell();
    }*/

    /*@When("User updates TAX CLASS")
    public void user_updates_tax_class() throws InterruptedException {
        orderFulfilmentSteps.userUpdatesTaxClass();
    }*/


    @When("User enter details on Configure fulfilment screen")
    public void userEnterSomeDetailsOnConfigureFmScreen() throws InterruptedException {
        orderFulfilmentSteps.userEnterSomeDetailsOnConfigureFmScreen();
    }


    @Then("If {string} has single site-Id,User checks its locales else User checks locales for all site-Id's")
    public void userChecksLocalesForSiteIdsBasedOnRegion(String region) throws InterruptedException {
        orderFulfilmentSteps.userChecksLocalesForSiteIdsBasedOnRegion(region);
    }

    @When("disable all shipping methods of {string} fulfilment method")
    public void userDisableAllShippingMethods(String fulfilmentMethod) throws InterruptedException {
        orderFulfilmentSteps.userDisableAllShippingMethods(fulfilmentMethod);
    }


    /*@When("If {string} STATUS = {string},disable all its shipping methods and disable its fulfilment method")
    public void ifFmsStatusIsEnabledDisableAllSmsAndFm(String fulfilmentMethod, String fulfilmentStatus) throws InterruptedException {
        orderFulfilmentSteps.ifFmsStatusIsEnabledDisableAllSmsAndFm(fulfilmentMethod, fulfilmentStatus);
    }*/

    @Then("User verifies edit button of shipping method of {string} fulfilment method in {string} state")
    public void userVerifiesEditButtonOfShippingMethodInDisabledState(String fulfilmentMethod, String fulfilmentStatus) throws InterruptedException {
        orderFulfilmentSteps.userVerifiesEditButtonOfShippingMethodInDisabledState(fulfilmentMethod, fulfilmentStatus);
    }


    @When("User disable all shipping method under every FM except default\\(enabled) shipping method")
    public void userDisableAllSmsExceptDefaultEnabledSm() throws InterruptedException {
        orderFulfilmentSteps.userDisableAllSmsExceptDefaultEnabledSm();
    }

    @When("User click on edit link of default\\(enabled) SM")
    public void userClicksOnEditLinkOfDefaultEnabledSm() {
        orderFulfilmentSteps.userClicksOnEditLinkOfDefaultEnabledSm();
    }

    @When("User deselect default flag")
    public void userDeselectDefaultFlag() throws InterruptedException {
        orderFulfilmentSteps.userDeselectDefaultFlag();
    }

    @Then("User should see Header text as {string} on shipping method error popup")
    public void userShouldSeeShippingMethodPopupErrorHeader(String errorHeader) {
        orderFulfilmentSteps.userShouldSeeShippingMethodPopupErrorHeader(errorHeader);
    }

    @Then("User should see message as {string} on shipping method error popup")
    public void userShouldSeeShippingMethodPopupErrorMsg(String errorMsg) {
        orderFulfilmentSteps.userShouldSeeShippingMethodPopupErrorMsg(errorMsg);
    }

    @Then("User clicks on close button of shipping method error popup")
    public void userClicksOnCloseButtonOfSmErrorPopup() {
        orderFulfilmentSteps.userClicksOnCloseButtonOfSmErrorPopup();
    }

    @Then("User refreshes the browser")
    public void userRefreshesTheBrowser() {
        orderFulfilmentSteps.userRefreshesTheBrowser();
    }


    @Then("User stores next higher position enabled sm details in JSON object if any found else user will enable one sm and stores sm details to JSON object")
    public void userStoresNextHigherPosEnabledSmDetailsInJSONObject() throws InterruptedException {
        orderFulfilmentSteps.userStoresNextHigherPosEnabledSmDetailsInJSONObject();
    }

    @Then("User verifies autopick of sm should be same as stored data in sm JSON Object")
    public void userVerifiesAutopickOfSmSameAsStoredSm() {
        orderFulfilmentSteps.userVerifiesAutopickOfSmSameAsStoredSm();
    }


    @When("User click on edit link of any of the shipping method except shipping method status is enabled and default is true")
    public void userClicksOnEditLinkOfSmExceptDefTrueSmEnabled() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnEditLinkOfSmExceptDefTrueSmEnabled();
    }

    @When("User select the default checkbox if not selected")
    public void userSelectDefaultCheckBoxIfNotSelected() throws InterruptedException {
        orderFulfilmentSteps.userSelectDefaultCheckBoxIfNotSelected();
    }

    @When("User enable the shipping method status if not enabled")
    public void userEnablesSmIfDisabled() throws InterruptedException {
        orderFulfilmentSteps.userEnablesSmIfDisabled();
    }

    @Then("User should see Header text as {string} on shipping method popup")
    public void userShouldSeeShippingMethodPopupHeader(String header) {
        orderFulfilmentSteps.userShouldSeeShippingMethodPopupHeader(header);
    }

    @Then("User should see message as {string} on shipping method popup")
    public void userShouldSeeShippingMethodPopupMsg(String msg) {
        orderFulfilmentSteps.userShouldSeeShippingMethodPopupMsg(msg);
    }


    /*@When("Add all the details on create OR configure shipping method screen by leaving CUSTOM ID field blank")
    public void userAddsAllDetailsExceptCustomIdField() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptCustomIdField();
    }*/

    @When("Now enter CUSTOM ID")
    public void userEnterCustomId() {
        orderFulfilmentSteps.userEnterCustomId();
    }


    
    
    /*
    OUT OF SCOPE BECAUSE OF NEW TIER FIXED PRICE IMPLEMENTATION
    @When("Add all the details on create OR configure shipping method screen by leaving TIER One field blank under MEMBER FIXED PRICE")
    public void add_all_the_details_on_create_or_configure_shipping_method_screen_by_leaving_tier_one_field_blank_under_member_fixed_price() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptTierOneField();
    }

    @When("Add all the details on create OR configure shipping method screen by leaving TIER Two field blank under MEMBER FIXED PRICE")
    public void add_all_the_details_on_create_or_configure_shipping_method_screen_by_leaving_tier_two_field_blank_under_member_fixed_price() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptTierTwoField();
    }

    @When("Add all the details on create OR configure shipping method screen by leaving TIER Three field blank under MEMBER FIXED PRICE")
    public void add_all_the_details_on_create_or_configure_shipping_method_screen_by_leaving_tier_three_field_blank_under_member_fixed_price() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptTierThreeField();
    }

    @When("Add all the details on create OR configure shipping method screen by leaving TIER Four field blank under MEMBER FIXED PRICE")
    public void add_all_the_details_on_create_or_configure_shipping_method_screen_by_leaving_tier_four_field_blank_under_member_fixed_price() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllDetailsExceptTierFourField();
    }

    @When("Now enter TIER {int}")
    public void now_enter_tier(Integer tierNo) {
        orderFulfilmentSteps.userEntersPassedTier(tierNo);
    }*/


    @When("User clicks on view action icon")
    public void userClicksOnViewActionIcon() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnViewActionIcon();
    }

    @Then("User should be able to see header as {string} in view pop-up")
    public void userShouldBeAbleToSeeViewPopupHeader(String expectedHeader) {
        orderFulfilmentSteps.userShouldBeAbleToSeeViewPopupHeader(expectedHeader);
    }

    @Then("User clicks on close icon of {string} view pop-up")
    public void userClicksOnCloseIconOfAllowedOrBlockedItemsPopup(String expectedHeader) {
        orderFulfilmentSteps.userClicksOnCloseIconOfAllowedOrBlockedItemsPopup(expectedHeader);
    }


    @When("User clicks on delete action icon")
    public void userClicksOnDeletedActionIcon() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnDeletedActionIcon();
    }

    @Then("User should be able to see delete List pop-up with text {string}")
    public void userShouldBeAbleToSeeDeleteListPopupWithText(String deletePopupText) {
        orderFulfilmentSteps.userShouldBeAbleToSeeDeleteListPopupWithText(deletePopupText);
    }

    @Then("User clicks on CANCEL button")
    public void userClicksOnCancelButton() {
        orderFulfilmentSteps.userClicksOnCancelButton();
    }


    @When("User clicks on Add Items button")
    public void userClicksOnAddItemsButton() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnAddItemsButton();
    }

    @Then("User should be able to see {string} in add pop-up")
    public void userShouldBeAbleToSeeAddItemsPopupHeader(String addHeader) {
        orderFulfilmentSteps.userShouldBeAbleToSeeAddItemsPopupHeader(addHeader);
    }


    @When("User clicks on edit action icon")
    public void userClicksOnEditActionIcon() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnEditActionIcon();
    }

    @Then("User should be able to see header {string} in edit pop-up")
    public void userShouldSeeHeaderInEditPopup(String editHeader) {
        orderFulfilmentSteps.userShouldSeeHeaderInEditPopup(editHeader);
    }


    @Then("User should be able to see header {string} in delete pop-up")
    public void userShouldSeeHeaderInDeletePopup(String deleteHeader) {
        orderFulfilmentSteps.userShouldSeeHeaderInDeletePopup(deleteHeader);
    }

    @Then("User should see the message {string} in delete pop-up")
    public void userShouldSeeRespectiveMessageInDeletePopup(String deleteMsg) {
        orderFulfilmentSteps.userShouldSeeRespectiveMessageInDeletePopup(deleteMsg);
    }

    @When("User edits details for ALLOW, TYPE, OPERATOR and VALUE fields")
    public void userEditsAllowTypeOperatorAndValueFields() {
        orderFulfilmentSteps.userEditsAllowTypeOperatorAndValueFields();
    }


    @When("User clicks on SAVE button")
    public void userClicksOnSaveButton() {
        orderFulfilmentSteps.userClicksOnSaveButton();
    }

    @Then("User should be able to see header {string} in Success pop-up")
    public void userShouldSeeSuccessHeader(String successHeader) {
        orderFulfilmentSteps.userShouldSeeSuccessHeader(successHeader);
    }

    @Then("User should see Success message {string} in Success pop-up")
    public void userShouldSeeSuccessMessageInPopup(String successMsg) {
        orderFulfilmentSteps.userShouldSeeSuccessMessageInPopup(successMsg);
    }


    @When("User clicks on close button of success message pop-up")
    public void userClicksOnCloseButtonOfSuccessMessagePopup() {
        orderFulfilmentSteps.userClicksOnCloseButtonOfSuccessMessagePopup();
    }


    @When("User clicks on delete button of delete pop-up")
    public void userClicksOnDeleteButtonOfDeletePopup() {
        orderFulfilmentSteps.userClicksOnDeleteButtonOfDeletePopup();
    }


    @When("User adds details for ALLOW, TYPE, OPERATOR and VALUE fields")
    public void userAddsAllowTypeOperatorAndValueFields() throws InterruptedException {
        orderFulfilmentSteps.userAddsAllowTypeOperatorAndValueFields();
    }

    @When("User clicks on ADD ITEMS button on add pop-up")
    public void userClicksOnAddItemsButtonOnAddPopup() {
        orderFulfilmentSteps.userClicksOnAddItemsButtonOnAddPopup();
    }

    @When("User clicks on ALLOW dropdown")
    public void userClicksOnAllowDropdown() {
        orderFulfilmentSteps.userClicksOnAllowDropdown();
    }

    @Then("User verifies correct data in TYPE dropdown")
    public void userVerifiesCorrectDataInTypeDropdown() {
        orderFulfilmentSteps.userVerifiesCorrectDataInTypeDropdown();
    }

    @When("User clicks on TYPE dropdown")
    public void userClicksOnTypeDropdown() {
        orderFulfilmentSteps.userClicksOnTypeDropdown();
    }

    @Then("User verifies correct data in ITEM dropdown")
    public void userVerifiesCorrectDataInItemDropdown() {
        orderFulfilmentSteps.userVerifiesCorrectDataInItemDropdown();
    }

    @Then("User verifies correct data in OPERATOR dropdown")
    public void userVerifiesCorrectDataInOperatorDropdown() {
        orderFulfilmentSteps.userVerifiesCorrectDataInOperatorDropdown();
    }

    @When("User checks for any existing TIER price, If exists remove it")
    public void userChecksAndRemovesIfAnyTierPriceFound() throws InterruptedException {
        orderFulfilmentSteps.userChecksAndRemovesIfAnyTierPriceFound();
    }

    @When("User click on ADD DIFFERENT TIER PRICES")
    public void userClicksOnAddDifferentTierPricesButton() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnAddDifferentTierPricesButton();
    }


    @When("User enter {string} in {string} member fixed price")
    public void userEntersMemberFixedPrice(String memberFixedPriceValue, String memberFixedPriceTextBoxNo) {
        orderFulfilmentSteps.userEntersMemberFixedPrice(memberFixedPriceValue, memberFixedPriceTextBoxNo);
    }


    @When("User selects {string} Tier")
    public void userSelectsPassedTier(String allTier) {
        orderFulfilmentSteps.userSelectsPassedTier(allTier);
    }


    @When("User click on remove button of Tier price")
    public void userClicksOnRemoveButtonOfTierPrice() {
        orderFulfilmentSteps.userClicksOnRemoveButtonOfTierPrice();
    }

    @Then("User should see header {string} in remove popup")
    public void userShouldSeeRemovePopupHeader(String header) {
        orderFulfilmentSteps.userShouldSeeRemovePopupHeader(header);
    }

    @Then("User should see the message {string} in remove popup")
    public void userShouldSeeRemovePopupMsg(String msg) {
        orderFulfilmentSteps.userShouldSeeRemovePopupMsg(msg);
    }

    @When("User click on CANCEL button of Remove Tier Price popup")
    public void userClicksOnCancelButtonOfRemovePopup() {
        orderFulfilmentSteps.userClicksOnCancelButtonOfRemovePopup();
    }

    @When("User click on YES button of Remove Tier Price popup")
    public void userClicksOnYesButtonOfRemovePopup() {
        orderFulfilmentSteps.userClicksOnYesButtonOfRemovePopup();
    }

    /*
    IF THERE ARE MORE THAN 1 TIER PRICE, THIS CONDITION WONT WORK SINCE WE ARE REMOVING 1 TIER PRICE
    @Then("Tier price should be removed from Configure shipping method screen")
    public void tier_price_should_be_removed_from_configure_shipping_method_screen() {
        orderFulfilmentSteps.userShouldNotSeeAnyTierPriceOrMemberFixedPrice();
    }*/


    @Then("User should see {string}, {string}, {string}, {string} checkbox in selected state")
    public void userShouldSeeAllTierInSelectedState(String tier1, String tier2, String tier3, String tier4) {
        orderFulfilmentSteps.userShouldSeeAllTierInSelectedState(tier1, tier2, tier3, tier4);
    }


    @When("User click on {string} SELECT THE TIER dropdown")
    public void userClicksOnSelectTheTierDropdown(String tierDropdownNo) {
        orderFulfilmentSteps.userClicksOnSelectTheTierDropdown(tierDropdownNo);
    }

    @Then("User should see {string}, {string} checkbox in disabled state")
    public void userShouldSeePassedTiersCheckboxInDisabledState(String tier1, String tier2) {
        orderFulfilmentSteps.userShouldSeePassedTiersCheckboxInDisabledState(tier1, tier2);
    }

    @Then("User should see {string}, {string} checkbox in enabled state")
    public void userShouldSeePassedTiersCheckboxInEnabledState(String tier3, String tier4) {
        orderFulfilmentSteps.userShouldSeePassedTiersCheckboxInEnabledState(tier3, tier4);
    }


    @Then("User should see ADD DIFFERENT TIER PRICES link in disabled state")
    public void userShouldSeeAddDifferentTierPriceLinkInDisabledState() {
        orderFulfilmentSteps.userShouldSeeAddDifferentTierPriceLinkInDisabledState();
    }


    @Then("User should see {string}, {string},{string} & {string} SAVED with Base fixed price as default member fixed price in {string} member fixed price")
    public void userVerifiesSameBaseFixedAndMemberFixedPriceForFourTiers(String string, String string2, String string3, String string4, String memberFixedPriceTextBoxNo) {
        orderFulfilmentSteps.userVerifiesSameBaseFixedAndMemberFixedPriceForFourTiers(memberFixedPriceTextBoxNo);
    }


    @Then("User should see {string} & {string} SAVED with prefilled member fixed price as {string}")
    public void userShouldSeePrefilledMemberFixedPrice(String firstTier, String secondTier, String passedPrefilledMemberFixedPrice) {
        orderFulfilmentSteps.userShouldSeePrefilledMemberFixedPrice(firstTier, secondTier, passedPrefilledMemberFixedPrice);
    }

    @Then("User should see {string} & {string} SAVED with Base fixed price as default member fixed price")
    public void userShouldSeeSameBaseFixedAndMemberFixedPrice(String firstTier, String secondTier) {
        orderFulfilmentSteps.userShouldSeeSameBaseFixedAndMemberFixedPrice(firstTier, secondTier);
    }


    @When("User click on UPLOAD CARRIER STRING")
    public void userClicksOnUploadCarrierString() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnUploadCarrierString();
    }

    @Then("User should see Add items dialog header text as {string}")
    public void userShouldSeeAddItemsDialogHeaderTextAs(String header) {
        orderFulfilmentSteps.userShouldSeeAddItemsDialogHeaderTextAs(header);
    }

    @When("User select {string} radio box")
    public void userSelectSingleOrMultipleCarrierStringRadioBox(String singleCarrierStringRadioBox) {
        orderFulfilmentSteps.userSelectSingleOrMultipleCarrierStringRadioBox(singleCarrierStringRadioBox);
    }

    @When("User enter the valid Carrier String {string}")
    public void userEnterValidCarrierString(String carrierString) {
        orderFulfilmentSteps.userEnterValidCarrierString(carrierString);
    }

    @When("User click on ADD ITEMS button of Add Carrier String Popup")
    public void userClicksOnAddItemsButtonOfAddCarrierStringsPopup() {
        orderFulfilmentSteps.userClicksOnAddItemsButtonOfAddCarrierStringsPopup();
    }

    @Then("User should see uploaded Or Added carrier string {string} on Configure shipping method page")
    public void userShouldSeeAddedCarrierStringOnConfigureSMPage(String addedCarrierString) throws InterruptedException {
        orderFulfilmentSteps.userShouldSeeAddedCarrierStringOnConfigureSMPage(addedCarrierString);
    }


    @When("User see file {string} successfully")
    public void userSeesFileUploadedSuccessfully(String uploadedString) {
        orderFulfilmentSteps.userSeesFileUploadedSuccessfully(uploadedString);
    }

    @Then("User should see uploaded Or Added carrier string {string} file data on Configure shipping method page")
    public void userShouldSeeUploadedCarrierStringFileDataOnConfigureSMPage(String uploadedCarrierStringFile) {
        orderFulfilmentSteps.userShouldSeeUploadedCarrierStringFileDataOnConfigureSMPage(uploadedCarrierStringFile);
    }


    @When("User click on {string} link of Carrier String")
    public void userClickOnUploadNewLinkOfCarrierString(String uploadNewLink) {
        orderFulfilmentSteps.userClickOnUploadNewLinkOfCarrierString(uploadNewLink);
    }


    @Then("User should see header as {string} in upload new carrier strings popup")
    public void userShouldSeeHeaderInUploadNewCarrierStringPopup(String header) {
        orderFulfilmentSteps.userShouldSeeHeaderInUploadNewCarrierStringPopup(header);
    }

    @Then("User should see message text as {string} in upload new carrier strings popup")
    public void userShouldSeeRespectiveMessageInUploadNewCarrierStringPopup(String message) {
        orderFulfilmentSteps.userShouldSeeRespectiveMessageInUploadNewCarrierStringPopup(message);
    }

    @When("User click on YES button of Remove Carrier String popup")
    public void userClicksOnYesButtonOfRemoveCarrierStringPopup() {
        orderFulfilmentSteps.userClicksOnYesButtonOfRemoveCarrierStringPopup();
    }


    @When("User updates most of the fields of shipping methods")
    public void userUpdatesFieldsOfShippingMethod() throws InterruptedException {
        orderFulfilmentSteps.userUpdatesFieldsOfShippingMethod();
    }


    @Then("User validates markets isDisplayed on landing page")
    public void userVerifiesMarketsOnLandingPage(DataTable marketsDataTable) {
        orderFulfilmentSteps.userVerifiesMarketsOnLandingPage(marketsDataTable);
    }


    @When("User click on Find Site ID or Country drop down")
    public void userClickOnFindSiteIdOrCountryDropdown() {
        orderFulfilmentSteps.userClickOnFindSiteIdOrCountryDropdown();
    }

    @Then("User should see {string} site ids in drop down")
    public void userShouldSeePassedSiteIdsInDropdown(String siteId) {
        orderFulfilmentSteps.userShouldSeePassedSiteIdsInDropdown(siteId);
    }


    @When("User clicks on EXPORT CSV button")
    public void userClicksOnExportCsvButton() throws InterruptedException {
        orderFulfilmentSteps.userClicksOnExportCsvButton();
    }

    @Then("User should see data in the downloaded {string} csv file should be same as data in configure shipping method UI")
    public void userShouldSeeDownloadedCsvFileDataSameAsAllowOrBlockListTableData(String fileName) throws IOException {
        orderFulfilmentSteps.userShouldSeeDownloadedCsvFileDataSameAsAllowOrBlockListTableData(fileName);
    }


    @When("User click on close button of {string}")
    public void userClicksOnCloseButtonOfFmOrSmMethod(String configureFmOrSm) {
        orderFulfilmentSteps.userClicksOnCloseButtonOfFmOrSmMethod(configureFmOrSm);
    }


    @Then("User should be able to see the SnackBar error message as {string} in the error")
    public void userShouldSeeCarrierStringSnackBarErrorMsg(String errorMsg) {
        orderFulfilmentSteps.userShouldSeeCarrierStringSnackBarErrorMsg(errorMsg);
    }

    @When("User click on the DISMISS button of SnackBar error message")
    public void userClickOnDismissButtonOfSnackBarErrorMsg() {
        orderFulfilmentSteps.userClickOnDismissButtonOfSnackBarErrorMsg();
    }

    @Then("User should not be able to see the SnackBar error message")
    public void userShouldNotSeeCarrierStringSnackBarErrorMsg() {
        orderFulfilmentSteps.userShouldNotSeeCarrierStringSnackBarErrorMsg();
    }


    @When("User click on EDIT button on the Carrier strings in configure shipping method page")
    public void userClickOnEditButtonOfCarrierStrings() throws InterruptedException {
        orderFulfilmentSteps.userClickOnEditButtonOfCarrierStrings();
    }

    @Then("User should be able to see the Edit Items pop-up with {string} as title of the pop-up")
    public void userShouldSeeCarrierStringsEditPopup(String carrierStrings) {
        orderFulfilmentSteps.userShouldSeeCarrierStringsEditPopup(carrierStrings);
    }

    @When("User click on edit button on the Edit items pop-up")
    public void userClickOnEditButtonOnEditItemsPopup() {
        orderFulfilmentSteps.userClickOnEditButtonOnEditItemsPopup();
    }


    @When("User click on cross icon on the text field")
    public void userClickOnCrossIconOnTextField() {
        orderFulfilmentSteps.userClickOnCrossIconOnTextField();
    }

    @Then("User should be able to see carrier string is cleared from the text box")
    public void userShouldNotSeeCarrierStringOnTextBox() {
        orderFulfilmentSteps.userShouldNotSeeCarrierStringOnTextBox();
    }


    @When("User click on the cross Icon of {string} Edit Items pop-up")
    public void userClickOnCrossIconOfCarrierStringsEditItemsPopup(String carrierStrings) throws InterruptedException {
        orderFulfilmentSteps.userClickOnCrossIconOfCarrierStringsEditItemsPopup(carrierStrings);
    }


    @Then("User should be able to see DISMISS button in the error")
    public void userShouldSeeDismissButtonInTheError() {
        orderFulfilmentSteps.userShouldSeeDismissButtonInTheError();
    }


    @When("User click on delete button on the Edit items pop-up")
    public void userClickOnDeleteButtonOfEditItemsPopup() {
        orderFulfilmentSteps.userClickOnDeleteButtonOfEditItemsPopup();
    }

    @When("User click on the {string} dropdown")
    public void userClickOnCarrierStringsDropdown(String carrierStrings) {
        orderFulfilmentSteps.userClickOnCarrierStringsDropdown(carrierStrings);
    }

    @Then("User should not be able to see the Deleted item in the {string} dropdown list")
    public void userShouldNotSeeDeletedItemInCarrierStringsDropdown(String carrierString) {
        orderFulfilmentSteps.userShouldNotSeeDeletedItemInCarrierStringsDropdown(carrierString);
    }


    @Then("User should be able to see the text box with the text prefilled")
    public void userShouldSeeTextBoxPrefilledWithText() {
        orderFulfilmentSteps.userShouldSeeTextBoxPrefilledWithText();
    }

    @Then("User edit the text which is prefilled")
    public void userEditsPrefilledText() {
        orderFulfilmentSteps.userEditsPrefilledText();
    }

    @When("User click on SAVE button\\(right tick) of {string} popup")
    public void userClickOnRightTickButtonOfCarrierStringsPopup(String carrierStrings) {
        orderFulfilmentSteps.userClickOnRightTickButtonOfCarrierStringsPopup(carrierStrings);
    }


    @Then("User should be able to see changed text in the {string} popup")
    public void userShouldSeeChangedTextInEditCarrierStringsPopup(String carrierStrings) {
        orderFulfilmentSteps.userShouldSeeChangedTextInEditCarrierStringsPopup(carrierStrings);
    }

    @Then("User should be able to see the changed text in Carrier Strings dropdown list")
    public void userShouldSeeChangedTextInCarrierStringsDropdown() {
        orderFulfilmentSteps.userShouldSeeChangedTextInCarrierStringsDropdown();
    }


    @Then("User verifies {string}, {string}, {string}, {string} fulfilment method")
    public void userVerifiesFulfilmentMethodsIsDisplayed(String homeDelivery, String clickAndCollect, String pickUpAndDropOff, String digital) {
        orderFulfilmentSteps.userVerifiesFulfilmentMethodsIsDisplayed(homeDelivery, clickAndCollect, pickUpAndDropOff, digital);
    }

    @When("User enters required carrier string")
    public void userEntersRequiredCarrierString() {
        orderFulfilmentSteps.userEntersRequiredCarrierString();
    }

    @When("User click on carrier string search button")
    public void userClickOnCarrierStringSearchButton() {
        orderFulfilmentSteps.userClickOnCarrierStringSearchButton();
    }

    @Then("User should be able to see single searched carrier string in the Edit items pop-up")
    public void userShouldSeeSingleSearchedCarrierString() {
        orderFulfilmentSteps.userShouldSeeSingleSearchedCarrierString();
    }

    @When("User enters partial carrier string")
    public void userEntersPartialCarrierString() {
        orderFulfilmentSteps.userEntersPartialCarrierString();
    }

    @Then("User should see error message {string} in the Edit items pop-up")
    public void userShouldSeeErrorMsgOnEditItemsPopup(String errorMsg) {
        orderFulfilmentSteps.userShouldSeeErrorMsgOnEditItemsPopup(errorMsg);
    }

    @When("User clears the pre-filled text of the carrier string")
    public void userClearsPrefilledTextOfCarrierString() {
        orderFulfilmentSteps.userClearsPrefilledTextOfCarrierString();
    }

    @Then("User should be able to see the cross button at the end of {string} field")
    public void userShouldSeeCrossButtonOfCarrierString(String carrierString) {
        orderFulfilmentSteps.userShouldSeeCrossButtonOfCarrierString(carrierString);
    }

    @Then("User should be able to see the right tick button at the end of {string} popup field")
    public void userShouldSeeRightTickButtonOfCarrierString(String carrierString) {
        orderFulfilmentSteps.userShouldSeeRightTickButtonOfCarrierString(carrierString);
    }

    @When("User click on cross button of {string} field")
    public void userClickOnCrossButtonOfCarrierStringField(String carrierString) {
        orderFulfilmentSteps.userClickOnCrossButtonOfCarrierStringField(carrierString);
    }

    @Then("User should be able to see no changes in {string} text field")
    public void userShouldSeeNoChangesInCarrierStringTextField(String carrierString) {
        orderFulfilmentSteps.userShouldSeeNoChangesInCarrierStringTextField(carrierString);
    }

    @Then("User should be able to see the pen icon at the end of {string} popup field")
    public void userShouldSeePenIconAtTheEndOfCarrierString(String string) {
        orderFulfilmentSteps.userShouldSeePenIconAtTheEndOfCarrierString();
    }

    @When("User click on the Edit\\(pen) icon of multiple {string}")
    public void userClicksOnEditButtonOfMultipleCarrierStrings(String carrierString) {
        orderFulfilmentSteps.userClicksOnEditButtonOfMultipleCarrierStrings(carrierString);
    }

    @Then("User should be able to see the inline edit text, cross button, right tick button of multiple {string}")
    public void userShouldSeeInlineEditTextCrossAndRightTickButton(String carrierString) {
        orderFulfilmentSteps.userShouldSeeInlineEditTextCrossAndRightTickButton(carrierString);
    }

    @Then("User should be able to see {string} and {string} fields")
    public void userShouldSeePassedFields(String memberFixedPriceField, String selectTheTierField) {
        orderFulfilmentSteps.userShouldSeePassedFields(memberFixedPriceField, selectTheTierField);
    }

    @When("User empty the pre-filled\\(if already filled) text of THRESHOLD and SHIPMENT UP SELL fields")
    public void userClearsPrefilledTextOfThresholdAndShipmentUpSellFields() {
        orderFulfilmentSteps.userClearsPrefilledTextOfThresholdAndShipmentUpSellFields();
    }

    @Then("User stores all shipping method positions under {string} order fulfilment method")
    public void userStoresAllShippingMethodPositionsUnderPassedShippingMethod(String passedSm) {
        orderFulfilmentSteps.userStoresAllShippingMethodPositionsUnderPassedShippingMethod(passedSm);
    }

    @Then("User clicks on shipping method position dropdown")
    public void userClickOnShippingMethodPositionDropdown() throws InterruptedException {
        orderFulfilmentSteps.userClickOnShippingMethodPositionDropdown();
    }

    @Then("User should be able to see the position from {int} to {int} except any existing shipping method position")
    public void userShouldSeePositionsFromOneToHundredInSmPositionDropdown(Integer int1, Integer int2) {
        orderFulfilmentSteps.userShouldSeePositionsFromOneToHundredInSmPositionDropdown();
    }

    @Then("User should see {string} error message on {string} field with Asterisk symbol")
    public void userShouldSeeErrorMsgOnPassedField(String string, String fieldName) {
        orderFulfilmentSteps.userShouldSeeErrorMsgOnPassedFieldWithAsteriskSymbol(fieldName);
    }

    @When("User clears the searched carrier string")
    public void userClearsSearchedString() {
        orderFulfilmentSteps.userClearsSearchedString();
    }

    @Then("User should be able to see carrier strings list")
    public void userShouldSeeCarrierStringList(){
        orderFulfilmentSteps.userShouldSeeCarrierStringList();
    }

    @When("User clicks on close icon of Validation header popup")
    public void userClicksOnCloseIconOfValidationHeaderPopup() {
        orderFulfilmentSteps.userClicksOnCloseIconOfValidationHeaderPopup();
    }

    @Then("User clears VALUE field")
    public void userClearsValueField() {
        orderFulfilmentSteps.userClearsValueField();
    }

    @Then("User verifies that {string} is displayed under COMN menu")
    public void userVerifiesPassedModuleIsDisplayedUnderComnMenu(String moduleName) {
        orderFulfilmentSteps.userVerifiesPassedModuleIsDisplayedUnderComnMenu(moduleName);
    }

    @When("User click on {string} on COMN Menu to expand")
    public void userClickOnFulfilmentModuleToExpand(String fulfilmentModule) {
        orderFulfilmentSteps.userClickOnFulfilmentModuleToExpand(fulfilmentModule);
    }

    @Then("User verifies {string} is displayed under Fulfilment COMN menu")
    public void userVerifiesPassedSubMenuIsDisplayedUnderFulfilmentComnMenu(String subMenu) {
        orderFulfilmentSteps.userVerifiesPassedSubMenuIsDisplayedUnderFulfilmentComnMenu(subMenu);
    }

    @When("User click on {string}  link under Fulfilment COMN menu")
    public void userClickOnPassedSubMenuUnderFulfilmentComnMenu(String subMenu) {
        orderFulfilmentSteps.userClickOnPassedSubMenuUnderFulfilmentComnMenu(subMenu);
    }

    @When("User click on {string} COMN menu to collapse")
    public void userClickOnFulfilmentModuleToCollapse(String fulfilmentModule) {
        orderFulfilmentSteps.userClickOnFulfilmentModuleToCollapse(fulfilmentModule);
    }

    @Then("User verifies {string} sub menu is on hidden  mode")
    public void userVerifiesPassedSubMenuIsHidden(String subMenu) {
        orderFulfilmentSteps.userVerifiesPassedSubMenuIsHidden(subMenu);
    }

    @Then("User verifies {string} menu is on collapsed mode")
    public void userVerifiesPassedMenuIsOnCollapsedMode(String menu) {
        orderFulfilmentSteps.userVerifiesPassedMenuIsOnCollapsedMode(menu);
    }

    @Then("User verifies that COMN module names is displayed in below order")
    public void userVerifiesComnModulesOrder(DataTable comnModules) {
        orderFulfilmentSteps.userVerifiesComnModulesOrder(comnModules);
    }

    @Then("User verifies that the Carrier string should be in sorted order")
    public void userVerifiesCarrierStringsShouldBeInSortedOrder() {
        orderFulfilmentSteps.userVerifiesCarrierStringsShouldBeInSortedOrder();
    }

    @Then("User verifies that the Carrier String should be deleted")
    public void userVerifiesCarrierStringIsDeleted() {
        orderFulfilmentSteps.userVerifiesCarrierStringIsDeleted();
    }

    @Then("User verifies that the Carrier strings should be in sorted order in {string} Shipping Method Page")
    public void userVerifiesCarrierStringsShouldBeInSortedOrderInPassedShippingMethodPage(String passedSmPage) {
        orderFulfilmentSteps.userVerifiesCarrierStringsShouldBeInSortedOrderInPassedShippingMethodPage(passedSmPage);
    }

    @When("User click on Carrier Strings dropdown on {string} shipping method page")
    public void userClickOnCarrierStringsDropdownOnPassedSmPage(String string) {
        orderFulfilmentSteps.userClickOnCarrierStringsDropdownOnPassedSmPage();
    }

    @When("User click on ADD ITEMS button of Edit items pop-up")
    public void userClickOnAddItemsButtonOfEditItemsPopup() {
        orderFulfilmentSteps.userClickOnAddItemsButtonOfEditItemsPopup();
    }

    @Then("User verifies {string} on {string} field")
    public void userVerifiesErrorMsgOnPassedDeliveryDaysField(String errorMsg, String deliveryDaysField) {
        orderFulfilmentSteps.userVerifiesErrorMsgOnPassedDeliveryDaysField(errorMsg, deliveryDaysField);
    }

    @Then("User verifies {string} error message on {string} popup on {string} field with Asterisk symbol")
    public void userVerifiesPassedErrorMsgOnPassedFieldWithAsteriskSymbol(String errorMsg, String string2, String fieldName) {
        orderFulfilmentSteps.userVerifiesPassedErrorMsgOnPassedFieldWithAsteriskSymbol(errorMsg, fieldName);
        orderFulfilmentSteps.userShouldSeeErrorMsgOnPassedFieldWithAsteriskSymbol(fieldName);
    }

    @When("User selects {string} from {string} dropdown")
    public void userSelectsPassedValueFromDropdown(String value, String fieldName) {
        orderFulfilmentSteps.userSelectsPassedValueFromDropdown(value, fieldName);
    }

    @When("User clicks on OPERATOR dropdown")
    public void userClicksOnOperatorDropdown() {
        orderFulfilmentSteps.userClicksOnOperatorDropdown();
    }

    @And("User enter {string} in {string} field")
    public void userEnterPassedValueInPassedField(String data, String fieldName) {
        orderFulfilmentSteps.userEnterPassedValueInPassedField(data, fieldName);
    }

    @When("User clicks on {string} button through {string} key")
    public void userClicksOnButtonThroughKeyBoard(String string, String key) {
        orderFulfilmentSteps.userClicksOnButtonThroughKeyBoard(key);
    }

    @Then("User verifies {string} button on {string} page")
    public void userVerifiesAddCarrierStringButtonOnCreateShippingMethodPage(String button, String string2) {
        orderFulfilmentSteps.userVerifiesAddCarrierStringButtonOnCreateShippingMethodPage();
    }

    @When("User clicks on {string} text outside the search bar")
    public void userClicksOnCarrierStringsTextOutsideCarrierStringSearchBox(String string) {
        orderFulfilmentSteps.userClicksOnCarrierStringsTextOutsideCarrierStringSearchBox();
    }

    @Then("User verifies edited carrier string is displayed")
    public void userVerifiesEditedCarrierStringIsDisplayed() {
        orderFulfilmentSteps.userVerifiesEditedCarrierStringIsDisplayed();
    }

    @When("User deletes all carrier strings except {string}")
    public void userDeletesAllCarrierStringsExceptNewlyCreated(String newlyCreatedCarrierString)  {
        orderFulfilmentSteps.userDeletesAllCarrierStringsExceptNewlyCreated(newlyCreatedCarrierString);
    }

    @Then("User verifies deleted carrier strings is not displayed")
    public void userVerifiesDeletedCarrierStringsIsNotDisplayed() {
        orderFulfilmentSteps.userVerifiesDeletedCarrierStringsIsNotDisplayed();
    }

    @When("User checks atleast {int} Items are present in {string} ITEMS table")
    public void userChecksAtleastTwoAllowedOrBlockedItemsIsPresent(int noOfItems, String string) {
        orderFulfilmentSteps.userChecksAtleastTwoAllowedOrBlockedItemsIsPresent();
    }

    @When("User adds {int} items if not present")
    public void userAddsTwoItemsIfNotPresent(int expectedNoOfItems) throws InterruptedException {
        orderFulfilmentSteps.userAddsTwoItemsIfNotPresent(expectedNoOfItems);
    }

    @Then("User validates that {string} column is sorted in {string} order by default")
    public void userValidatesByDefaultAllowedOrBlockedTableColumnIsSortedInAscendingOrder(String allowOrBlockItemTableColumnName, String sortingOrder) {
        orderFulfilmentSteps.userValidatesByDefaultAllowedOrBlockedTableColumnIsSortedInAscendingOrder(allowOrBlockItemTableColumnName, sortingOrder);
    }

    @When("User click on {string} column")
    public void userClicksOnAllowedOrBlockedTableColumn(String allowOrBlockItemTableColumn) {
        orderFulfilmentSteps.userClicksOnAllowedOrBlockedTableColumn(allowOrBlockItemTableColumn);
    }

    @Then("User validates that {string} column is sorted in {string} order")
    public void userValidatesAllowedOrBlockedTableColumnIsSortedInAscendingOrDescendingOrder(String allowOrBlockItemTableColumnName, String sortingOrder) {
        orderFulfilmentSteps.userValidatesAllowedOrBlockedTableColumnIsSortedInAscendingOrDescendingOrder(allowOrBlockItemTableColumnName, sortingOrder);
    }


    @When("User click on {string} of shipping method of {string} fulfilment method")
    public void userClicksOnEditLinkOfShippingMethod(String link, String fulfilmentMethod) {
        orderFulfilmentSteps.userClicksOnLinkOfShippingMethod(link, fulfilmentMethod);
    }


    @Then("User verifies {string} button is Visible")
    public void userVerifiesDeleteButtonIsVisible(String string) {
        orderFulfilmentSteps.userVerifiesDeleteButtonIsVisible();
    }

    @When("User clicks on fulfilment {string} button")
    public void userClicksOnFulfilmentModuleButton(String button) {
        orderFulfilmentSteps.userClicksOnFulfilmentModuleButton(button);
    }

    @Then("User verifies that the {string} button is not displayed")
    public void userVerifiesDeleteButtonIsNotDisplayed(String string) {
        orderFulfilmentSteps.userVerifiesDeleteButtonIsNotDisplayed();
    }


    @Then("User gets existing {string} of any random shipping method")
    public void userGetsExistingCustomIdOfRandomShippingMethod(String customId) {
        orderFulfilmentSteps.userGetsExistingCustomIdOfRandomShippingMethod(customId);
    }

    @Then("User verifies the newly created shipping method's {string} is not matched with any other")
    public void userVerifiesNewlyCreatedShippingMethodCustomIdNotMatchedWithOther(String newCustomId) throws InterruptedException {
        orderFulfilmentSteps.userVerifiesNewlyCreatedShippingMethodCustomIdNotMatchedWithOther(newCustomId);
    }

    @Then("User verifies below {string} is displayed under fulfilment tab")
    public void userVerifiesFulfilmentMethodFieldsIsDisplayed(String string, DataTable fulfilmentMethodFieldsDataTable) {
       orderFulfilmentSteps.userVerifiesFulfilmentMethodFieldsIsDisplayed(fulfilmentMethodFieldsDataTable);
    }

    @Then("User stores values of below {string}")
    public void userStoresValuesOfFulfilmentMethodFields(String string, DataTable fulfilmentMethodFieldsDataTable) {
        orderFulfilmentSteps.userStoresValuesOfFulfilmentMethodFields(fulfilmentMethodFieldsDataTable);
    }

    @Then("User verifies {string} of {string} are same")
    public void userVerifiesStoredFulfilmentMethodFieldsValuesAreSame(String string, String string2) {
        orderFulfilmentSteps.userVerifiesStoredFulfilmentMethodFieldsValuesAreSame();
    }

    @And("User enables {string} fulfilment method with one {string} shipping method")
    public void userEnablesFulfilmentMethodWithOneActiveShippingMethod(String fulfilmentMethod, String activeState) throws InterruptedException {
        orderFulfilmentSteps.userEnablesFulfilmentMethodWithOneActiveShippingMethod(fulfilmentMethod, activeState);
    }

    @Then("User validates only selected shipping method isDisplayed")
    public void userValidatesOnlySelectedShippingMethodIsDisplayed() {
        orderFulfilmentSteps.userValidatesOnlySelectedShippingMethodIsDisplayed();
    }
    @Then("User verifies {string} error message {string} on {string} field")
    public void userVerifiesErrorMessageIsDisplayedOnFieldOrNot(String errorMessage, String displayState, String fieldName) {
        orderFulfilmentSteps.userVerifiesErrorMessageIsDisplayedOnFieldOrNot(errorMessage, displayState, fieldName);
    }

    @And("User disable all shipping methods of {string} fulfilment method")
    public void userDisableAllShippingMethodsOfFulfilmentMethod(String fulfilmentMethod) {
        orderFulfilmentSteps.userDisableAllShippingMethodsOfFulfilmentMethod(fulfilmentMethod);
    }

    @And("User validates {string} isDisplayed in below order")
    public void userValidatesColumnDataIsDisplayedInBelowOrder(String columnName, DataTable columnDataTable) {
        orderFulfilmentSteps.userValidatesColumnDataIsDisplayedInBelowOrder(columnName, columnDataTable);
    }

    @And("User validates {string} shipping methods count is zero")
    public void userValidatesShippingMethodsCountIsZero(String activeOrInactiveShippingMethod) {
        orderFulfilmentSteps.userValidatesShippingMethodsCountIsZero(activeOrInactiveShippingMethod);
    }
}



package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.PaymentsSteps;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import net.thucydides.core.annotations.Steps;

public class PaymentsDefinitions {
    @Steps
    PaymentsSteps paymentsSteps;

    @Then("User validates channels in channel dropdown isDisplayed")
    public void userValidatesChannelsIsDisplayedInPaymentChannelDropdown() {
        paymentsSteps.userValidatesChannelsIsDisplayedInPaymentChannelDropdown();
    }

    @Then("User verifies {string} is displayed in {string} field")
    public void userVerifiesPassedValueIsDisplayedOnPassedField(String passedValue, String fieldName) {
        paymentsSteps.userVerifiesPassedValueIsDisplayedOnPassedField(passedValue, fieldName);
    }

    @And("User click outside {string} field")
    public void userClickOutsideField(String field) {
        paymentsSteps.userClickOutsideField(field);
    }
}


package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;

import com.adidas.tpAdidasSerenity.fe.cucumberSteps.ProductsSteps;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import jxl.read.biff.BiffException;
import net.thucydides.core.annotations.Steps;

import java.io.IOException;

public class ProductsDefinitions {
    @Steps
    ProductsSteps productsSteps;


    @Then("User validates attributes from {string} on {string} products landing page")
    public void userValidatesStoredAttributesOnProductsPage(String attributesCsvFile, String region) throws IOException, BiffException {
        productsSteps.userValidatesStoredAttributesOnProductsPage(attributesCsvFile, region);
    }


    @When("User selects {int} attributes from {string}")
    public void userSelectsPassedAttributesFromExcel(Integer noOfAttributes, String excelFile) throws BiffException, IOException {
        productsSteps.userSelectsPassedAttributesFromExcel(noOfAttributes, excelFile);
    }


    @Then("User verifies details of {int} selected attributes from {string}")
    public void userVerifiesDetailsOfSelectedAttributesFrom(int noOfAttributesSelected, String excelFile) throws BiffException, IOException {
        productsSteps.userVerifiesSelectedAttributes(noOfAttributesSelected, excelFile);
    }


    @When("User do not selects any attribute from the list of attributes")
    public void userDoNotSelectAnyAttributesFromListOfAttributes() {
        //Does nothing
    }

    @Then("User verifies details of default attributes from {string}")
    public void userVerifiesDefaultAttributes(String defaultAttributesExcelFile) throws BiffException, IOException {
        productsSteps.userVerifiesDefaultAttributes(defaultAttributesExcelFile);
    }


    @Then("User verifies that other checkBoxes is disabled")
    public void userVerifiesOtherCheckboxesInDisabledState() {
        productsSteps.userVerifiesOtherCheckboxesInDisabledState();
    }

    @Then("User should see valid countries in product page market drop down")
    public void userShouldSeeValidCountriesInProductPageMarketDropdown() {
        productsSteps.userShouldSeeValidCountriesInProductPageMarketDropdown();
    }


    @And("User verifies available search result for searched product Id {string}")
    public void userVerifiesAvailableSearchResult(String searchedProductId) {
        productsSteps.userVerifiesAvailableSearchResult(searchedProductId);
    }


    @Then("User should be able to see the {string} landing page with {string} in the Market selection dropdown at the top right corner of the page")
    public void userShouldSeePassedModuleWithMarketSelectionDropdownAtTopRightSide(String comNextModule, String region) {
        productsSteps.userShouldSeePassedModuleWithMarketSelectionDropdownAtTopRightSide(comNextModule, region);
    }

    @Then("User selects pagination dropdown values from {string} and checks the records")
    public void userSelectsNumFromStoredPaginationFileAndValidates(String paginationDropdownNoCsvFile) {
        productsSteps.userSelectsNumFromStoredPaginationFileAndValidates(paginationDropdownNoCsvFile);
    }


    @Then("User verifies product id's less than or equal to searched product id's from {string} csv file")
    public void userVerifiesProductIdLessThanOrEqualToSearchedProductId(String multipleProductIdCsvFile) {
        productsSteps.userVerifiesProductIdLessThanOrEqualToSearchedProductId(multipleProductIdCsvFile);
    }


    @When("User do not selects any product ids in the detail page")
    public void userDoNotSelectAnyProductIdsInProductDetailPage() {
        //Does nothing
    }


    @When("User selects {int} Product Ids on Products detail page")
    public void userSelectsPassedProductIdsOnProductDetailPage(int noOfProductIds) {
        productsSteps.userSelectsPassedProductIdsOnProductDetailPage(noOfProductIds);
    }

    @When("User selects {string} option")
    public void userSelectsPassedAttributesOption(String passedAttributes) {
        productsSteps.userSelectsPassedAttributesOption(passedAttributes);
    }


    @Then("User verifies {string} csv file exported successfully")
    public void userVerifiesPassedCsvFileExportedSuccessfully(String exportedCsvFileName) throws IOException, InterruptedException {
        productsSteps.userVerifiesPassedCsvFileExportedSuccessfully(exportedCsvFileName);
    }

    @Then("User verifies exported csv file {string} attributes matches with selected attributes")
    public void userVerifiesSameNoOfAttributesAndProductIdInExportedFile(String exportedCsvFileName) throws BiffException, IOException {
        productsSteps.userVerifiesSameNoOfAttributesAndProductIdInExportedFile(exportedCsvFileName);
    }


    @When("User selects {string} attribute")
    public void userSelectsPassedAttribute(String passedAttribute) {
        productsSteps.userSelectsPassedAttribute(passedAttribute);
    }

    @When("User click on Expand Icon of {string} attribute")
    public void userClickOnExpandIconOfPassedAttribute(String passedAttribute) {
        productsSteps.userClickOnExpandIconOfPassedAttribute(passedAttribute);
    }

    @Then("User verifies complete data on {string} expand attribute popup")
    public void userVerifiesCompleteDataOnProductAttributeExpandPopup(String passedAttribute) {
        productsSteps.userVerifiesCompleteDataOnProductAttributeExpandPopup(passedAttribute);
    }


    @Then("User verifies searched invalid product Id {string} in error popup")
    public void userVerifiesSearchedInvalidProductIdInErrorPopup(String invalidProductId) {
        productsSteps.userVerifiesSearchedInvalidProductIdInErrorPopup(invalidProductId);
    }

    @Then("User verifies searched multiple invalid product Id's {string} in error popup")
    public void userVerifiesSearchedMultipleInvalidProductIdsInErrorPopup(String invalidMultipleProductIds) {
        productsSteps.userVerifiesSearchedMultipleInvalidProductIdsInErrorPopup(invalidMultipleProductIds);
    }


    @Then("User verifies data and file is exported to {string} successfully of all {int} tabs on {string} region")
    public void userChecksExportedDataWithUIData(String exportedFileName, Integer int1, String region) throws IOException, InterruptedException {
        productsSteps.userChecksExportedDataWithUIData(exportedFileName, region);
    }

    @When("User click on back button on {string} details page")
    public void userClickOnBackButtonOfProductsDetailPage(String products) {
        productsSteps.userClickOnBackButtonOfProductsDetailPage(products);
    }


    @Then("User verifies fields from sheet {int} of {string} file")
    public void userVerifiesSameFieldsOnExcelFileAndSingleProductDetailPageUI(int sheetNo, String singleProductDetailPageFieldsExcelFile) throws BiffException, IOException {
        productsSteps.userVerifiesSameFieldsOnExcelFileAndSingleProductDetailPageUI(sheetNo, singleProductDetailPageFieldsExcelFile);
    }


    @Then("User verifies that user is in page {int}")
    public void userVerifiesThatUserIsInPassedPage(int pageNo) {
        productsSteps.userVerifiesThatUserIsInPassedPage(pageNo);
    }

    @When("User opens {string} in new tab")
    public void userOpensLinkInNewTab(String tabName) {
        productsSteps.userOpensPassedTabInNewPage(tabName);
    }

    @And("User closes the tab and redirects back to previous tab")
    public void userClosesTheTabAndRedirectsBackToPreviousTab() {
        productsSteps.userClosesAndRedirectsBackToPreviousTab();
    }

    @Then("User verifies {int} attributes of {string} {string}")
    public void userVerifiesStateOfProductPageAttributes(int noOfAttributes, String productPageAttributesExcelFile, String checkboxState) throws BiffException, IOException, InterruptedException {
        productsSteps.userVerifiesStateOfProductPageAttributes(noOfAttributes, productPageAttributesExcelFile, checkboxState);
    }


}


package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;


import com.adidas.tpAdidasSerenity.fe.cucumberSteps.TaxationStepsCA;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import net.thucydides.core.annotations.Steps;

import java.io.IOException;

public class TaxationDefinitionsCA {

    @Steps
    TaxationStepsCA taxationStepsCA;

    @Then("ALL provinces with tax rates page is loaded")
    public void userVerifiesAllProvincesWithTaxRates() {
        taxationStepsCA.userVerifiesAllProvincesWithTaxRates();
    }

    @Then("User verifies error message {string}")
    public void userVerifiesErrorMessage(String errorMessage) {
        taxationStepsCA.userVerifiesErrorMessage(errorMessage);
    }


    @Given("User is on Taxation Page in Canada Region")
    public void userIsOnTaxationPageInCanadaRegion() throws IOException {
        taxationStepsCA.userIsOnTaxationPageInCanadaRegion();
    }

    @Then("User not able to see the Taxation tab in left side navigation menu")
    public void userShouldNotSeeTaxationTabInLeftNavMenu() {
        taxationStepsCA.userShouldNotSeeTaxationTabInLeftNavMenu();
    }


    @Then("ACCTAX, DEFAULTTAX, FULLTAX, KIDSTAX etc. is SUM of HST, GST, PST, QST etc.")
    public void userChecksSumOfDifferentTaxRates() throws InterruptedException {
        taxationStepsCA.userChecksSumOfDifferentTaxRates();
    }



    @Then("User verifies {string} on Tax Rate results page")
    public void userVerifiesProvinceCodeOnTaxRatesPage(String provinceCode) throws InterruptedException {
        taxationStepsCA.userVerifiesProvinceCode(provinceCode);
        taxationStepsCA.userVerifiesSingleProvinceData();
    }

}


package com.adidas.tpAdidasSerenity.fe.serenityDefinitions;


import com.adidas.tpAdidasSerenity.fe.cucumberSteps.TaxationStepsWE;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import net.thucydides.core.annotations.Steps;

public class TaxationDefinitionsWE {

    @Steps
    TaxationStepsWE taxationStepsWE;

    @Then("User verifies valid EU countries is displayed in alphabetic order")
    public void userVerifiesValidEuCountriesInAlphabeticalOrder() {
        taxationStepsWE.userVerifiesValidEuCountriesInAlphabeticalOrder();
    }

    @And("User select {string}")
    public void userSelectCountry(String country) {
        taxationStepsWE.userSelectCountry(country);
    }

    @Then("User verifies {string} country and {string} country code")
    public void userVerifiesSameCountryAndCountryCode(String country, String countryCode) {
        taxationStepsWE.userVerifiesSameCountryAndCountryCode(country, countryCode);
    }


    @When("User do not select Site ID")
    public void userDoNotSelectSiteID() {
        taxationStepsWE.userDoNotSelectSiteID();
    }

    @When("User click on Tax Rates {string} country")
    public void userClickOnTaxRatesPageCountry(String country) {
        taxationStepsWE.userClickOnTaxRatesPageCountry(country);
    }
}


utility/enums/eumUtils/

package com.adidas.tpAdidasSerenity.fe.utility.enums;

import com.adidas.tpAdidasSerenity.fe.utility.enums.enumUtils.EnumGenerator;
import com.adidas.tpAdidasSerenity.fe.utility.enums.enumUtils.IEnumName;

public enum CommonEnum implements IEnumName<CommonEnum> {

    //LINKS
    MODULE_LINK_MENU("Checkout", "Payment", "Tax Rates", "Product", "Inventory", "Configure", "Basket", "Audit Trail", "Bulk Update"),
    EDIT_ADDRESS_MANAGEMENT_LINK("Edit"),
    FULFILMENT_SITE_ID("Adidas-XX"),
    SHIPPING_METHOD_DELETE_LINK("delete", "delete->Configure Fulfilment Methods Screen"),
    SHIPPING_METHOD_EDIT_LINK("Edit(Default)", "Edit(Non-Default)"),
    EDIT_SHIPPING_METHOD_DELETE_LINK("delete->Edit Shipping Method Screen"),


    //FIELDS
    PAYMENT_FIELDS("Min Order", "Max Order", "min version", "max version"),
    INVENTORY_RESULTPAGE_FIELDS("FirstProduct", "SearchID", "SearchIcon"),
    PRODUCT_ID_SINGLE("Products Id(Single)"),
    PRODUCT_ID_MULTIPLE("Products Id(Multiple)"),
    PAGINATION_TEXT_BOX("Pagination text box"),
    INVENTORY_SEARCH_BOX("Inventory Id(Single)", "Inventory Id(Multiple)"),
    FULFILMENT_METHODS("Home Delivery", "Click and Collect", "Pick Up, Drop Off", "Digital"),
    SHIPPING_METHOD_CUSTOM_ID("Custom ID", "CUSTOM ID"),
    SHIPPING_METHOD_TEXTBOXES("Based Fixed" ,"Threshold", "Minimum", "Maximum"),
    SHIPPING_METHOD_LOCALE_NAME("Name"),
    NEWLY_CREATED_SHIPPING_METHOD("Newly Created Shipping Method"),
    DEFAULT_SHIPPING_METHOD("Default Shipping Method"),
    NON_DEFAULT_SHIPPING_METHOD("Non-Default Shipping Method"),
    COMBINE_WITH_GIFT_CARD_FIELD("combine with gift card"),
    ADDRESS_MANAGEMENT_PLACEHOLDER_FIELDS("firstName", "lastName", "addressLine1", "addressLine2",
            "city", "stateCode", "provinceCode","postalCode", "country", "phoneNumber", "email",
            "addressId", "addressType", "houseNumber", "apartmentNumber"),
    BASKET_TABLE_FIELDS("First Name->Table Column", "Last Name->Table Column", "Email->Table Column", "Searched Email"),
    TAXRATES_PROVINCECODE_FIELD("province Code [Optional]"),
    CURRENT_DATE("Current"),
    DATE_AND_TIME_FIELD("Date And Time"),
    INVENTORY_DOWNLOADED_FILE_FIELDS("Inventory fields"),
    ALLOW_OR_BLOCK_VALUE_FIELD("Value"),
    MEMBER_FIXED_PRICE_FIELDS("1->Member Fixed Price", "2->Member Fixed Price", "3->Member Fixed Price", "4->Member Fixed Price"),
    FIRST_PAYMENT_METHOD("First Payment Method"),
    INVENTORY_RESULTS_SIZE_COLUMN_COUNTRY_CODES("US", "CA", "FR"),
    PRODUCT_TABLE_FIELDS("Name->Table Column", "Searched Name", "Searched Is Orderable Value", "Searched Is in Preview Value"),








    //BUTTONS
    SEARCH_BUTTON("search", "Find Tax Rates", "Search"),
    EXPORT_JSON_BUTTON("Export Json", "EXPORT JSON"),
    SAVE_BUTTON("Save", "save", "SAVE"),
    CLOSE_BUTTON("close X", "close", "CLOSE"),
    BACK_BUTTON("back", "BACK", "Back"),
    PAGINATION_PREVIOUS_ARROW_BUTTON("Previous Arrow", "previous arrow"),
    PAGINATION_NEXT_ARROW_BUTTON("Next Arrow", "next arrow"),
    EXPORT_BUTTON("Export", "export"),
    VIEW_BUTTON("VIEW", "View", "View(Eye)", "Inspect-VIEW"),
    MORE_INFO_BUTTON("More info", "MORE INFO"),
    MORE_INFO_CLOSE_BUTTON("More info close", "MORE INFO CLOSE"),
    INVENTORY_SEARCH_BUTTON("Inventory Search(->)"),
    ADD_SHIPPING_METHOD_BUTTON("Add Shipping Method", "ADD SHIPPING METHOD"),
    UPLOAD_CARRIER_STRING_BUTTON("Add Carrier String", "upload carrier string", "Upload Carrier String"),
    YES_BUTTON("Yes", "YES"),
    ADD_ITEMS_BUTTON("Add Items", "ADD ITEMS", "add items", "Add", "ADD"),
    FILTER_BUTTON("Filter", "filter"),
    APPLY_BUTTON("Apply", "apply"),
    CHECKOUT_SEARCH_BUTTON("Checkout search"),
    CHECK_AVAILABILITY_BUTTON("Check Availability"),
    DISMISS_BUTTON("Dismiss", "dismiss"),
    DOWNLOAD_BUTTON("download", "Download"),
    FULFILMENT_CLOSE_BUTTON("Configure Fulfilment Method->close X", "Edit Shipping Method->close X", "Create Shipping Method->close X"),
    BASKET_TABLE_SEARCH_FIELDS_SEARCH_BUTTONS("Email->Search", "First Name->Search", "Last Name->Search"),
    BASKET_TABLE_SEARCH_FIELDS_CLOSE_BUTTONS("Email->close X", "First Name->close X", "Last Name->close X"),
    CHECKOUT_TAXATION_DETAIL_PAGE_BUTTON("Taxation Detail Page"),
    DATE_CLOSE_BUTTON("From->X", "To->X"),
    PREVIOUS_DATE_BUTTON("Previous Date"),
    NEXT_DATE_AFTER_SPECIFIC_MONTHS_BUTTON("Next Date after 6 months"),
    PREVIOUS_DATE_BEFORE_SPECIFIC_DAYS("Date before 7 days"),
    ALLOW_OR_BLOCK_SAVE_BUTTON("Allow/Block popup Save"),
    SET_MEMBERSHIP_PRICE_BUTTON("SET MEMBERSHIP PRICE"),
    MEMBERSHIP_PRICE_ADD_MORE_BUTTON("Add More"),
    ALLOW_OR_BLOCK_VIEW_POPUP_CLOSE_BUTTON("Allowed/Blocked items->close X"),
    ALLOW_OR_BLOCK_POPUP_DELETE_BUTTON("Allow/Block Items popup->Delete"),
    PAYMENT_METHOD_POPUP_CLOSE_BUTTON("Payment Edit->close X"),
    CARRIER_STRINGS_DELETE_ITEM_POPUP_DELETE_BUTTON("Carrier String delete item popup->delete"),
    RESET_BUTTON("Reset", "reset"),
    PRODUCT_TABLE_SEARCH_FIELDS_SEARCH_BUTTONS("Name->Search"),
    PRODUCT_TABLE_SEARCH_FIELDS_CLOSE_BUTTONS("Name->close X"),


    //RADIO BUTTONS
    ADD_CARRIER_STRINGS_RADIO_BUTTON("Add single carrier string", "Add multiple carrier string"),

    //POPUP
    SUCCESS_HEADER_POPUP_OR_SUCCESS_BUTTON("Success", "success"),
    FAILURE_HEADER_POPUP("Error", "error",  "Are you sure you want to move to the next page?", "can’t disable the fulfilment method"),
    VALIDATION_HEADER_POPUP( "Export products list", "Add Carrier Strings", "Inspect Json", "Are you sure you want to update?", "Validation",
            "Are you sure you want to delete shipping method?", "Confirmation", "delete item"),

    SUCCESS_HEADER_POPUP_MSG("The payments have been edited successfully.", "The fulfilment method has been edited successfully.", "The Shipping method has been saved successfully.",
            "The shipping method was deleted.", "The list has been updated successfully.", "Fulfilment method has been saved successfully.", "Shipping method has been saved successfully.",
            "The list has been deleted successfully.", "Shipping method has been saved successfully."),
    FAILURE_HEADER_POPUP_MSG("Please select a product to export.", "If you move to another page, the selection of products will be disabled and you will need to select again in each page to export."
    , "Custom Id should be unique", "You can’t disable this fulfilment method as one or more shipping methods are enabled for this method.",
            "Some Products IDs could not be loaded. Check the information and try again later.", "You need to fill all the mandatory fields in Configuration and Content tabs to save.", "Please add a valid carrier string"),
    INVENTORY_FAILURE_HEADER_POPUP_MSG("Products could not be uploaded"),
    VALIDATION_HEADER_POPUP_MESSAGE("This change will affect the availability in shipping methods.", "In Fulfilment method you have the same STATUS, which you have selected.",
            "Invalid shipping method to enable/disable", "This change may affect the availability in shipping methods for the consumer.",
            "Are you sure you want to delete this item?", "This change will affect the availability in shipping methods.",
            "Entered carrier string already exists, please try different one"),


    SKU_POPUP("SKU","sku"),
    CANCEL_BUTTON_IN_POPUP("CANCEL", "Cancel"),
    CONTINUE_BUTTON_IN_POPUP("CONTINUE", "Continue"),
    ALLOW_OR_BLOCK_POPUP("Allowed/Blocked items", "allow/block items"),
    FULFILMENT_METHOD_ERROR_POPUP("Can't disable the Fulfilment method"),
    FULFILMENT_METHOD_ERROR_POPUP_MESSAGE("You can't disable this fulfillment method as one or more shipping methods are enabled for this fulfillment method"),

    //TAB
    SINGLE_PRODUCT_DETAIL_TAB("General", "Attributes", "Details", "Assets"),
    ADDRESS_MANAGEMENT_TABS("Shipping", "Billing"),
    SHIPPING_METHOD_TABS("configuration", "Allow/Block", "Content", "Updates"),

    //CHECKBOX
    DEFAULT_SEARCH_CHECKBOX("Default Search", "DEFAULT SEARCH"),
    FULFILMENT_METHOD_STATUS_CHECKBOX("Fulfilment Method Status"),
    SHIPPING_METHOD_STATUS_CHECKBOX("Shipping Method Status"),
    SHIPPING_METHOD_CHANNEL_CHECKBOX("Channels", "CHANNELS", "Product Types", "PRODUCT TYPES"),
    EXPORT_STATUS_CHECKBOX("All", "ALL", "NOT READY", "READY FOR EXPORT", "IN PROGRESS", "EXPORTED", "EXPORT FAILED", "NOT_READY", "READY_FOR_EXPORT", "IN_PROGRESS", "EXPORT_FAILED"),
    BASKET_ADMIN_CHANNEL_CHECKBOX("Hype Platform", "Adidas Consumer App", "Adidas Confirmed App", "Web", "All->Channel"),
    AUDIT_TRAIL_DOMAIN_ACTIONS_CHECKBOX( "Basket Admin", "View basket JSON", "View baskets"),
    SHIPPING_METHOD_DEFAULT_CHECKBOX("Default"),
    MEMBERSHIP_PRICE_TIERS_CHECKBOX("Tier 1", "Tier 2", "Tier 3", "Tier 4", "ALL->Tier"),
    PAYMENT_METHOD_STATUS_CHECKBOX("First Payment Method Status"),
    GIFT_CARD_CHECKBOX("Gift Card"),
    PRODUCT_ATTRIBUTES_CHECKBOX("Product Section->Name", "Attributes Section->Is Orderable", "Attributes Section->Is in Preview"),

    //SCROLL TO ELEMENT
    ADDRESS_MANAGEMENT_SECTION("Address Management", "ADDRESS MANAGEMENT"),
    VIEW_DROPDOWN_CHECKBOX("First Name", "Last Name")
    //IS ENABLED FIELDS
   /* PAGINATION_PREVIOUS_ARROW("previous arrow"),
    PAGINATION_NEXT_ARROW("next arrow")*/;

    private String values[];
    private static final EnumGenerator<CommonEnum> generator = new EnumGenerator<>(values());

    CommonEnum(String... values) {
        this.values = values;
    }

    @Override
    public String[] getEnumValues()
    {
        return values;
    }

    public static CommonEnum fromString(String value)
    {
        return generator.fromString(value);
    }

}


package com.adidas.tpAdidasSerenity.fe.utility.enums;

import com.adidas.tpAdidasSerenity.fe.utility.enums.enumUtils.EnumGenerator;
import com.adidas.tpAdidasSerenity.fe.utility.enums.enumUtils.IEnumName;

public enum DropdownEnum implements IEnumName<DropdownEnum> {

    CHANNEL_DROPDOWN("Channel", "Channels"),
    COMBINE_WITH_GIFT_CARD_DROPDOWN("combine with gift card"),
    AUDIT_TRAIL_DROPDOWN("domain", "actions"),
    MARKET_DROPDOWN("Markets", "Market", "market"),
    FIND_SITE_ID_DROPDOWN("Find site ID", "Find site ID or country"),
    ADDRESS_MANAGEMENT_DROPDOWN("shipping address", "Shipping Address", "Billing Address","Billing address"),
    PAGINATION_DROPDOWN("Pagination"),
    MODULE_DROPDOWN_MENU("Fulfilment", "FULFILMENT"),
    SHIPPING_METHOD_DROPDOWN("Carrier Name", "Carrier Service", "Position", "Tax Class"),
    SHIPPING_METHOD_THREE_DOTS_DROPDOWN("..."),
    FILTER_CHANNEL_DROPDOWN("Channel(Filter)"),
    AVAILABILITY_QUANTITY_PER_NODE_DROPDOWN("AVAILABILITY QUANTITY PER NODE"),
    VIEW_DROPDOWN("VIEW", "View"),
    FROM_DATE_DROPDOWN("From"),
    TO_DATE_DROPDOWN("To"),
    SELECT_THE_ORDER_FULFILMENT_METHOD_DROPDOWN("Select the order fulfilment method"),
    FULFILMENT_METHOD_DROPDOWN("Fulfilment Method", "Fulfilment method"),
    BULK_SHIPPING_METHOD_DROPDOWN("shipping method", "Shipping Method"),
    STATUS_DROPDOWN("Status"),
    STANDARD_SHIPPING_DROPDOWN("Standard Shipping"),
    DATE_AND_TIME_DROPDOWN("Date And Time", "Select Date"),
    ALLOW_OR_BLOCK_ITEMS_DROPDOWN("ALLOW", "BLOCK", "TYPE", "OPERATOR", "ITEM"),
    SERVICE_PROVIDER_DROPDOWN("Service Provider", "SERVICE PROVIDER"),
    WHEN_DROPDOWN("When", "WHEN"),
    PRODUCT_RESULTS_COLUMN_DROPDOWN("Is Orderable", "Is in Preview")
    ;

    private String values[];
    private static final EnumGenerator<DropdownEnum> generator = new EnumGenerator<>(values());

    DropdownEnum(String... values) {
        this.values = values;
    }

    @Override
    public String[] getEnumValues()
    {
        return values;
    }

    public static DropdownEnum fromString(String value)
    {
        return generator.fromString(value);
    }

}


package com.adidas.tpAdidasSerenity.fe.utility.enums;

import com.adidas.tpAdidasSerenity.fe.utility.enums.enumUtils.EnumGenerator;
import com.adidas.tpAdidasSerenity.fe.utility.enums.enumUtils.IEnumName;

public enum FieldVisibilityValidationEnum implements IEnumName<FieldVisibilityValidationEnum> {

    //PRODUCTS
    PRODUCT_ID_FIELD("Product Id", "PRODUCT ID", "Id"),
    PAGINATION_PREVIOUS_PAGE("previous page"),
    PAGINATION_NEXT_PAGE("next page"),
    CUSTOM_ID_POPUP_DISMISS_BUTTON("Dismiss", "dismiss"),
    INVENTORY_MULTIPLE_PRODUCTS_VALIDATION("Line, comma or space separated items"),
    FILTER_WINDOW_HEADER("Refine Results"),
    CHECKOUT_MARKET("adidas-CA", "adidas-US", "adidas-DE", "adidas-XX"),
    CHECKOUT_CHANNEL("All"),
    STATUS_FIELD("Status"),
    ADDRESS_MANAGEMENT_TABS("Shipping->Tab", "Billing->Tab", "Shipping", "Billing"),
    ADDRESS_MANAGEMENT_TEXTBOXES("firstName->Max Length->TextBox", "lastName->Max Length->TextBox", "addressLine1->Min Length->TextBox",
            "addressLine1->Max Length->TextBox", "addressLine1->PatternFlags->TextBox", "addressLine2->Max Length->TextBox", "addressLine2->PatternFlags->TextBox",
            "city->Min Length->TextBox", "city->Max Length->TextBox", "postalCode->Min Length->TextBox", "postalCode->Max Length->TextBox",
            "phoneNumber->Min Length->TextBox", "phoneNumber->Max Length->TextBox", "email->Max Length->TextBox", "email->PatternFlags->TextBox",
            "addressId->Max Length->TextBox", "houseNumber->Max Length->TextBox", "apartmentNumber->Max Length->TextBox", "stateCode->Max Length->TextBox"),
    ADDRESS_MANAGEMENT_MULTILINE_TEXTBOXES("firstName->Pattern->MultiLineTextBox", "lastName->Pattern->MultiLineTextBox", "addressLine1->Pattern->MultiLineTextBox",
            "addressLine2->Pattern->MultiLineTextBox", "city->Pattern->MultiLineTextBox", "postalCode->Pattern->MultiLineTextBox", "country->Pattern->MultiLineTextBox",
            "phoneNumber->Pattern->MultiLineTextBox", "email->Pattern->MultiLineTextBox"),
    ADDRESS_MANAGEMENT_REQUIRED_CHECKBOXES("firstName->Required->CheckBox", "lastName->Required->CheckBox", "addressLine1->Required->CheckBox", "addressLine2->Required->CheckBox",
            "city->Required->CheckBox", "stateCode->Required->CheckBox", "postalCode->Required->CheckBox", "country->Required->CheckBox", "phoneNumber->Required->CheckBox",
            "email->Required->CheckBox", "addressId->Required->CheckBox", "addressType->Required->CheckBox", "houseNumber->Required->CheckBox", "apartmentNumber->Required->CheckBox"),
    INVENTORY_RESULTS_PAGE_CHANNEL("DSS", "Skava"),
    INVENTORY_RESULTS_PAGE_MORE_INFO_BUTTON("More info->Button"),
    INVENTORY_RESULTS_PAGE_DISMISS_BUTTON("Dismiss->Button"),
    INVENTORY_RESULTS_PAGE_HEADERS("SITE ID", "CHANNEL", "PRODUCT AVAILABILITY QUANTITY", "AVAILABILITY QUANTITY PER NODE", "On Hand", "Future", "AVAILABILITY PER SIZE"),
    INVENTORY_RESULTS_PAGE_FAILURE_MESSAGE("Products could not be uploaded"),
    BASKET_TABLE_FIELDS("First Name->Table Column", "Last Name->Table Column", "Email->Table Column"),
    BASKET_TABLE_SEARCH_ICONS("First Name->Search Icon", "Last Name->Search Icon", "Email->Search Icon"),
    BASKET_TABLE_ERROR_MESSAGE("Sorry no baskets were found. Please try again."),
    DATE_CLOSE_BUTTON("From->X->button", "To->X->button"),
    ORDER_FULFILMENT_METHODS("Fulfilment Method", "Shipping Method"),
    ORDER_FULFILMENT_METHOD_PLACEHOLDER("Order fulfilment method->placeholder text"),
    ORDER_FULFILMENT_BULK_UPDATE_PLACEHOLDER("Please select->Fulfilment method->placeholder text", "Please select->Status->placeholder text",
            "Please select->Carrier Service->placeholder text", "Please select->Standard Shipping->placeholder text", "Please select->shipping method->placeholder text"),
    FULFILMENT_METHODS("Home Delivery", "Click and Collect", "Pick up, Drop off", "Digital"),
    CARRIER_SERVICES("Not applicable", "Standard", "Express", "Sameday", "GRND_INLINE", "2NDDAY_INLINE", "NXTDAY_INLINE"),
    CHECKOUT_INFORMATION_FIELD("information->field"),
    CHECKOUT_TAXATION_DETAIL_PAGE_BUTTON("Taxation Detail Page->button"),
    COMMERCE_NEXT_DROPDOWN_COUNTRY("CANADA->country"),
    DATE_AND_TIME_FIELD("Date And Time->field", "Select Date->field"),
    STORED_DATE_VARIABLE("date_variable"),
    TAXRATES_PROVINCECODE_FIELD("province Code [Optional]->field"),
    PROVINCE_NAME_AND_CODE_TABLE_FIELDS("provincename->Table Column", "provincecode->Table Column"),
    MARKET_OR_REGION_SELECTION_DROPDOWN("Market/Region selection"),
    MEMBERSHIP_PRICE_HEADER_MESSAGE("You can set a maximum of 4 tier pricing. if you set All, you cannot add any more tier pricing. If a Tier is not selected, the Base Fixed Price will be set as default."),
    SHIPPING_METHOD_HEADER_TABS("market->Header Tab", "Fulfilment Type->Header Tab", "Unique Id->Header Tab", "actions->Header Tab"),
    SHIPPING_METHOD_HEADER_TABS_VALUES("adidas-XX->market", "ClickAndCollect->Fulfilment Type", "N/A->Unique Id", "N/A->actions"),
    PRODUCT_NAME_TABLE_COLUMN_VALUES("Test123"),
    ALLOW_BLOCK_VALIDATION_MESSAGE("You need to save the Shipping Method first to be able to edit and add Allow/Block lists."),
    BASKET_DATE_RANGE_EMPTY("Sorry no baskets were found for the selected time frame in timezone : [user_time_zone]. Please try with different time frame.")
    ;


    private String values[];
    private static final EnumGenerator<FieldVisibilityValidationEnum> generator = new EnumGenerator<>(values());

    FieldVisibilityValidationEnum(String... values) {
        this.values = values;
    }

    @Override
    public String[] getEnumValues()
    {
        return values;
    }

    public static FieldVisibilityValidationEnum fromString(String value)
    {
        return generator.fromString(value);
    }

}


package com.adidas.tpAdidasSerenity.fe.utility.enums;

import com.adidas.tpAdidasSerenity.fe.utility.enums.enumUtils.EnumGenerator;
import com.adidas.tpAdidasSerenity.fe.utility.enums.enumUtils.IEnumName;

public enum PageValidationEnum implements IEnumName<PageValidationEnum> {

    PAYMENT_PAGE_VALIDATION("Edit Provider and Payment Method", "Payments"),
    PRODUCT_PAGE_HEADER_VALIDATION("Products(Details Page)", "Products(Landing Page)", "Products(Detail Page)"),
    SINGLE_PRODUCT_TAB_VALIDATION("General", "Attributes", "Details", "Assets"),
    CHECKOUT_PAGE_HEADER_VALIDATION("Checkout", "Edit Address Management"),
    FULFILMENT_HEADER_VALIDATION("Fulfilment", "Configure Fulfilment Methods", "Configure Fulfilment Method", "Create Shipping Method", "Configure Shipping Method", "Order Fulfilment Bulk Update", "Edit Shipping Method"),
    INVENTORY_HEADER_VALIDATION("Inventory"),
    BASKET_ADMIN_HEADER_VALIDATION("Basket"),
    AUDIT_TRAIL_HEADER_VALIDATION("Audit Trail"),
    TAX_RATES_HEADER_VALIDATION("Tax Rates");


    private String values[];
    private static final EnumGenerator<PageValidationEnum> generator = new EnumGenerator<>(values());

    PageValidationEnum(String... values) {
        this.values = values;
    }

    @Override
    public String[] getEnumValues()
    {
        return values;
    }

    public static PageValidationEnum fromString(String value)
    {
        return generator.fromString(value);
    }
}


package com.adidas.tpAdidasSerenity.fe.utility;

import net.thucydides.core.pages.PageObject;
import org.junit.Assert;
import org.openqa.selenium.*;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.LocalFileDetector;
import org.openqa.selenium.remote.RemoteWebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class CommonUtils extends PageObject {

    private static final Logger log = LoggerFactory.getLogger(CommonUtils.class);
    public static String getTextValue;
    boolean isDisplayed = true;
    Actions action = new Actions(this.getDriver());


    public void click(String locator){
        try {
            getWebElement(locator).click();
            log.info("Successfully clicked on element : "+locator);
        } catch (Exception e) {
            log.error("Failed to click on following element : " +locator);
            fail("Failed to click on following element : " +locator+ " "+e.getMessage());
        }
    }

    public void waitUntilVisibleAndClick(String locator)
    {
        try {
            waitTillElementIsVisible(locator, 20);
            getWebElement(locator).click();
            log.info("Successfully clicked on element: "+locator);
        } catch (Exception e) {
            log.error("Failed to click on following element: " +locator);
            fail("Failed to click on following element: " +locator+ " "+e.getMessage());
        }
    }

    public void waitForElementClick(String element) {
        for(int count = 1; count <= 3; count ++)
        {
            try {
                waitTillElementIsVisible(element, 15);
                getWebElement(element).click();
                log.info("Clicked for the "+count+ " times");
                break;
            } catch (Exception e) {
                log.info("Failed to clicked for "+count+ " times");
                if(count == 3)
                {
                    log.error("Failed to click on following element even after trying to click 3 times: " + element);
                    fail("Failed to click on following element even after trying to click 3 times: " + element + " error message is: "+e.getMessage());
                }
            }
        }
    }

    public void scrollAndClick(String locator)
    {
        try {
            waitTillElementIsVisible(locator, 20);
            moveToElement(locator);
            getWebElement(locator).click();
            log.info("Successfully clicked on element after scrolling to element: "+locator);
        } catch (Exception e) {
            log.error("Failed to click on following element after scrolling to element: " +locator);
            fail("Failed to click on following element after scrolling to element: " +locator+ " "+e.getMessage());
        }
    }

    public void doubleClick(String locator) {
        try {
            action.doubleClick(getWebElement(locator)).perform();
            log.info("Successfully double clicked on element : "+locator);
        } catch (Exception e) {
            log.error("Failed to double click on following element : " +locator);
            fail("Failed to double click on following element : " +locator+ " "+e.getMessage());
        }
    }

    private void fail(String message) {
        if(message == null) throw new AssertionError();
        throw new AssertionError(message);
    }

    public boolean elementIsDisplayed(String element) {
        try {
            isDisplayed = getWebElement(element).isDisplayed();
            return isDisplayed;
        } catch (Exception e) {
            log.error("The following element is not displayed: " +element);
        }
        return false;
    }

    public void enterText(String locator, String text){
        try {
            getWebElement(locator).sendKeys(text);
            log.info("Successfully entered text: "+text+ " on: "+locator);
        } catch (Exception e) {
            log.error("Failed to enter text: "+text+ " on: "+locator);
            fail("Failed to enter text: "+text+ " on: "+locator+ " "+e.getMessage());
        }
    }

    public void clickEnterText(String locator, String text){
        try {
            click(locator);
            getWebElement(locator).sendKeys(text);
            log.info("Successfully entered text: "+text+ " on: "+locator);
        } catch (Exception e) {
            log.error("Failed to enter text: "+text+ " on: "+locator);
            fail("Failed to enter text: "+text+ " on: "+locator+ " "+e.getMessage());
        }
    }

    public void clearAndEnterText(String locator, String text){
        try {
            clear(locator);
            getWebElement(locator).sendKeys(text);
            log.info("Successfully entered text: "+text+ " on: "+locator);
        } catch (Exception e) {
            log.error("Failed to enter text: "+text+ " on: "+locator);
            fail("Failed to enter text: "+text+ " on: "+locator+ " "+e.getMessage());
        }
    }

    public void clickClearAndEnterText(String locator, String text){
        try {
            click(locator);
            clear(locator);
            getWebElement(locator).sendKeys(text);
            log.info("Successfully entered text: "+text+ " on: "+locator);
        } catch (Exception e) {
            log.error("Failed to enter text: "+text+ " on: "+locator);
            fail("Failed to enter text: "+text+ " on: "+locator+ " "+e.getMessage());
        }
    }

    public void clear(String locator) {
        try
        {
            getWebElement(locator).clear();
            log.info("cleared text on element: "+locator);
        }catch (Exception e) {
            log.error("Failed to clear text on element: "+locator);
            fail("Failed to clear text on element: "+locator+ " "+e.getMessage());
        }
    }

    public void enterTextByKeys(String locator, String text){
        try {
            click(locator);
            deleteTextByKeys(locator);
            getWebElement(locator).sendKeys(text);
            log.info("Successfully entered text: "+text+ " on: "+locator);
        } catch (Exception e) {
            log.error("Failed to enter text: "+text+ " on: "+locator);
            fail("Failed to enter text: "+text+ " on: "+locator+ " "+e.getMessage());
        }
    }

    public String getText(String locator) {
        try {
            getTextValue = getWebElement(locator).getText().trim();
            return getTextValue;
        }catch (Exception e) {
            log.error("Failed to get text from text box "+locator);
            fail("Failed to get text from text box "+locator+ " "+e.getMessage());
        }
        return null;
    }

    public String getAttribute(String locator, String attribute) {
        try {
            getTextValue = getWebElement(locator).getAttribute(attribute);
            return getTextValue;
        }catch (Exception e) {
            log.error("Failed to get attribute from element "+locator);
            fail("Failed to get attribute from element "+locator+ " "+e.getMessage());
        }
        return null;
    }

    public boolean checkSelected(String locator) {
        if (getWebElement(locator).isSelected()) {
            log.info("element is selected "+locator);
            return true;
        }
        log.error("element is not selected "+locator);
        return false;
    }

    public boolean checkEnabled(String locator) {
        if (getWebElement(locator).isEnabled()) {
            log.info("element is enabled "+locator);
            return true;
        }
        log.error("element is not enabled "+locator);
        return false;
    }


    public void waitTillElementIsClickable(String element, int timeout) {
        try {
            WebDriverWait wait = new WebDriverWait(this.getDriver(), Duration.ofSeconds(timeout));
            wait.until(ExpectedConditions.elementToBeClickable(getWebElement(element)));
            log.info("element is clickable " + element);
        } catch (Exception e) {
            log.error("The following element is not clickable: " +element);
        }
    }

    public void waitTillElementIsVisible(String element, int timeout) {
        try {
            WebDriverWait wait = new WebDriverWait(this.getDriver(), Duration.ofSeconds(timeout));
            if(checkLocatorType(element))
            {
                wait.until(ExpectedConditions.visibilityOfElementLocated(Locators.getBy(element)));
            }
            else {
                wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(element)));
            }
            log.info("element is visible " + element);
        } catch (Exception e) {
            log.error("The following element is not visible: " +element);
        }
    }

    public void presenceOfElementLocated(String element, int timeout) {
        try {
            WebDriverWait wait = new WebDriverWait(this.getDriver(), Duration.ofSeconds(timeout));
            if(checkLocatorType(element))
            {
                wait.until(ExpectedConditions.presenceOfElementLocated(Locators.getBy(element)));
            }
            else {
                wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(element)));
            }
            log.info("element located is present " + element);
        } catch (Exception e) {
            log.error("The element located is not present: " +element);
        }
    }

    public void jsClick(String element) {
        WebElement webElement = getWebElement(element);
        JavascriptExecutor js = (JavascriptExecutor) this.getDriver();
        js.executeScript("arguments[0].click();", webElement);
    }


    public void moveToElement(String element) {
        WebElement webElement = getWebElement(element);
        action.moveToElement(webElement).build().perform();
    }


    public void scrollToView(String element) {
        try {
            WebElement webElement = getWebElement(element);
            JavascriptExecutor js = (JavascriptExecutor) this.getDriver();
            js.executeScript("arguments[0].scrollIntoView(true);", webElement);
            log.info("The following element [%s] is scrollable: " +element);
            waitTillElementIsVisible(element, 10);
        } catch (Exception e) {
            log.error("The following element [%s] is not scrollable: " +element);
        }

    }

    public void deleteTextByKeys(String element) {
        getWebElement((element)).sendKeys(Keys.CONTROL, "a");
        getWebElement((element)).sendKeys(Keys.BACK_SPACE);
    }

    public WebElement getWebElement(String locator) {
        try{
            if(checkLocatorType(locator))
            {
                return this.getDriver().findElement(Locators.getBy(locator));
            }
            return this.getDriver().findElement(By.xpath(locator));
        }
        catch (Exception e){
            throw new NoSuchElementException("No such element is present: "+locator);
        }
    }

    private boolean checkLocatorType(String locator) {
        List<String> typesOfLocatorsList = getTypesOfLocatorsList();
        String[] locatorArray = locator.split(":");

        for (String locatorType: typesOfLocatorsList) {
            if(locatorArray[0].equalsIgnoreCase(locatorType))
            {
                return true;
            }
        }
        return false;
    }

    private List<String> getTypesOfLocatorsList() {
        List<String> typesOfLocatorsList = new ArrayList<>();
        typesOfLocatorsList.add("id");
        typesOfLocatorsList.add("xpath");
        typesOfLocatorsList.add("css");
        typesOfLocatorsList.add("name");
        typesOfLocatorsList.add("class");
        typesOfLocatorsList.add("tagName");
        return typesOfLocatorsList;
    }

    public List<WebElement> getWebElements(String locator) {
        try {
            if(checkLocatorType(locator))
            {
                return this.getDriver().findElements(Locators.getBy(locator));
            }
            return this.getDriver().findElements(By.xpath(locator));
        }
        catch (Exception e){
            throw new NoSuchElementException("No such element is present: "+locator);
        }
    }


    public void waits(long seconds) throws InterruptedException {
        Thread.sleep(Long.parseLong(seconds + "000"));
    }

    public int getIndexOfRequiredColumn(String requiredColumn, String columnNamesListLoc) {
        moveToElement(columnNamesListLoc);
        List<WebElement> columnList = getWebElements(columnNamesListLoc);

        for (int i = 0; i < columnList.size(); i++) {
            if (requiredColumn.equalsIgnoreCase(columnList.get(i).getText())) {
                return i;
            }
        }
        return 0;
    }

    public void checkDataFromUiAndStoredData(List<String> storedDataList, String dataListLoc) {
        int count = 0;
        List<WebElement> dataListFromUI = getWebElements(dataListLoc);
        for (int i = 0; i < dataListFromUI.size(); i++) {
            count++;
            Assert.assertEquals(dataListFromUI.get(i).getText(), storedDataList.get(i));
        }
        log.info("Count is: " + count);
        if(count == 0)
        {
            fail("Failed to get data from UI "+count);
        }
    }


    public void uploadFile(String file, String fileUploadLoc, String path) {
        File fileToLoad = new File(path + file);
        WebElement uploadEle = getWebElement(fileUploadLoc);
        LocalFileDetector detector = new LocalFileDetector();
        ((RemoteWebElement) uploadEle).setFileDetector(detector);
        uploadEle.sendKeys(fileToLoad.getAbsolutePath());
    }

    public boolean checkIfFilePresent(String path, String fileName) {
        File file = new File(path + fileName);
        log.info(String.valueOf(file.exists()));
        return file.exists();
    }

    public int getRandomNoBetweenTwoNumbers(int lowerBound, int upperBound) {
        Random rand = new Random();
        return rand.nextInt(upperBound - lowerBound) + lowerBound;
    }

    public boolean writeDataToFile(String copyJsonTextFile, String actualCopiedText) {
        try {
            FileWriter writer = new FileWriter(copyJsonTextFile);
            BufferedWriter bwr = new BufferedWriter(writer);
            bwr.write(actualCopiedText);
            bwr.close();
            log.info("successfully written to a file");
            return true;
        } catch (IOException ioe) {
            log.error("Error in writing data into file" + ioe);
        }
        return false;
    }

    public void addWebElementListToStringsList(List<String> firstList, List<WebElement> secondList) {
        for (int i = 0; i < secondList.size(); i++) {
            firstList.add(secondList.get(i).getText());
        }
    }

    public void addWebElementListWithAttributeToStringsList(List<String> firstList, List<WebElement> secondList, String attributeName) {
        for (int i = 0; i < secondList.size(); i++) {
            firstList.add(secondList.get(i).getAttribute(attributeName));
        }
    }

    public void convertStringsListToIntegerList(List<String> stringsList, List<Integer> integerList) {
        for (int i = 0; i < stringsList.size(); i++) {
            integerList.add(Integer.parseInt(stringsList.get(i)));
        }
    }


    public List<String> sortAlphanumericallyInAscendingOrder(List<String> firstList) {
        String myRules = "< 0 < 1 < 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9" +
                "< A, a < B, b < C, c < D, d < E, e < F, f < G, g < H, h < I, i" +
                "< J, j < K, k < L, l < M, m < N, n < O, o < P, p < Q, q < R, r" +
                "< S, s < T, t < U, u < V, v < W, w < X, x < Y, y < Z, z" ;

        try {
            RuleBasedCollator myRuleBasedCollator = new RuleBasedCollator(myRules);
            Collections.sort(firstList, myRuleBasedCollator);
            return firstList;
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return null;
    }

    public List<String> sortAlphanumericallyInDescendingOrder(List<String> firstList) {
        String myRules =
                "< Z, z < Y, y < X, x < W, w  < V, v < U, u < T, t < S, s < R, r" +
                        "< Q, q < P, p < O, o < N, n < M, m < L, l < K, k  < J, j < I, i" +
                        "< H, h < G, g < F, f < E, e < D, d < C, c < B, b < A, a" +
                        "< 9 < 8 < 7 < 6 < 5 < 4 < 3 < 2 < 1 < 0" ;

        try {
            RuleBasedCollator myRuleBasedCollator = new RuleBasedCollator(myRules);
            Collections.sort(firstList, myRuleBasedCollator);
            return firstList;
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return null;
    }

    public String checkAsteriskSymbolByGettingRgbColorCodeOfPsuedoElement(String psuedoElement) {
        WebElement pseudoElement = getWebElement(psuedoElement);
        return ((JavascriptExecutor) this.getDriver()).executeScript("return window.getComputedStyle(arguments[0], ':after').getPropertyValue('color');",pseudoElement).toString();
    }

    public void closesTheBrowser() {
        this.getDriver().close();
    }

    public void redirectToPassedPage(int pageNo) {
        ArrayList<String> tabs = new ArrayList<> (this.getDriver().getWindowHandles());
        this.getDriver().switchTo().window(tabs.get(pageNo));
    }

    public void keyPressClickAndKeyRelease(WebElement tabWebElement) {
        action.moveToElement(tabWebElement).keyDown(Keys.CONTROL).click().keyUp(Keys.CONTROL).build().perform();
    }

    public String getSaltString(int size) {
        String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < size) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        return salt.toString();
    }

    public void selectDataInDropdown(String dropdownValue, List<String> dropdownList, List<WebElement> dropdownWebElementsList) {
        try
        {
            for(int index = 0; index < dropdownList.size(); index++)
            {
                if(dropdownValue.equalsIgnoreCase(dropdownList.get(index)))
                {
                    log.info("dropdown Value: "+dropdownValue+ ", dropdown value from list: "+dropdownList.get(index));
                    dropdownWebElementsList.get(index).click();
                }
            }
        }catch (Exception e) {
            log.error("Failed to select value "+dropdownValue+" on dropdown");
            fail("Failed to select value "+dropdownValue+" on dropdown "+e.getMessage());
        }

    }

    public String getRandomCharacters(int size) {
        String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < size) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        return salt.toString();
    }

    public void selectDataInDropdownByIndex(List<WebElement> dropdownWebElementList, int selectedIndex) {
        try
        {
            for(int index = 0; index < dropdownWebElementList.size(); index++)
            {
                if(index == selectedIndex)
                {
                    log.info("dropdown index: "+selectedIndex+ ", dropdown value from list: "+dropdownWebElementList.get(index));
                    dropdownWebElementList.get(index).click();
                }
            }
        }catch (Exception e) {
            log.error("Failed to select index "+selectedIndex+" value on dropdown");
            fail("Failed to select index "+selectedIndex+" value on dropdown "+e.getMessage());
        }

    }

    public String getLocalDateAndTime(String requiredDateAndTimeFormat) {
        LocalDateTime dateAndTimeObj = LocalDateTime.now();
        DateTimeFormatter requiredDateAndTimeObjFormat = DateTimeFormatter.ofPattern(requiredDateAndTimeFormat);
        return dateAndTimeObj.format(requiredDateAndTimeObjFormat);
    }

    public LocalDate getCurrentDate() {
        return LocalDate.now();
    }

    public int getDayOfMonth(LocalDate date) {
        return date.getDayOfMonth();
    }

    public long convertMinutesToDays(int minutes) {
        Duration days = Duration.ofMinutes(minutes);
        return days.toDaysPart();
    }

    public LocalDate addDaysToDate(LocalDate date, long noOfDays) {
        return date.plusDays(noOfDays);
    }

    public LocalDate subtractDaysToDate(LocalDate date, long noOfDays) {
        return date.minusDays(noOfDays);
    }


    public long findMonthsBetweenDates(LocalDate firstDate, LocalDate secondDate) {
        return ChronoUnit.MONTHS.between(firstDate.withDayOfMonth(1),
                secondDate.withDayOfMonth(1));
    }

    public void clickCalendarPreviousOrNextButtonBasedOnMonths(long monthsBetween, String locator) {
        for (int index = 0; index < monthsBetween; index++) {
            click(locator);
        }
    }

    public String formatDate(String requiredFormat, Date date)
    {
        DateFormat dateFormat = new SimpleDateFormat(requiredFormat);
        System.out.println(dateFormat.format(date));
        return dateFormat.format(date);
    }

    public String convertOneDateFormatToAnother(String firstFormat, String secondFormat, String targetDate) throws ParseException {
        SimpleDateFormat sdfSource = new SimpleDateFormat(firstFormat);

        // parse the string into Date object
        Date date = sdfSource.parse(targetDate);

        // create SimpleDateFormat object with desired date format
        SimpleDateFormat sdfDestination = new SimpleDateFormat(
                secondFormat);

        // parse the date into another format
        return sdfDestination.format(date);
    }

}


package com.adidas.tpAdidasSerenity.fe.utility;

import org.apache.commons.codec.binary.Base64;
import org.openqa.selenium.By;
import org.openqa.selenium.Cookie;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

public class GetCookie {
    public static void main(String[] args) throws InterruptedException, IOException {

        WebDriver driver;

        System.setProperty("webdriver.chrome.driver", "./Chromedriver/chromedriver.exe");
        ChromeOptions chromeOptions = new ChromeOptions();

        chromeOptions.addArguments("--remote-allow-origins=*","ignore-certificate-errors");
        driver = new ChromeDriver(chromeOptions);

        Properties locators = PropertyFileReader.loadFile("locators", "ComnLocators.properties");
        Properties config = PropertyFileReader.loadFile("config", "config.properties");

        driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);

        String adidasUrl = config.getProperty("adidasUrl");
        String adidasEmail = config.getProperty("adidasemailid");
        String adidasPasswordAuthenticator = config.getProperty("adidaspasswordauthenticator");
        String adidasPasswordOtp = config.getProperty("adidaspasswordotp");


        CommonUtils commonUtils = new CommonUtils();

        //LOGIN THROUGH AUTHENTICATOR
        if (adidasUrl.equalsIgnoreCase(config.getProperty("realStagLoginUrl"))) {
            driver.get(config.getProperty("realStagLoginUrl"));
            driver.manage().window().maximize();

            FileWriter fw = new FileWriter("./src/test/resources/data/cookies/UsingAuthenticatorCookie.txt");
            //System.out.println(System.getProperty("user.dir"));

            String title = driver.getTitle();
            System.out.println(title);


            driver.findElement(By.xpath(locators.getProperty("loginWithAdidasButton"))).click();
            driver.findElement(By.xpath(locators.getProperty("adidasEmailLocAuth"))).sendKeys(adidasEmail);
            driver.findElement(By.xpath(locators.getProperty("nextButton"))).click();
            commonUtils.waits(2);
            driver.findElement(By.xpath(locators.getProperty("adidasPasswordLoc"))).sendKeys(decodeString(adidasPasswordAuthenticator));
            commonUtils.waits(5);
            driver.findElement(By.xpath(locators.getProperty("nextButton"))).click();
            commonUtils.waitTillElementIsVisible(locators.getProperty("nextButton"), 20);
            driver.findElement(By.xpath(locators.getProperty("nextButton"))).click();

            System.out.println("******");
			/*
			By default,if control is not there in canada, use these 3 lines to select canada
			driver.findElement(By.xpath("//div[input]")).click();
			driver.findElement(By.xpath("//*[text()='CANADA']")).click();
			driver.findElement(By.xpath("//a")).click();*/

            String countryName = driver.findElement(By.xpath(locators.getProperty("canadaRegion"))).getAttribute("value");
            System.out.println("The country name is: " + countryName);

            for (Cookie ck : driver.manage().getCookies()) {
                System.out.println(ck.getName() + ";" + ck.getValue() + ";" + ck.getDomain() + ";" + ck.getPath() + ";" + ck.getExpiry() + ";" + ck.isSecure());
                fw.write(ck.getName() + ";" + ck.getValue() + ";" + ck.getDomain() + ";" + ck.getPath() + ";" + ck.getExpiry() + ";" + ck.isSecure() + "\n");
            }

		/*new WebDriverWait(driver, 20).until(ExpectedConditions.elementToBeClickable(By.xpath("//*[text()='VIEW']")));

		WebElement element = driver.findElement(By.xpath("//*[text()='VIEW']"));
		String txt = element.getText();
		System.out.println("The text is - " + txt);*/

            fw.close();
        }
        //LOGIN THROUGH OTP
        else {
            driver.get(config.getProperty("commonQaOrStagLoginUrl"));
            driver.manage().window().maximize();

            FileWriter fw = new FileWriter("./src/test/resources/data/cookies/UsingOTPCookie.txt");


            driver.findElement(By.xpath(locators.getProperty("adidasEmailLocOtp"))).sendKeys(adidasEmail);
            driver.findElement(By.xpath(locators.getProperty("adidasPasswordLoc"))).sendKeys(decodeString(adidasPasswordOtp));
            driver.findElement(By.xpath(locators.getProperty("loginButton"))).click();

            commonUtils.waits(10);
            driver.findElement(By.xpath(locators.getProperty("authenticateButton"))).click();

			/*
			By default,if control is not there in canada, use these 3 lines to select canada
			driver.findElement(By.xpath("//div[input]")).click();
			driver.findElement(By.xpath("//*[text()='CANADA']")).click();
			driver.findElement(By.xpath("//a")).click();*/

            String countryName = driver.findElement(By.xpath(locators.getProperty("canadaRegion"))).getAttribute("value");
            System.out.println("The country name is: " + countryName);

            for (Cookie ck : driver.manage().getCookies()) {
                System.out.println(ck.getName() + ";" + ck.getValue() + ";" + ck.getDomain() + ";" + ck.getPath() + ";"
                        + ck.getExpiry() + ";" + ck.isSecure());
                fw.write(ck.getName() + ";" + ck.getValue() + ";" + ck.getDomain() + ";" + ck.getPath() + ";" + ck.getExpiry() + ";" + ck.isSecure() + "\n");
            }

            fw.close();
        }

    }

    public static String decodeString(String encodedPassword) {
        byte[] decodedString = Base64.decodeBase64(encodedPassword);
        return (new String(decodedString));
    }
}

/*
Use below code to encode the password
import org.apache.commons.codec.binary.Base64;
public class Password {

    public static void main(String[] args) {

        String actualPassword="your_password";
        byte[] encodedString=Base64.encodeBase64(actualPassword.getBytes());
        System.out.println("Encoded String: "+new String(encodedString));

        byte[] decodedString=Base64.decodeBase64(encodedString);
        System.out.println("Decoded String: "+new String(decodedString));

    }
}*/


package com.adidas.tpAdidasSerenity.fe.utility;

import org.openqa.selenium.By;

public class Locators {

    public static By getBy(String field) {
        String[] fieldArr = field.split(":");
        return getBy(fieldArr);
    }


    public static By getBy(String[] fieldArr) {
        StringBuilder locator = new StringBuilder();
        String locatorType = fieldArr[0];
        for (int arrayIndex = 1; arrayIndex < fieldArr.length; arrayIndex++) {
            if (arrayIndex == 1) {
                locator.append(fieldArr[arrayIndex]);
            } else {
                locator.append(":").append(fieldArr[arrayIndex]);
            }
        }
        switch (locatorType) {
            case "id":
                return By.id(locator.toString());
            case "xpath":
                return By.xpath(locator.toString());
            case "css":
                return By.cssSelector(locator.toString());
            case "name":
                return By.name(locator.toString());
            case "class":
                return By.className(locator.toString());
            case "tagName":
                return By.tagName(locator.toString());
            default:
                return null;
        }
    }

}


package com.adidas.tpAdidasSerenity.fe.utility;

import java.io.FileInputStream;
import java.util.Properties;

public class PropertyFileReader {
    public static Properties loadFile(String folderName, String fileName) {
        FileInputStream file = null;
        String inputFile = "./src/test/resources/data/" + folderName + "/" + fileName;
        Properties p = new Properties();
        try {
            file = new FileInputStream(inputFile);
            p.load(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return p;
    }
}



package com.adidas.tpAdidasSerenity;


import com.epam.ta.reportportal.ws.model.log.SaveLogRQ;
import com.github.invictum.reportportal.LogsPreset;
import com.github.invictum.reportportal.ReportIntegrationConfig;
import com.github.invictum.reportportal.Utils;
import io.cucumber.junit.CucumberOptions;
import net.serenitybdd.cucumber.CucumberWithSerenity;
import net.thucydides.core.model.TestResult;
import net.thucydides.core.model.TestStep;
import net.thucydides.core.screenshots.ScreenshotAndHtmlSource;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

import java.io.File;
import java.nio.file.Files;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.function.Function;

/**
 * TestRunner class
 *
 * Cucumber options default set, change according to your needs
 */
@RunWith(CucumberWithSerenity.class)
@CucumberOptions(
        plugin = {"pretty", "html:target/cucumber", "json:target/cucumber-report.json","rerun:rerun/failed_scenarios.txt"},
        features={"@rerun/testsToRerun.txt"},
        glue = {"com.adidas.tpAdidasSerenity"}
)


public class FailureReRunRunner {

    /**
     * Setup your test configuration here
     *
     * Serenity integration with Reporting Portal offers 3 logs output configurations
     * DEFAULT      - recommended
     * FULL
     * CUSTOM       - recommended if you need to customize the output
     *                For example: save screenshots testing desktop applications
     *
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    @BeforeClass
    public static void setup() throws Exception {
        try {
            ReportIntegrationConfig reportIntegrationConfig = ReportIntegrationConfig.get();
            //DEFAULT preset
            LogsPreset preset = LogsPreset.DEFAULT;

            //FULL preset
            //LogsPreset preset = LogsPreset.FULL;

            //CUSTOM preset
            //LogsPreset preset = LogsPreset.CUSTOM;
            //preset.register(myCustomizedPreset);

            reportIntegrationConfig.usePreset(preset);

            //Activated to avoid errors while testing very long scenarios
            reportIntegrationConfig.truncateNames(true);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Customized logging of steps and screenshots in Reporting Portal
     *
     * Change according to your needs
     */
    static Function<TestStep, Collection<SaveLogRQ>> myCustomizedPreset = step -> {
        SaveLogRQ log = new SaveLogRQ();
        try {
            Date startDate = Utils.stepStartDate(step);
            Date startEnd = Utils.stepEndDate(step);
            attachScreenShot(step, log);
            if (TestResult.FAILURE.equals(step.getResult())) {
                log.setMessage(step.getResult() + " " + step.getDescription() + "\n\n"
                        + ExceptionUtils.getStackTrace(step.getException().toException()) + "\n\nStep Start Date: "
                        + startDate.toInstant() + "\nStep End Date: " + startEnd.toInstant());
            } else {
                log.setMessage(step.getResult() + " " + step.getDescription() + "\n\nStep Start Date: "
                        + startDate.toInstant() + "\nStep End Date: " + startEnd.toInstant());
            }
            log.setLogTime(startDate);
            log.setLevel(Utils.logLevel(step.getResult()));
        } catch (Exception t) {
            log.setMessage(t.getMessage());
            log.setLevel(Utils.logLevel(TestResult.ERROR));
        }
        return Collections.singleton(log);
    };

    /**
     * Attach screenshot to the current log
     *
     * @param step
     * @param log
     */
    private static void attachScreenShot(TestStep step, SaveLogRQ log){
        for (ScreenshotAndHtmlSource screenshotAndHtmlSource : step.getScreenshots()) {
            System.out.println("Screenshot "  + screenshotAndHtmlSource);
            File screenshot = screenshotAndHtmlSource.getScreenshot();
            if (screenshot != null) {
                SaveLogRQ.File attachedF = new SaveLogRQ.File();
                try {
                    attachedF.setContent(Files.readAllBytes(screenshot.toPath()));
                    attachedF.setContentType("image/png");
                    attachedF.setName(screenshot.getName());
                } catch (Exception t) {
                    t.printStackTrace();
                }
                log.setFile(attachedF);
            }
        }
    }

    @AfterClass
    public static void tearDown() throws Exception {}

}


package com.adidas.tpAdidasSerenity;

import com.epam.ta.reportportal.ws.model.log.SaveLogRQ;
import com.github.invictum.reportportal.LogsPreset;
import com.github.invictum.reportportal.ReportIntegrationConfig;
import com.github.invictum.reportportal.Utils;
import io.cucumber.junit.CucumberOptions;
import net.serenitybdd.cucumber.CucumberWithSerenity;
import net.thucydides.core.model.TestResult;
import net.thucydides.core.model.TestStep;
import net.thucydides.core.screenshots.ScreenshotAndHtmlSource;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

import java.io.File;
import java.nio.file.Files;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.function.Function;

/**
 * TestRunner class
 *
 * Cucumber options default set, change according to your needs
 */
@RunWith(CucumberWithSerenity.class)
@CucumberOptions(
        plugin = {"pretty", "html:target/cucumber", "json:target/cucumber-report.json", "rerun:rerun/failed_scenarios.txt"},
        features={"src/test/resources/features/examples/fe/adidas/"},
        glue = {"com.adidas.tpAdidasSerenity"},
        tags = "@TEST_COMN-7917"
)
public class TestRunner {

    /**
     * Setup your test configuration here
     *     * Serenity integration with Reporting Portal offers 3 logs output configurations
     * DEFAULT      - recommended
     * FULL
     * CUSTOM       - recommended if you need to customize the output
     *                For example: save screenshots testing desktop applications
     *
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    @BeforeClass
    public static void setup() throws Exception {
        try {
            ReportIntegrationConfig reportIntegrationConfig = ReportIntegrationConfig.get();
            //DEFAULT preset
            LogsPreset preset = LogsPreset.DEFAULT;

            //FULL preset
            //LogsPreset preset = LogsPreset.FULL;

            //CUSTOM preset
            //LogsPreset preset = LogsPreset.CUSTOM;
            //preset.register(myCustomizedPreset);

            reportIntegrationConfig.usePreset(preset);

            //Activated to avoid errors while testing very long scenarios
            reportIntegrationConfig.truncateNames(true);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Customized logging of steps and screenshots in Reporting Portal
     *
     * Change according to your needs
     */
    static Function<TestStep, Collection<SaveLogRQ>> myCustomizedPreset = step -> {
        SaveLogRQ log = new SaveLogRQ();
        try {
            Date startDate = Utils.stepStartDate(step);
            Date startEnd = Utils.stepEndDate(step);
            attachScreenShot(step, log);
            if (TestResult.FAILURE.equals(step.getResult())) {
                log.setMessage(step.getResult() + " " + step.getDescription() + "\n\n"
                        + ExceptionUtils.getStackTrace(step.getException().toException()) + "\n\nStep Start Date: "
                        + startDate.toInstant() + "\nStep End Date: " + startEnd.toInstant());
            } else {
                log.setMessage(step.getResult() + " " + step.getDescription() + "\n\nStep Start Date: "
                        + startDate.toInstant() + "\nStep End Date: " + startEnd.toInstant());
            }
            log.setLogTime(startDate);
            log.setLevel(Utils.logLevel(step.getResult()));
        } catch (Exception t) {
            log.setMessage(t.getMessage());
            log.setLevel(Utils.logLevel(TestResult.ERROR));
        }
        return Collections.singleton(log);
    };

    /**
     * Attach screenshot to the current log
     *
     * @param step
     * @param log
     */
    private static void attachScreenShot(TestStep step, SaveLogRQ log){
        for (ScreenshotAndHtmlSource screenshotAndHtmlSource : step.getScreenshots()) {
            System.out.println("Screenshot "  + screenshotAndHtmlSource);
            File screenshot = screenshotAndHtmlSource.getScreenshot();
            if (screenshot != null) {
                SaveLogRQ.File attachedF = new SaveLogRQ.File();
                try {
                    attachedF.setContent(Files.readAllBytes(screenshot.toPath()));
                    attachedF.setContentType("image/png");
                    attachedF.setName(screenshot.getName());
                } catch (Exception t) {
                    t.printStackTrace();
                }
                log.setFile(attachedF);
            }
        }
    }

    @AfterClass
    public static void tearDown() throws Exception {}

}





